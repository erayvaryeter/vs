'use strict'

const { describe, it } = require('mocha')
const assert = require('assert')
const fs = require('fs')
const path = require('path')
const findVisualStudio = require('../lib/find-visualstudio')
const VisualStudioFinder = findVisualStudio.test.VisualStudioFinder

const semverV1 = { major: 1, minor: 0, patch: 0 }

delete process.env.VCINSTALLDIR

function poison (object, property) {
  function fail () {
    console.error(Error(`Property ${property} should not have been accessed.`))
    process.abort()
  }
  var descriptor = {
    configurable: false,
    enumerable: false,
    get: fail,
    set: fail
  }
  Object.defineProperty(object, property, descriptor)
}

function TestVisualStudioFinder () { VisualStudioFinder.apply(this, arguments) }
TestVisualStudioFinder.prototype = Object.create(VisualStudioFinder.prototype)
// Silence npmlog - remove for debugging
TestVisualStudioFinder.prototype.log = {
  silly: () => {},
  verbose: () => {},
  info: () => {},
  warn: () => {},
  error: () => {}
}

describe('find-visualstudio', function () {
  it('VS2013', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\MSBuild12\\MSBuild.exe',
        path: 'C:\\VS2013',
        sdk: null,
        toolset: 'v120',
        version: '12.0',
        versionMajor: 12,
        versionMinor: 0,
        versionYear: 2013
      })
    })

    finder.findVisualStudio2017OrNewer = (cb) => {
      finder.parseData(new Error(), '', '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            continue
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\12.0':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\VS2013\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\12.0\\MSBuildToolsPath':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\MSBuild12\\')
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
    finder.findVisualStudio()
  })

  it('VS2013 should not be found on new node versions', function () {
    const finder = new TestVisualStudioFinder({
      major: 10,
      minor: 0,
      patch: 0
    }, null, (err, info) => {
      assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
      assert.ok(!info, 'no data')
    })

    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures', 'VS_2017_Unusable.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            continue
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
    finder.findVisualStudio()
  })

  it('VS2015', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\MSBuild14\\MSBuild.exe',
        path: 'C:\\VS2015',
        sdk: null,
        toolset: 'v140',
        version: '14.0',
        versionMajor: 14,
        versionMinor: 0,
        versionYear: 2015
      })
    })

    finder.findVisualStudio2017OrNewer = (cb) => {
      finder.parseData(new Error(), '', '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\VS2015\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\14.0\\MSBuildToolsPath':
            assert.ok(true, `expected search for registry value ${fullName}`)
            return cb(null, 'C:\\MSBuild14\\')
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
    finder.findVisualStudio()
  })

  it('error from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(new Error(), '', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('empty output from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, '', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('output from PowerShell not JSON', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, 'AAAABBBB', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('wrong JSON from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, '{}', '', (info) => {
      assert.ok(/use PowerShell/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('empty JSON from PowerShell', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, '[]', '', (info) => {
      assert.ok(/find .* Visual Studio/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('future version', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    finder.parseData(null, JSON.stringify([{
      packages: [
        'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',
        'Microsoft.VisualStudio.Component.Windows10SDK.17763',
        'Microsoft.VisualStudio.VC.MSBuild.Base'
      ],
      path: 'C:\\VS',
      version: '9999.9999.9999.9999'
    }]), '', (info) => {
      assert.ok(/unknown version/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(/find .* Visual Studio/i.test(finder.errorLog[1]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('single unusable VS2017', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, null)

    const file = path.join(__dirname, 'fixtures', 'VS_2017_Unusable.txt')
    const data = fs.readFileSync(file)
    finder.parseData(null, data, '', (info) => {
      assert.ok(/checking/i.test(finder.errorLog[0]), 'expect error')
      assert.ok(/find .* Visual Studio/i.test(finder.errorLog[2]), 'expect error')
      assert.ok(!info, 'no data')
    })
  })

  it('minimal VS2017 Build Tools', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\' +
          'BuildTools\\MSBuild\\15.0\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools',
        sdk: '10.0.17134.0',
        toolset: 'v141',
        version: '15.9.28307.665',
        versionMajor: 15,
        versionMinor: 9,
        versionYear: 2017
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2017_BuildTools_minimal.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2017 Community with C++ workload', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\' +
          'Community\\MSBuild\\15.0\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community',
        sdk: '10.0.17763.0',
        toolset: 'v141',
        version: '15.9.28307.665',
        versionMajor: 15,
        versionMinor: 9,
        versionYear: 2017
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2017_Community_workload.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2017 Express', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\' +
          'WDExpress\\MSBuild\\15.0\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\WDExpress',
        sdk: '10.0.17763.0',
        toolset: 'v141',
        version: '15.9.28307.858',
        versionMajor: 15,
        versionMinor: 9,
        versionYear: 2017
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures', 'VS_2017_Express.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2019 Preview with C++ workload', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\' +
          'Preview\\MSBuild\\Current\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview',
        sdk: '10.0.17763.0',
        toolset: 'v142',
        version: '16.0.28608.199',
        versionMajor: 16,
        versionMinor: 0,
        versionYear: 2019
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2019_Preview.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('minimal VS2019 Build Tools', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\' +
          'BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools',
        sdk: '10.0.17134.0',
        toolset: 'v142',
        version: '16.1.28922.388',
        versionMajor: 16,
        versionMinor: 1,
        versionYear: 2019
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2019_BuildTools_minimal.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2019 Community with C++ workload', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\' +
          'Community\\MSBuild\\Current\\Bin\\MSBuild.exe',
        path:
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community',
        sdk: '10.0.17763.0',
        toolset: 'v142',
        version: '16.1.28922.388',
        versionMajor: 16,
        versionMinor: 1,
        versionYear: 2019
      })
    })

    poison(finder, 'regSearchKeys')
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2019_Community_workload.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  it('VS2022 Preview with C++ workload', function () {
    const msBuildPath = process.arch === 'arm64'
      ? 'C:\\Program Files\\Microsoft Visual Studio\\2022\\' +
        'Community\\MSBuild\\Current\\Bin\\arm64\\MSBuild.exe'
      : 'C:\\Program Files\\Microsoft Visual Studio\\2022\\' +
        'Community\\MSBuild\\Current\\Bin\\MSBuild.exe'

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info, {
        msBuild: msBuildPath,
        path:
          'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community',
        sdk: '10.0.22621.0',
        toolset: 'v143',
        version: '17.4.33213.308',
        versionMajor: 17,
        versionMinor: 4,
        versionYear: 2022
      })
    })

    poison(finder, 'regSearchKeys')
    finder.msBuildPathExists = (path) => {
      return true
    }
    finder.findVisualStudio2017OrNewer = (cb) => {
      const file = path.join(__dirname, 'fixtures',
        'VS_2022_Community_workload.txt')
      const data = fs.readFileSync(file)
      finder.parseData(null, data, '', cb)
    }
    finder.findVisualStudio()
  })

  function allVsVersions (finder) {
    finder.findVisualStudio2017OrNewer = (cb) => {
      const data0 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_Unusable.txt')))
      const data1 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_BuildTools_minimal.txt')))
      const data2 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_Community_workload.txt')))
      const data3 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2017_Express.txt')))
      const data4 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2019_Preview.txt')))
      const data5 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2019_BuildTools_minimal.txt')))
      const data6 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2019_Community_workload.txt')))
      const data7 = JSON.parse(fs.readFileSync(path.join(__dirname, 'fixtures',
        'VS_2022_Community_workload.txt')))
      const data = JSON.stringify(data0.concat(data1, data2, data3, data4,
        data5, data6, data7))
      finder.parseData(null, data, '', cb)
    }
    finder.regSearchKeys = (keys, value, addOpts, cb) => {
      for (var i = 0; i < keys.length; ++i) {
        const fullName = `${keys[i]}\\${value}`
        switch (fullName) {
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
          case 'HKLM\\Software\\Microsoft\\VisualStudio\\SxS\\VC7\\12.0':
            continue
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\12.0':
            return cb(null, 'C:\\VS2013\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\12.0\\MSBuildToolsPath':
            return cb(null, 'C:\\MSBuild12\\')
          case 'HKLM\\Software\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VC7\\14.0':
            return cb(null, 'C:\\VS2015\\VC\\')
          case 'HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\14.0\\MSBuildToolsPath':
            return cb(null, 'C:\\MSBuild14\\')
          default:
            assert.fail(`unexpected search for registry value ${fullName}`)
        }
      }
      return cb(new Error())
    }
  }

  it('fail when looking for invalid path', function () {
    const finder = new TestVisualStudioFinder(semverV1, 'AABB', (err, info) => {
      assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
      assert.ok(!info, 'no data')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2013 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2013', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2013)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2013 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2013',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path, 'C:\\VS2013')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2015 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2015', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2015)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2015 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2015',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path, 'C:\\VS2015')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2017 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2017', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2017)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2017 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1,
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path,
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2019 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2019', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2019)
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2019 by installation path', function () {
    const finder = new TestVisualStudioFinder(semverV1,
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path,
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('look for VS2022 by version number', function () {
    const finder = new TestVisualStudioFinder(semverV1, '2022', (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2022)
    })

    finder.msBuildPathExists = (path) => {
      return true
    }

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('msvs_version match should be case insensitive', function () {
    const finder = new TestVisualStudioFinder(semverV1,
      'c:\\program files (x86)\\microsoft visual studio\\2019\\BUILDTOOLS',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path,
          'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('latest version should be found by default', function () {
    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.versionYear, 2022)
    })

    finder.msBuildPathExists = (path) => {
      return true
    }

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a usable VS Command Prompt', function () {
    process.env.VCINSTALLDIR = 'C:\\VS2015\\VC'
    // VSINSTALLDIR is not defined on Visual C++ Build Tools 2015
    delete process.env.VSINSTALLDIR

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.path, 'C:\\VS2015')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('VCINSTALLDIR match should be case insensitive', function () {
    process.env.VCINSTALLDIR =
      'c:\\program files (x86)\\microsoft visual studio\\2019\\BUILDTOOLS\\VC'

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.strictEqual(err, null)
      assert.deepStrictEqual(info.path,
        'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a unusable VS Command Prompt', function () {
    process.env.VCINSTALLDIR =
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildToolsUnusable\\VC'

    const finder = new TestVisualStudioFinder(semverV1, null, (err, info) => {
      assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
      assert.ok(!info, 'no data')
    })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a VS Command Prompt with matching msvs_version', function () {
    process.env.VCINSTALLDIR = 'C:\\VS2015\\VC'

    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2015',
      (err, info) => {
        assert.strictEqual(err, null)
        assert.deepStrictEqual(info.path, 'C:\\VS2015')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })

  it('run on a VS Command Prompt with mismatched msvs_version', function () {
    process.env.VCINSTALLDIR =
      'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC'

    const finder = new TestVisualStudioFinder(semverV1, 'C:\\VS2015',
      (err, info) => {
        assert.ok(/find .* Visual Studio/i.test(err), 'expect error')
        assert.ok(!info, 'no data')
      })

    allVsVersions(finder)
    finder.findVisualStudio()
  })
})

// SIG // Begin signature block
// SIG // MIIoQAYJKoZIhvcNAQcCoIIoMTCCKC0CAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // yqG5TFOAaHMwHoJgLe8kUIPRSNEd+zLJVl645z0fK9Gg
// SIG // gg2LMIIGCTCCA/GgAwIBAgITMwAAA4TZaH1mzHVLoQAA
// SIG // AAADhDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMDcxMzIzNDUzOFoX
// SIG // DTI0MDkxNTIzNDUzOFowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAznLqoz/10YOqShXj
// SIG // Gln6TE4BGUwZ3uJsXV3BIhK2/5WfWH8YMWvFoTgOul1P
// SIG // rrDlA5qOs/1qSNylRSLn+DKx4e+sQC/x8qVPWx+4bwhu
// SIG // NHaNGEMZsppPjtuc10OmdECsioQzVOyu/TlVohP0DUT1
// SIG // w8V4+uR06k9qm+XVcw84nrH6xac865B7TswYpBBBZdaG
// SIG // X5mTst5UnoomlS8JIGqD6WDAyvlmwDRl0C0Omj+b8lg7
// SIG // ZJ4wz9hfYI6eo/kOu2wgYyLPBaXR9iDehwLxN1/xOGDi
// SIG // Dq2WNiWFM/aaBYda645BrjOAk9rc3aoX5AdvEDp7oRMi
// SIG // fgJgdwdNaC/WoTUomQIDAQABo4IBczCCAW8wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFBzcFkQMR/V8OGV/cF0ZRXO9ery8MEUGA1UdEQQ+
// SIG // MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xFjAUBgNVBAUTDTIzMTUyMis1MDExNDgwHwYD
// SIG // VR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYD
// SIG // VR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMw
// SIG // UQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAnvqLcbzrt8+kzifeRGz6b
// SIG // UaHMp1aMqJtfMarjiUinqgzSLbtqZslaWomQ4T7LS8rq
// SIG // NJl8jSz4d0wJfm6LblH6RWQzhs4JqllQa3R0MbLt7fvs
// SIG // ehsNASX0L5/3NP5VP40U0UwKe0u4wKo6qcjHNMr66y+s
// SIG // b1DZ965C5Hctslwx1qR3RMeSXaSQ6YJ+Y9bb9xhnbXmH
// SIG // YWZW9h6JWnFYriUm3jHRubAw7KXMPMWNQ7OBTF6uzGKi
// SIG // 2ELK/CsFyWfeUm6GdPVf+TDsKShhoZXtAXOZwBK3SQTY
// SIG // 42gSwTBg4oPTldGd2SH2OIzhZXkxLCuSzk0LUmjVQ+K2
// SIG // xvkJzLMHi2oO6lTO8+SHjqhO1GPwnwhJLJfoaynNzAb3
// SIG // XMj3CdvPcd4EZDh9PRSI0SAHxaQQ0pD4+B1uSyqjUr9w
// SIG // GxZbisemYGzWIcB8UEsQ6mLE5QI7Z2zI2CNkU60iDI4B
// SIG // mEb38Gue8qcj3Zcs5teEOVDYILFsq9ToPkG0HluvkQhu
// SIG // hblf5xAGKzIHh5TEAXedGlYU3QXquQkdxs+quGlS+5xH
// SIG // Q0enmLi9FNXuBKC9jmAaJN8uKwS96+e5yxBGesTBgHuX
// SIG // hwT7YHLj8OUv2iQ66KXrvuAV0ouUf6hpLU5Gyn5STAJX
// SIG // 1xy+muuKPPIfIvGWeBxxzONasTAedo/W4GggkBSRZSyT
// SIG // 7zCCB3owggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZI
// SIG // hvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAw
// SIG // BgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
// SIG // IEF1dGhvcml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoX
// SIG // DTI2MDcwODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEoMCYGA1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmlu
// SIG // ZyBQQ0EgMjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
// SIG // ADCCAgoCggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0Ib
// SIG // KmvpWlCquAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnV
// SIG // ARQxQtOJDXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mp
// SIG // K656Ca/XllnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQu
// SIG // A3WraPPLbfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj
// SIG // 3gcN1Vx5pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuAS
// SIG // OrdJXtjt7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7
// SIG // La4zWMW3Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzlu
// SIG // ZH9TupwPrRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgo
// SIG // tswnKDglmDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd
// SIG // 0yFLPlLEtVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKC
// SIG // X9vAFbO9G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTf
// SIG // v0aZxe/CHFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt
// SIG // 1u1L50kppxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1t
// SIG // wyiPLI9AN0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11g
// SIG // lZo+TzOE2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGj
// SIG // ggHtMIIB6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4E
// SIG // FgQUSG5k5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQ
// SIG // Q7kUBU7h6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJ
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAz
// SIG // XzIyLmNybDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUH
// SIG // MAKGQmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kv
// SIG // Y2VydHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIy
// SIG // LmNydDCBnwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMw
// SIG // gYMwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0
// SIG // bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBw
// SIG // AG8AbABpAGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4g
// SIG // HTANBgkqhkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPY
// SIG // dGcimwuWEeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/
// SIG // 6ArKO79HqaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpL
// SIG // HPM8QotS0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14
// SIG // eiPzE32mkHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAq
// SIG // PyprWEljHwlpblqYluSD9MCP80Yr3vw70L01724lruWv
// SIG // J+3Q3fMOr5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5
// SIG // CsYKwsatruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiy
// SIG // WYlobm+nt3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8V
// SIG // fUWnduVAKmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX
// SIG // 0O5dY0HjWwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HH
// SIG // Diju3mUv7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnF
// SIG // sZulP0V3HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX
// SIG // 4ut1eBrs6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDt
// SIG // BEyO3991bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jM
// SIG // pF3BoYibV3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJz
// SIG // Ew16UM0xghoNMIIaCQIBATCBlTB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExAhMzAAADhNlofWbMdUuhAAAA
// SIG // AAOEMA0GCWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJ
// SIG // AzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAM
// SIG // BgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCAa+E1r
// SIG // lr/xeA/7iQqyFh6hJ05EgqZBhLDc1uMY+F1B3DBCBgor
// SIG // BgEEAYI3AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBm
// SIG // AHShGoAYaHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0G
// SIG // CSqGSIb3DQEBAQUABIIBADuKb1yp9aO3PusCI6rDS9Mb
// SIG // QEnn/vRs5RErkMHJF54QHgHGmQvMl1AWsYliqfLOqYrd
// SIG // gpapw+T6azKIXOBsEMM/M0OCJWk6Hl/RLgPcF7x9ZuIo
// SIG // jrYbysMUBvriR5bejhStoj9hGIRu2mq6Dz4WBVHOmvFC
// SIG // rHQyK2PvaD+9SKCK7OyJsuhcw0t7zOJYrwTDq10cKe2G
// SIG // ce5HFHx8v1zb/R+Q1uOq8HZRLFtFLgKITjMmEV6DiL2V
// SIG // eK4dFcphgfBMEG9bBNrUNdb0xMuG2IAoHijp1UIs2jWN
// SIG // cvv5FIzQ+0hwVUYX43MBNr0TPl/AVz95W3hsiyDVvjC1
// SIG // TOYR+vjQ7UWhgheXMIIXkwYKKwYBBAGCNwMDATGCF4Mw
// SIG // ghd/BgkqhkiG9w0BBwKgghdwMIIXbAIBAzEPMA0GCWCG
// SIG // SAFlAwQCAQUAMIIBUgYLKoZIhvcNAQkQAQSgggFBBIIB
// SIG // PTCCATkCAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQME
// SIG // AgEFAAQgCrAQeq3B3ifyxAV11Ax3IlYrgBxXL0u36/UI
// SIG // GWqNbGwCBmUolf5uZxgTMjAyMzExMTUwMDEzMTcuODg5
// SIG // WjAEgAIB9KCB0aSBzjCByzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3Bl
// SIG // cmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1MgRVNO
// SIG // Ojg5MDAtMDVFMC1EOTQ3MSUwIwYDVQQDExxNaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBTZXJ2aWNloIIR7TCCByAwggUI
// SIG // oAMCAQICEzMAAAHTHTKaFztAMHMAAQAAAdMwDQYJKoZI
// SIG // hvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTAwHhcNMjMwNTI1MTkxMjI0WhcNMjQwMjAxMTkxMjI0
// SIG // WjCByzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMc
// SIG // TWljcm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEnMCUG
// SIG // A1UECxMeblNoaWVsZCBUU1MgRVNOOjg5MDAtMDVFMC1E
// SIG // OTQ3MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNlMIICIjANBgkqhkiG9w0BAQEFAAOCAg8A
// SIG // MIICCgKCAgEAtI6rkzeINcW4VwnPDFfnTrvFKnNym22l
// SIG // rYub3bAFjNQ+H1UovuDVoBrT/wVUWK1Y9qFZ5zMtHms4
// SIG // nUDieLlLHATGzx2jMWjaYG0RvRREERZ3AFKbVpyPlT5e
// SIG // dzw+jDy9Ms/HBwtmQ98HheMPrjAwBpy9+gZJtLKzjV75
// SIG // zPXjb5xuXY6KRKoh6HVkmrkcnuLn7QUdrE8Bh1ZsSrtB
// SIG // kuHzvOzYGyeFRsyAkcmV8Pfkb71zBv44TNdR/AFisyqZ
// SIG // 9KDBptTEjHjby1Fm99R0mXpMfzQRLV75naO+TldN9DR4
// SIG // CF4ocWBHkoFCMX2yOTpoDKv1QwkKdq/38v+TVWtyowkK
// SIG // DapphDOqKwCdlyo2IRCc6KeJ1gnCfe9FOq16QTyuFxjS
// SIG // gRYYS2u+EzP8rExSKxFziRtX1Ll33HVm9BMdBQHk06+o
// SIG // Jpgqq3iTXozR33xv1RHheyzb1KrmBUZ3YglIYMutuK1u
// SIG // qbXJ0E4kXxNEC/4CxeNZANr2TGM3HNehImF0EAWhd1wL
// SIG // THbodXaV6kzz0BDtzLOf+QfyrY4UrKTHD1L0b29+SFjf
// SIG // qvi/sxMIqYZpwhhU7sjjKnOUBNK7hjdzMdFb+sf4XDpm
// SIG // l8ax0BqTSiOT5+/WJPPQHJalNplx89WR1qfigXNw+lT+
// SIG // y99iZcMYScd2rGtPOcb9Fzw+fDEVtVmhr2kCAwEAAaOC
// SIG // AUkwggFFMB0GA1UdDgQWBBTSxyCGuBQA+PeM9+Yb8wpp
// SIG // tONeYjAfBgNVHSMEGDAWgBSfpxVdAF5iXYP05dJlpxtT
// SIG // NRnpcjBfBgNVHR8EWDBWMFSgUqBQhk5odHRwOi8vd3d3
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNyb3Nv
// SIG // ZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5j
// SIG // cmwwbAYIKwYBBQUHAQEEYDBeMFwGCCsGAQUFBzAChlBo
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2Nl
// SIG // cnRzL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0El
// SIG // MjAyMDEwKDEpLmNydDAMBgNVHRMBAf8EAjAAMBYGA1Ud
// SIG // JQEB/wQMMAoGCCsGAQUFBwMIMA4GA1UdDwEB/wQEAwIH
// SIG // gDANBgkqhkiG9w0BAQsFAAOCAgEAQGJYWKFEPuGmkOeD
// SIG // BTXxOhMvL+K1r/i7Q0UozDNl/YOLmpwPXFO1YrXaSD1f
// SIG // 8xOr+ABIXv1Z4NlAEeao9kld7M/nw6jelS1lGbCkdEEd
// SIG // iWFypxT0VY9ens2cj+83eR/CLL7HBHKJ3l/mkRxdMRhj
// SIG // OLQy60vOL4+kZtG4KFi11pzE2eZD+KMJxpptC7JiJ7rt
// SIG // Biqw2Z5Hk1Zn5PIE08vHdctz9iGHNlCOIiWFwrkmigrh
// SIG // XjtMKsrHKb4RkEp6NVwBSt6Gsm7g9ZkqEMU/au+/iwBh
// SIG // kG4kqBpYE40EGsmLEGj3BtUOEDcDjRqpAEgmU28yZZ5p
// SIG // B4JFpSki07pTmopViGOIUtRGfsPrF9ASfS3DNeNoedTp
// SIG // VyzKDy6cxwG+sdtoqWgCeSn97shWjilsOIZ7tM1rPjyj
// SIG // 3dfdp3XitqIFn2hXX5xL5Fgwx9naC/mQOUAXfF54LP5n
// SIG // dwa55ZdgZGf4ImRP3ysqJa4kd2kwFgsRQlyiJfwpbtm2
// SIG // 54/an1WC6QFUBHD2gn0wH+zmQZV5pbhE76tWP0jYcQuj
// SIG // CdUCwp5F0iP/4l2KZkSk+/N0CkYJqP+M7Y97i/We8W2x
// SIG // sSEoPj9B00V9ecuE0XgWztkRTcgo/PIDjkZPrME9ZGil
// SIG // 1HxgeM44OV7pcUm8t7izcUHmxOkxN3ACtPn52OVKR2hH
// SIG // ZcOHu4owggdxMIIFWaADAgECAhMzAAAAFcXna54Cm0mZ
// SIG // AAAAAAAVMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9v
// SIG // dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0y
// SIG // MTA5MzAxODIyMjVaFw0zMDA5MzAxODMyMjVaMHwxCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFBDQSAyMDEwMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEA5OGmTOe0ciELeaLL
// SIG // 1yR5vQ7VgtP97pwHB9KpbE51yMo1V/YBf2xK4OK9uT4X
// SIG // YDP/XE/HZveVU3Fa4n5KWv64NmeFRiMMtY0Tz3cywBAY
// SIG // 6GB9alKDRLemjkZrBxTzxXb1hlDcwUTIcVxRMTegCjhu
// SIG // je3XD9gmU3w5YQJ6xKr9cmmvHaus9ja+NSZk2pg7uhp7
// SIG // M62AW36MEBydUv626GIl3GoPz130/o5Tz9bshVZN7928
// SIG // jaTjkY+yOSxRnOlwaQ3KNi1wjjHINSi947SHJMPgyY9+
// SIG // tVSP3PoFVZhtaDuaRr3tpK56KTesy+uDRedGbsoy1cCG
// SIG // MFxPLOJiss254o2I5JasAUq7vnGpF1tnYN74kpEeHT39
// SIG // IM9zfUGaRnXNxF803RKJ1v2lIH1+/NmeRd+2ci/bfV+A
// SIG // utuqfjbsNkz2K26oElHovwUDo9Fzpk03dJQcNIIP8BDy
// SIG // t0cY7afomXw/TNuvXsLz1dhzPUNOwTM5TI4CvEJoLhDq
// SIG // hFFG4tG9ahhaYQFzymeiXtcodgLiMxhy16cg8ML6EgrX
// SIG // Y28MyTZki1ugpoMhXV8wdJGUlNi5UPkLiWHzNgY1GIRH
// SIG // 29wb0f2y1BzFa/ZcUlFdEtsluq9QBXpsxREdcu+N+VLE
// SIG // hReTwDwV2xo3xwgVGD94q0W29R6HXtqPnhZyacaue7e3
// SIG // PmriLq0CAwEAAaOCAd0wggHZMBIGCSsGAQQBgjcVAQQF
// SIG // AgMBAAEwIwYJKwYBBAGCNxUCBBYEFCqnUv5kxJq+gpE8
// SIG // RjUpzxD/LwTuMB0GA1UdDgQWBBSfpxVdAF5iXYP05dJl
// SIG // pxtTNRnpcjBcBgNVHSAEVTBTMFEGDCsGAQQBgjdMg30B
// SIG // ATBBMD8GCCsGAQUFBwIBFjNodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20vcGtpb3BzL0RvY3MvUmVwb3NpdG9yeS5o
// SIG // dG0wEwYDVR0lBAwwCgYIKwYBBQUHAwgwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/o
// SIG // olxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBLoEmgR4ZF
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMu
// SIG // Y3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+
// SIG // aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0
// SIG // cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwDQYJ
// SIG // KoZIhvcNAQELBQADggIBAJ1VffwqreEsH2cBMSRb4Z5y
// SIG // S/ypb+pcFLY+TkdkeLEGk5c9MTO1OdfCcTY/2mRsfNB1
// SIG // OW27DzHkwo/7bNGhlBgi7ulmZzpTTd2YurYeeNg2Lpyp
// SIG // glYAA7AFvonoaeC6Ce5732pvvinLbtg/SHUB2RjebYIM
// SIG // 9W0jVOR4U3UkV7ndn/OOPcbzaN9l9qRWqveVtihVJ9Ak
// SIG // vUCgvxm2EhIRXT0n4ECWOKz3+SmJw7wXsFSFQrP8DJ6L
// SIG // GYnn8AtqgcKBGUIZUnWKNsIdw2FzLixre24/LAl4FOmR
// SIG // sqlb30mjdAy87JGA0j3mSj5mO0+7hvoyGtmW9I/2kQH2
// SIG // zsZ0/fZMcm8Qq3UwxTSwethQ/gpY3UA8x1RtnWN0SCyx
// SIG // TkctwRQEcb9k+SS+c23Kjgm9swFXSVRk2XPXfx5bRAGO
// SIG // WhmRaw2fpCjcZxkoJLo4S5pu+yFUa2pFEUep8beuyOiJ
// SIG // Xk+d0tBMdrVXVAmxaQFEfnyhYWxz/gq77EFmPWn9y8FB
// SIG // SX5+k77L+DvktxW/tM4+pTFRhLy/AsGConsXHRWJjXD+
// SIG // 57XQKBqJC4822rpM+Zv/Cuk0+CQ1ZyvgDbjmjJnW4SLq
// SIG // 8CdCPSWU5nR0W2rRnj7tfqAxM328y+l7vzhwRNGQ8cir
// SIG // Ooo6CGJ/2XBjU02N7oJtpQUQwXEGahC0HVUzWLOhcGby
// SIG // oYIDUDCCAjgCAQEwgfmhgdGkgc4wgcsxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVy
// SIG // aWNhIE9wZXJhdGlvbnMxJzAlBgNVBAsTHm5TaGllbGQg
// SIG // VFNTIEVTTjo4OTAwLTA1RTAtRDk0NzElMCMGA1UEAxMc
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIjCgEB
// SIG // MAcGBSsOAwIaAxUAUsdt3DHDQdSEMLPy2JEV2uyOSbCg
// SIG // gYMwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDANBgkqhkiG9w0BAQsFAAIFAOj97BYwIhgPMjAyMzEx
// SIG // MTQxMjUyMzhaGA8yMDIzMTExNTEyNTIzOFowdzA9Bgor
// SIG // BgEEAYRZCgQBMS8wLTAKAgUA6P3sFgIBADAKAgEAAgIH
// SIG // YgIB/zAHAgEAAgITdDAKAgUA6P89lgIBADA2BgorBgEE
// SIG // AYRZCgQCMSgwJjAMBgorBgEEAYRZCgMCoAowCAIBAAID
// SIG // B6EgoQowCAIBAAIDAYagMA0GCSqGSIb3DQEBCwUAA4IB
// SIG // AQASbw9ZLdXnjRBQ79Lu/DI0tot/WFEqfPpFOCvg4iHX
// SIG // Um0Xw6g68OxGVzS7IngPsmwKFIDjuonDmJqjgx+eenqw
// SIG // mITXxcduyUhe2wzVF3KA+gJeJPwCPP9+ix7V0x1YJtww
// SIG // yJ64BWPwMcipLLgN2NDlteO3XhH5PUeXStyaKrnaFxU5
// SIG // U+qP5ric2IZlQfoa+hzo5K+J8kYmQEf1mGRcMzTxXC3n
// SIG // fad2UhwbnHzsWCWZgt8l6ts/YqUMs/Db/UqWPX7nAg4+
// SIG // SLZRM248LtPbNTyYRcEQhkh46BQBVA4rjiaolX+P/c4l
// SIG // yG+QbjYr1772Ikvt29ws8LT1owR0JPmhFgrZMYIEDTCC
// SIG // BAkCAQEwgZMwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTACEzMAAAHTHTKaFztAMHMAAQAAAdMwDQYJYIZIAWUD
// SIG // BAIBBQCgggFKMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0B
// SIG // CRABBDAvBgkqhkiG9w0BCQQxIgQgcmSvu/L//NzZOT7Q
// SIG // VGUIWXFk9BNfkweKzTeaCOnUUZMwgfoGCyqGSIb3DQEJ
// SIG // EAIvMYHqMIHnMIHkMIG9BCCSZvTqxODuT1gNSmhWs7a/
// SIG // bj/eq0IBJ/rYBrWN8Tqq9TCBmDCBgKR+MHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB0x0ymhc7QDBz
// SIG // AAEAAAHTMCIEIMFPgpulYWjhejo2LuLn3kSZ20w7iS3o
// SIG // jFO8un2EJhkMMA0GCSqGSIb3DQEBCwUABIICAF0kbhB+
// SIG // 3HWMNlq8nTFOwV7R/1hG7TypP2I9TN/bYxKcL3BZLUGI
// SIG // 1I2nddFgjRyh0Xf0qqC05C/EkzfUjwjTWW4QBOQZT3E0
// SIG // +gFOZ65JaVRGF0oywGlR3qrda2cMtKve4hCXQASNTTwT
// SIG // +EsP1FU0jApBVN8PI34uoxBlC9/J4fz6OXEvUooxX/1h
// SIG // AJgUfZSRq8jqKsuPkNvvOACXVvyekFcVFa9IFyX0TeLN
// SIG // cJK7c6PrqxGN9n7H23WkWzLbFAXSw4/Drz10tGS3teAw
// SIG // QQ2V+neWaby9TaKXRlB7sXzrlZuTYbnd3MCaXkjk5JuI
// SIG // h8URC99IJG6//MYJc1Jznr+TqADkFPbOGTpUGJ7EaZ5q
// SIG // hWUnkzIFtsGWLwkttknevPitl/+lD/ZWYLwK/9K9/na1
// SIG // Wnfi57LUN97Tm3BLxYv2xQO0eQTb/hgfj3bm4ounFs7q
// SIG // 98rDORdrTwklKkK8f2BhLS5jmAdLR8CEE7OV4/K2rkjZ
// SIG // l/NAgLja1MEPKT+qkovl3xNokbzgcneinXYFXPlx3xC6
// SIG // uP/UU2BxwcrGSYQYhpVPJGJHbt0Zjc8RerCUKvkja9v5
// SIG // 4dFT8Gf8uaC8scYjVDhXJ5lmFJJPt3p8dbTTfVifRRIq
// SIG // Xr9NdUeAEnnvALWt8xqQUsgxkO2s25yFXk2gn5gXsDhn
// SIG // xicD6S6YjW9UBwYe
// SIG // End signature block
