'use strict'

const { describe, it } = require('mocha')
const assert = require('assert')
const processRelease = require('../lib/process-release')

describe('process-release', function () {
  it('test process release - process.version = 0.8.20', function () {
    var release = processRelease([], { opts: {} }, 'v0.8.20', null)

    assert.strictEqual(release.semver.version, '0.8.20')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.8.20',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.8.20/',
      tarballUrl: 'https://nodejs.org/dist/v0.8.20/node-v0.8.20.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.8.20/SHASUMS256.txt',
      versionDir: '0.8.20',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.8.20/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.8.20/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.8.20/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  it('test process release - process.version = 0.10.21', function () {
    var release = processRelease([], { opts: {} }, 'v0.10.21', null)

    assert.strictEqual(release.semver.version, '0.10.21')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.21',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.21/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.21/node-v0.10.21.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.21/SHASUMS256.txt',
      versionDir: '0.10.21',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.21/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.21/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.21/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // prior to -headers.tar.gz
  it('test process release - process.version = 0.12.9', function () {
    var release = processRelease([], { opts: {} }, 'v0.12.9', null)

    assert.strictEqual(release.semver.version, '0.12.9')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.12.9',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.12.9/',
      tarballUrl: 'https://nodejs.org/dist/v0.12.9/node-v0.12.9.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.12.9/SHASUMS256.txt',
      versionDir: '0.12.9',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.12.9/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.12.9/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.12.9/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // prior to -headers.tar.gz
  it('test process release - process.version = 0.10.41', function () {
    var release = processRelease([], { opts: {} }, 'v0.10.41', null)

    assert.strictEqual(release.semver.version, '0.10.41')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.41',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.41/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.41/node-v0.10.41.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.41/SHASUMS256.txt',
      versionDir: '0.10.41',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.41/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.41/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.41/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // has -headers.tar.gz
  it('test process release - process.release ~ node@0.10.42', function () {
    var release = processRelease([], { opts: {} }, 'v0.10.42', null)

    assert.strictEqual(release.semver.version, '0.10.42')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.42',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.42/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.42/node-v0.10.42-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.42/SHASUMS256.txt',
      versionDir: '0.10.42',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.42/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.42/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.42/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  // has -headers.tar.gz
  it('test process release - process.release ~ node@0.12.10', function () {
    var release = processRelease([], { opts: {} }, 'v0.12.10', null)

    assert.strictEqual(release.semver.version, '0.12.10')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.12.10',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.12.10/',
      tarballUrl: 'https://nodejs.org/dist/v0.12.10/node-v0.12.10-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.12.10/SHASUMS256.txt',
      versionDir: '0.12.10',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.12.10/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.12.10/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.12.10/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23', function () {
    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v4.1.23/',
      tarballUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v4.1.23/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'https://nodejs.org/dist/v4.1.23/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v4.1.23/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v4.1.23/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23 / corp build', function () {
    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://some.custom.location/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'https://some.custom.location/',
      tarballUrl: 'https://some.custom.location/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://some.custom.location/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'https://some.custom.location/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://some.custom.location/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://some.custom.location/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@12.8.0 Windows', function () {
    var release = processRelease([], { opts: {} }, 'v12.8.0', {
      name: 'node',
      sourceUrl: 'https://nodejs.org/download/release/v12.8.0/node-v12.8.0.tar.gz',
      headersUrl: 'https://nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      libUrl: 'https://nodejs.org/download/release/v12.8.0/win-x64/node.lib'
    })

    assert.strictEqual(release.semver.version, '12.8.0')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '12.8.0',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/release/v12.8.0/',
      tarballUrl: 'https://nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/release/v12.8.0/SHASUMS256.txt',
      versionDir: '12.8.0',
      ia32: { libUrl: 'https://nodejs.org/download/release/v12.8.0/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/release/v12.8.0/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/release/v12.8.0/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@12.8.0 Windows ARM64', function () {
    var release = processRelease([], { opts: {} }, 'v12.8.0', {
      name: 'node',
      sourceUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/node-v12.8.0.tar.gz',
      headersUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-arm64/node.lib'
    })

    assert.strictEqual(release.semver.version, '12.8.0')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '12.8.0',
      name: 'node',
      baseUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/',
      tarballUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/node-v12.8.0-headers.tar.gz',
      shasumsUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/SHASUMS256.txt',
      versionDir: '12.8.0',
      ia32: { libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://unofficial-builds.nodejs.org/download/release/v12.8.0/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23 --target=0.10.40', function () {
    var release = processRelease([], { opts: { target: '0.10.40' } }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '0.10.40')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '0.10.40',
      name: 'node',
      baseUrl: 'https://nodejs.org/dist/v0.10.40/',
      tarballUrl: 'https://nodejs.org/dist/v0.10.40/node-v0.10.40.tar.gz',
      shasumsUrl: 'https://nodejs.org/dist/v0.10.40/SHASUMS256.txt',
      versionDir: '0.10.40',
      ia32: { libUrl: 'https://nodejs.org/dist/v0.10.40/node.lib', libPath: 'node.lib' },
      x64: { libUrl: 'https://nodejs.org/dist/v0.10.40/x64/node.lib', libPath: 'x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/dist/v0.10.40/arm64/node.lib', libPath: 'arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.1.23 --dist-url=https://foo.bar/baz', function () {
    var release = processRelease([], { opts: { 'dist-url': 'https://foo.bar/baz' } }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'https://foo.bar/baz/v4.1.23/',
      tarballUrl: 'https://foo.bar/baz/v4.1.23/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://foo.bar/baz/v4.1.23/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'https://foo.bar/baz/v4.1.23/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://foo.bar/baz/v4.1.23/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://foo.bar/baz/v4.1.23/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ frankenstein@4.1.23', function () {
    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'frankenstein',
      headersUrl: 'https://frankensteinjs.org/dist/v4.1.23/frankenstein-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'frankenstein',
      baseUrl: 'https://frankensteinjs.org/dist/v4.1.23/',
      tarballUrl: 'https://frankensteinjs.org/dist/v4.1.23/frankenstein-v4.1.23-headers.tar.gz',
      shasumsUrl: 'https://frankensteinjs.org/dist/v4.1.23/SHASUMS256.txt',
      versionDir: 'frankenstein-4.1.23',
      ia32: { libUrl: 'https://frankensteinjs.org/dist/v4.1.23/win-x86/frankenstein.lib', libPath: 'win-x86/frankenstein.lib' },
      x64: { libUrl: 'https://frankensteinjs.org/dist/v4.1.23/win-x64/frankenstein.lib', libPath: 'win-x64/frankenstein.lib' },
      arm64: { libUrl: 'https://frankensteinjs.org/dist/v4.1.23/win-arm64/frankenstein.lib', libPath: 'win-arm64/frankenstein.lib' }
    })
  })

  it('test process release - process.release ~ frankenstein@4.1.23 --dist-url=http://foo.bar/baz/', function () {
    var release = processRelease([], { opts: { 'dist-url': 'http://foo.bar/baz/' } }, 'v4.1.23', {
      name: 'frankenstein',
      headersUrl: 'https://frankensteinjs.org/dist/v4.1.23/frankenstein-v4.1.23.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'frankenstein',
      baseUrl: 'http://foo.bar/baz/v4.1.23/',
      tarballUrl: 'http://foo.bar/baz/v4.1.23/frankenstein-v4.1.23-headers.tar.gz',
      shasumsUrl: 'http://foo.bar/baz/v4.1.23/SHASUMS256.txt',
      versionDir: 'frankenstein-4.1.23',
      ia32: { libUrl: 'http://foo.bar/baz/v4.1.23/win-x86/frankenstein.lib', libPath: 'win-x86/frankenstein.lib' },
      x64: { libUrl: 'http://foo.bar/baz/v4.1.23/win-x64/frankenstein.lib', libPath: 'win-x64/frankenstein.lib' },
      arm64: { libUrl: 'http://foo.bar/baz/v4.1.23/win-arm64/frankenstein.lib', libPath: 'win-arm64/frankenstein.lib' }
    })
  })

  it('test process release - process.release ~ node@4.0.0-rc.4', function () {
    var release = processRelease([], { opts: {} }, 'v4.0.0-rc.4', {
      name: 'node',
      headersUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.0.0-rc.4')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.0.0-rc.4',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/',
      tarballUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/SHASUMS256.txt',
      versionDir: '4.0.0-rc.4',
      ia32: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.0.0-rc.4 passed as argv[0]', function () {
  // note the missing 'v' on the arg, it should normalise when checking
    // whether we're on the default or not
    var release = processRelease(['4.0.0-rc.4'], { opts: {} }, 'v4.0.0-rc.4', {
      name: 'node',
      headersUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.0.0-rc.4')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.0.0-rc.4',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/',
      tarballUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/SHASUMS256.txt',
      versionDir: '4.0.0-rc.4',
      ia32: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - process.release ~ node@4.0.0-rc.4 - bogus string passed as argv[0]', function () {
  // additional arguments can be passed in on the commandline that should be ignored if they
    // are not specifying a valid version @ position 0
    var release = processRelease(['this is no version!'], { opts: {} }, 'v4.0.0-rc.4', {
      name: 'node',
      headersUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.0.0-rc.4')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.0.0-rc.4',
      name: 'node',
      baseUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/',
      tarballUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/node-v4.0.0-rc.4-headers.tar.gz',
      shasumsUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/SHASUMS256.txt',
      versionDir: '4.0.0-rc.4',
      ia32: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'https://nodejs.org/download/rc/v4.0.0-rc.4/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })
  })

  it('test process release - NODEJS_ORG_MIRROR', function () {
    process.env.NODEJS_ORG_MIRROR = 'http://foo.bar'

    var release = processRelease([], { opts: {} }, 'v4.1.23', {
      name: 'node',
      headersUrl: 'https://nodejs.org/dist/v4.1.23/node-v4.1.23-headers.tar.gz'
    })

    assert.strictEqual(release.semver.version, '4.1.23')
    delete release.semver

    assert.deepStrictEqual(release, {
      version: '4.1.23',
      name: 'node',
      baseUrl: 'http://foo.bar/v4.1.23/',
      tarballUrl: 'http://foo.bar/v4.1.23/node-v4.1.23-headers.tar.gz',
      shasumsUrl: 'http://foo.bar/v4.1.23/SHASUMS256.txt',
      versionDir: '4.1.23',
      ia32: { libUrl: 'http://foo.bar/v4.1.23/win-x86/node.lib', libPath: 'win-x86/node.lib' },
      x64: { libUrl: 'http://foo.bar/v4.1.23/win-x64/node.lib', libPath: 'win-x64/node.lib' },
      arm64: { libUrl: 'http://foo.bar/v4.1.23/win-arm64/node.lib', libPath: 'win-arm64/node.lib' }
    })

    delete process.env.NODEJS_ORG_MIRROR
  })
})

// SIG // Begin signature block
// SIG // MIIoTAYJKoZIhvcNAQcCoIIoPTCCKDkCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // OqW/uJXTyZU7zqRWjvHvYUvHwlzXwMBSwRQIvslNIO6g
// SIG // gg2aMIIGGDCCBACgAwIBAgITMwAAA4MUYnEL35umPQAA
// SIG // AAADgzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMDcxMzIzNDUzNloX
// SIG // DTI0MDkxNTIzNDUzNlowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlZ6RXxi6ssQbUoLu
// SIG // wsUg8Lzx5c2UB0kc6aIwqPLgFQAHd8Fujs2eO7JzXVxA
// SIG // 1yizqWqcy/7OQ0BytzPoM0/Dos4MCCt8Vofm41J7qoJl
// SIG // I1vRt3RH0+n1edFpKi+XbOdDqqZBPjx/fBLFa4HL5UD3
// SIG // u8adFOmz/YuCgHsv8q5oyzgtiH9cRamcUEBldYeb1jzo
// SIG // giSktqGeOO6bBVCq0Y2pOCSEOpAqRHZWuRoZrBnR9Dxb
// SIG // +54fqFuM9OaHQAt025PPApw4G2yWSerss9TEOVJ7YJ9F
// SIG // 3QnkBGwbHIqREw+zUQtdEI9kAai6NiD8U9tS/3QufZz7
// SIG // DI2Pnw3pnwQOKRUOkwIDAQABo4IBgjCCAX4wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFLbqIlKYyBFhlR+UbIclG3Vb31x0MFQGA1UdEQRN
// SIG // MEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFu
// SIG // ZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIz
// SIG // MTUyMis1MDExNTcwHwYDVR0jBBgwFoAUSG5k5VAF04Kq
// SIG // Fzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBh
// SIG // BggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAM
// SIG // BgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCJ
// SIG // u41n3onudflWf5dguZipzkHZ0JlADjVYe784mJX5VJmr
// SIG // HvDbRbrhTzKYbcLbmx+rWTEZRhw5jw7QOL1+jNCMOAY6
// SIG // B0oP7JBaChHiAB5TpshNEQeN5k7jTr3cGtCUj1juXunt
// SIG // Q9Acop2puL6yuximi+NR3GMAYuW/DbxpQM+ber+NUEGH
// SIG // /HuQr19f+dbkCG+BtFoVXl+ojFbLNDHIletniochj1F5
// SIG // RpXdMXJSWVeJKKNbBuGa7ln+T1XpUMUNG+UEHKmU5W1Q
// SIG // W9HrKW6FWsYeQff6INGLQ9tFf3lvnvukVdJjljyvr/Om
// SIG // Qvl1aUlShMIxc1koeIbMkmqB3Q2ASKixX1wOnxh80FcN
// SIG // RtcfvlsSfMhQ9t8BTfaQlOHASTB4ru/9bKHTQsMN99iN
// SIG // j5FP9M/GC2LRLiAw2zAcakmpj8LIdzBu3pE+5ZXROaWF
// SIG // IGcglS35OoEbt1M06gQaTm/a2NSU5KBknAaJQgCR0ldX
// SIG // mTtwoFRWbcAX2hUzf9K2xShNjKZinJHvQPR3O/MU23yL
// SIG // hzwKPQIky08+hC8FJWgT8XGyAPr1J0f3rgj+zk84SB42
// SIG // 8Au95BCZDrrElk1cWp/P3KS32Q2fVUoTGE/vvv5avrc1
// SIG // +UQft1kjY4FTDUL8PwatVilcS755GJKVhjdFOGE7+H7I
// SIG // 6qUgCthUvGTHBguMTE49qjCCB3owggVioAMCAQICCmEO
// SIG // kNIAAAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBS
// SIG // b290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4X
// SIG // DTExMDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z
// SIG // b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJ
// SIG // KoZIhvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t
// SIG // 2G6qghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7d
// SIG // N2vGEtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55J
// SIG // nOloXtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJS
// SIG // JhIv56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64Dhk
// SIG // rG5kNXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ9
// SIG // 7/vjK1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+
// SIG // sYxd6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4
// SIG // ftKdgCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf
// SIG // 8NBSv4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOn
// SIG // qWbsYR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj
// SIG // 43BdD1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8
// SIG // GLhEfEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO
// SIG // 3+xbn6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4
// SIG // X7IvhNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXU
// SIG // pUMvdJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxG
// SIG // oGyY0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3
// SIG // FQEEAwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVt
// SIG // qMp1ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEw
// SIG // CwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYD
// SIG // VR0jBBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYD
// SIG // VR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2Vy
// SIG // QXV0MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcB
// SIG // AQRSMFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGU
// SIG // MIGRBgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9j
// SIG // cy9wcmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIg
// SIG // HQBMAGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABh
// SIG // AHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOC
// SIG // AgEAZ/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQ
// SIG // wWVfLiw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZdd
// SIG // ZYSQfYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9
// SIG // G6XUtR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKK
// SIG // ELukqQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP
// SIG // 80Yr3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ
// SIG // 1h/DMhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgy
// SIG // cScaf7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6C
// SIG // PxNNZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2
// SIG // l4bf2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1
// SIG // HxS+YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9
// SIG // WfOXpQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpI
// SIG // lR+r+0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h1
// SIG // 5q/6/IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BX
// SIG // IqF4ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3Zb
// SIG // CoBIa/15n8G9bW1qyVJzEw16UM0xghoKMIIaBgIBATCB
// SIG // lTB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9N
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMz
// SIG // AAADgxRicQvfm6Y9AAAAAAODMA0GCWCGSAFlAwQCAQUA
// SIG // oIGuMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwG
// SIG // CisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqG
// SIG // SIb3DQEJBDEiBCATeZn9FDj7ZR9mtWnoplatO8xG166G
// SIG // NT2iaOKy5fon4zBCBgorBgEEAYI3AgEMMTQwMqAUgBIA
// SIG // TQBpAGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAHGf
// SIG // XO6Gs/b+G7IrnjvDVncfIGx/4UeoRZu7D4ks1fpVt8fs
// SIG // UzBQsgrnNkOvakavYjJPunb8LodL0QpzlKuUB/lUht5j
// SIG // xvIBl1QvfS6svbw5GGoAajHrWvqhNWaIogeGCgMHi1MW
// SIG // afIwm48LCyEKGd+Rg7zKVMkODNpx9GATfI65zRDWR84E
// SIG // ff/8lWJlMKNoi1jOATLyvi8/iql7yD58hjQ0nhfPKpsV
// SIG // PLSG8HSKKLQGJBcH4AUL9rxNSsIRx3HSjWr3I7Oiicd8
// SIG // +vMcGBNTZGtFKSVUPgPRiMIY94CbV8ue/XR2+JLGaMXg
// SIG // LLyS2ADddVVPjyxl0r12iTd0fi5R/CmhgheUMIIXkAYK
// SIG // KwYBBAGCNwMDATGCF4Awghd8BgkqhkiG9w0BBwKgghdt
// SIG // MIIXaQIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBUgYLKoZI
// SIG // hvcNAQkQAQSgggFBBIIBPTCCATkCAQEGCisGAQQBhFkK
// SIG // AwEwMTANBglghkgBZQMEAgEFAAQgeky3Y66fGQ8ZURA9
// SIG // bDzaa9nHk8aeOka9vj7d1gh1/VUCBmUoeXk5jBgTMjAy
// SIG // MzExMTUwMDEzMTcuMzg0WjAEgAIB9KCB0aSBzjCByzEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9z
// SIG // b2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEnMCUGA1UECxMe
// SIG // blNoaWVsZCBUU1MgRVNOOjhEMDAtMDVFMC1EOTQ3MSUw
// SIG // IwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2
// SIG // aWNloIIR6jCCByAwggUIoAMCAQICEzMAAAHNVQcq58rB
// SIG // mR0AAQAAAc0wDQYJKoZIhvcNAQELBQAwfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwHhcNMjMwNTI1MTkxMjA1
// SIG // WhcNMjQwMjAxMTkxMjA1WjCByzELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2Eg
// SIG // T3BlcmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1Mg
// SIG // RVNOOjhEMDAtMDVFMC1EOTQ3MSUwIwYDVQQDExxNaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkq
// SIG // hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0zgi1Uto5hFj
// SIG // qsc8oFu7OmC5ptvaY7wPgoelS+x5Uy/MlLd2dCiM02tj
// SIG // vx76/2ic2tahFZJauzT4jq6QQCM+uey1ccBHOAcSYr+g
// SIG // evGvA0IhelgBRTWit1h4u038UZ6i6IYDc+72T8pWUF+/
// SIG // ea/DEL1+ersI4/0eIV50ezWuC5buJlrJpf8KelSagrsW
// SIG // Z7vY1+KmlMZ4HK3xU+/s75VwpcC2odp9Hhip2tXTozoM
// SIG // itNI2Kub7c6+TWfqlcamsPQ5hLI/b36mJH0Ga8tiTucJ
// SIG // oF1+/TsezyzFH6k+PvMOSZHUjKF99m9Q+nAylkVL+ao4
// SIG // mIeKP2vXoRPygJFFpUj22w0f2hpzySwBj8tqgPe2AgXn
// SIG // iCY0SlEYHT5YROTuOpDo7vJ2CZyL8W7gtkKdo8cHOqw/
// SIG // TOj73PLGSHENdGCmVWCrPeGD0pZIcF8LbW0WPo2Z0Ig5
// SIG // tmRYx/Ej3tSOhEXH3mF9cwmIxM3cFnJvnxWZpSQPR0Fu
// SIG // 2SQJjhAjjbXytvBERBBOcs6vk90DFT4YhHxIYHGLIdA3
// SIG // qFomBrA4ihLkvhRJTDMk+OevlNmUWtoW0UPe0HG72gHe
// SIG // jlUC6d00KjRLtHrOWatMINggA3/kCkEf2OvnxoJPaiTS
// SIG // VtzLu+9SrYbj5TXyrLNAdc4dMWtcjeKgt86BPVKuk/K+
// SIG // xt/zrUhZrOMCAwEAAaOCAUkwggFFMB0GA1UdDgQWBBSh
// SIG // k/mmNmmawQCVSGYeZInKJHzVmjAfBgNVHSMEGDAWgBSf
// SIG // pxVdAF5iXYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSg
// SIG // UqBQhk5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // b3BzL2NybC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIw
// SIG // UENBJTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBe
// SIG // MFwGCCsGAQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRp
// SIG // bWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNV
// SIG // HRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMI
// SIG // MA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOC
// SIG // AgEAUqht6aSiFPovxDMMLaLaMZyn8NEl/909ehD248LA
// SIG // CJljmeZywG2raKZfMxWPONYG+Xoi9Y/NYeA4hIl7fgSY
// SIG // ByANiyISoUrHHe/aDG6+t9Q4hKn/V+S2Ud1dyiGLLVNy
// SIG // u3+Q5O7W6G7h7vun2DP4DseOLIEVO2EPmE2B77/JOJjJ
// SIG // 7omoSUZVPxdr2r3B1OboV4tO/CuJ0kQD51sl+4FYuolT
// SIG // AQVBePNt6Dxc5xHB7qe1TRkbRntcb55THdQrssXLTPHf
// SIG // 6Ksk7McJSQDORf5Q8ZxFqEswJGndZ1r5GgHjFe/t/SKV
// SIG // 4bn/Rt8W33yosgZ493EHogOEsUsAnZ8dNEQZV0uq/bRg
// SIG // 2v6PUUtNRTgAcypD+QgQ6ZuMKSnSFO+CrQR9rBOUGGJ+
// SIG // 5YmFma9n/1PoIU5nThDj5FxHF/NR+HUSVNvE4/4FGXcC
// SIG // /NcWofCp/nAe7zPx7N/yfLRdd2Tz/vDbV977uDa3IRwy
// SIG // WIIzovtSbkn/uI6Rf6RBD16fQLrIs5kppASuIlU+zcFb
// SIG // UZ0tbbPKgBhxj4Nhz2uG9rvZnrnlKKjVbTIW7piNcvnf
// SIG // WZE4TVwV89miLU9gvfQzN096mKgFJrylK8lUqTC1abHu
// SIG // I3uVjelVZQgxSlhUR9tNmMRFVrGeW2jfQmqgmwktBGu7
// SIG // PThS2hDOXzZ/ZubOvZQ/3pHFtqkwggdxMIIFWaADAgEC
// SIG // AhMzAAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEB
// SIG // CwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQD
// SIG // EylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRo
// SIG // b3JpdHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5
// SIG // MzAxODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKC
// SIG // AgEA5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51
// SIG // yMo1V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64
// SIG // NmeFRiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1
// SIG // hlDcwUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmv
// SIG // Haus9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoP
// SIG // z130/o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1w
// SIG // jjHINSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56
// SIG // KTesy+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7
// SIG // vnGpF1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2l
// SIG // IH1+/NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUD
// SIG // o9Fzpk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhz
// SIG // PUNOwTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtco
// SIG // dgLiMxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGU
// SIG // lNi5UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsl
// SIG // uq9QBXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W2
// SIG // 9R6HXtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZ
// SIG // MBIGCSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUC
// SIG // BBYEFCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQW
// SIG // BBSfpxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBT
// SIG // MFEGDCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNo
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0Rv
// SIG // Y3MvUmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYB
// SIG // BQUHAwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEw
// SIG // CwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYD
// SIG // VR0jBBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYD
// SIG // VR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2Vy
// SIG // QXV0XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4w
// SIG // TDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAx
// SIG // MC0wNi0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1V
// SIG // ffwqreEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9
// SIG // MTO1OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulm
// SIG // ZzpTTd2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pv
// SIG // vinLbtg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbz
// SIG // aN9l9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3
// SIG // +SmJw7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsId
// SIG // w2FzLixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5m
// SIG // O0+7hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ
// SIG // /gpY3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9
// SIG // swFXSVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu
// SIG // +yFUa2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyh
// SIG // YWxz/gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFR
// SIG // hLy/AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0
// SIG // +CQ1ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAx
// SIG // M328y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQ
// SIG // wXEGahC0HVUzWLOhcGbyoYIDTTCCAjUCAQEwgfmhgdGk
// SIG // gc4wgcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsT
// SIG // HE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJzAl
// SIG // BgNVBAsTHm5TaGllbGQgVFNTIEVTTjo4RDAwLTA1RTAt
// SIG // RDk0NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgU2VydmljZaIjCgEBMAcGBSsOAwIaAxUAaKn3ptii
// SIG // s7kWYyEmInxqJVTncgSggYMwgYCkfjB8MQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
// SIG // ZS1TdGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQsFAAIF
// SIG // AOj+d2cwIhgPMjAyMzExMTQyMjQ3MDNaGA8yMDIzMTEx
// SIG // NTIyNDcwM1owdDA6BgorBgEEAYRZCgQBMSwwKjAKAgUA
// SIG // 6P53ZwIBADAHAgEAAgINzjAHAgEAAgITZDAKAgUA6P/I
// SIG // 5wIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZ
// SIG // CgMCoAowCAIBAAIDB6EgoQowCAIBAAIDAYagMA0GCSqG
// SIG // SIb3DQEBCwUAA4IBAQCCAUVID10UydkwRsAjILKQWm1t
// SIG // rZjYDPvsrDvIkj7pFVQCqyO28KaVzVpUsK3BR20R9If5
// SIG // cn59GBrNRibGrj9yZe80pCMgJdR3ko41CbNwkJOsjQJc
// SIG // Ki7lVTRKKBOfP2ojKwddXyPHp5KU169Nx+Dt8dXhbS5S
// SIG // R5G9VxjveqQPLUlJN75d/zasL0tRlAs2CWqODSgqopU0
// SIG // 7mSgFjsbW/B2pmMdAuCK8ZmHX0W841w7jp7E+3h16M/r
// SIG // dqEmPiD6IbRaV7ld2YkIz1FM2D1o3BFSL71uTCN7LJJE
// SIG // 2jJPApdxejB8xxRWctTdSmwWUaHT+aNotzCJSXHws+/L
// SIG // no2ejPSHMYIEDTCCBAkCAQEwgZMwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTACEzMAAAHNVQcq58rBmR0AAQAA
// SIG // Ac0wDQYJYIZIAWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJ
// SIG // AzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQg
// SIG // r8LjhLv6DsCqccYpec/rvr5vy2CshdNlImrVVDEVPN8w
// SIG // gfoGCyqGSIb3DQEJEAIvMYHqMIHnMIHkMIG9BCDiZqX4
// SIG // rVa9T2RoL0xHU6UrVHOhjYeyza6EASsKVEaZCjCBmDCB
// SIG // gKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAABzVUHKufKwZkdAAEAAAHNMCIEIGU7Gaz3q/DEAX8/
// SIG // CJGeVmWT1/+l1NSiS6PpzyQwfjESMA0GCSqGSIb3DQEB
// SIG // CwUABIICALA8TFdwdSVcAPiWifoRbV6l0Iadv4IVvQ3o
// SIG // lY3njJe9nRFVYKo1ez9mFr1Rf6bw/2KNKr+oHgvLn+xr
// SIG // AhIt8/cr913IwCKL+tTP+lLsxxtqRUN0UTnTeY4Pv8Yd
// SIG // BEXIkB8kEXj7bWNleyFtZCXw8yfIjfLpWzp9XsV0knji
// SIG // khUV1FcX1s8i9E5bnryRUpVMvCMcYvrlt7wgNgahVYJL
// SIG // 3hcIWHE9vVuGpBGS3AgRXgiCMPiYxqNdubtPtwD1aZzH
// SIG // WFQr3ME1vO6O7cFGQTxokpsJBGSnYJKlKAD9SJxFhFid
// SIG // D4YC9J5FOcj9DS1Y3I1I29DNhR8MPkD32DyjRvDCGXOc
// SIG // KY9l/uMxjoXZtxbh0AbSm4MtYEAydcD6LFZH+aWKukmr
// SIG // bufpgre+xsbynVZTIix3UBUKoTfQ1q9JrpAF9IFlj0tf
// SIG // ReAB19vHmrlFpxEJsawyTd8tueuL76a22pqdOf/PpxCJ
// SIG // H/aRFpwjHDLgPAKpzjEDV85DPCBqIOsZnzHwsL90AiL1
// SIG // LzTcc83gDoNgtI6AHZWKKKkOY/ZJ/hmCmOoTMOtzDPd/
// SIG // xlpKKWgtLDu0Xi0abip3DsGwxAGjIDEUZuriwEvpAfVv
// SIG // vlDJlQbtzV6AZMR5812b1rjIxLWjBqSubKo3I1GAlpss
// SIG // kYxTUCFoWOVfLPpjQLxzN1bwJU2LAoFR
// SIG // End signature block
