<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.TestPlatform.CrossPlatEngine</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle">
            <summary>
            Handle to the framework which is passed to the test executors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle._testExecutionContext">
            <summary>
            Context in which the current run is executing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle._testRunEventsHandler">
            <summary>
            DebugLauncher for launching additional adapter processes under debugger
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle._isDisposed">
            <summary>
            Specifies whether the handle is disposed or not
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ITestRunCache,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle"/> class.
            </summary>
            <param name="testCaseEventsHandler"> The test case level events handler. </param>
            <param name="testRunCache"> The test run cache. </param>
            <param name="testExecutionContext"> The test execution context. </param>
            <param name="testRunEventsHandler">TestRun Events Handler</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle.EnableShutdownAfterTestRun">
            <summary>
            Give a hint to the execution framework to enable the shutdown of execution process after the test run is complete. This should be used only in out of process test runs when IRunContext.KeepAlive is true
            and should be used only when absolutely required as using it degrades the performance of the subsequent run.
            It throws InvalidOperationException when it is attempted to be enabled when keepAlive is false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle.LaunchProcessWithDebuggerAttached(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Launch the specified process with the debugger attached.
            </summary>
            <param name="filePath">File path to the exe to launch.</param>
            <param name="workingDirectory">Working directory that process should use.</param>
            <param name="arguments">Command line arguments the process should be launched with.</param>
            <param name="environmentVariables">Environment variables to be set in target process</param>
            <returns>Process ID of the started process.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle.AttachDebuggerToProcess(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext">
            <summary>
            Provides user specified runSettings and framework provided context of the run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.KeepAlive">
            <summary>
            Gets a value indicating whether the execution process should be kept alive after the run is finished.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.InIsolation">
            <summary>
            Gets a value indicating whether the discovery or execution is happening in-process or out-of-process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.IsDataCollectionEnabled">
            <summary>
            Gets a value indicating whether data collection is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.IsBeingDebugged">
            <summary>
            Gets a value indicating whether the test is being debugged.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.TestRunDirectory">
            <summary>
            Gets the directory which should be used for storing result files/deployment files etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.SolutionDirectory">
            <summary>
            Gets the directory for Solution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder">
            <summary>
            The test execution recorder used for recording test results and test messages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder._testCaseInProgressMap">
            <summary>
            Contains TestCase Ids for test cases that are in progress
            Start has been recorded but End has not yet been recorded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ITestRunCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder"/> class.
            </summary>
            <param name="testCaseEventsHandler"> The test Case Events Handler. </param>
            <param name="testRunCache"> The test run cache.  </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder.Attachments">
            <summary>
            Gets the attachments received from adapters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder.RecordStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Notify the framework about starting of the test case.
            Framework sends this event to data collectors enabled in the run. If no data collector is enabled, then the event is ignored.
            </summary>
            <param name="testCase">test case which will be started.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder.RecordResult(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Notify the framework about the test result.
            </summary>
            <param name="testResult">Test Result to be sent to the framework.</param>
            <exception cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException">Exception thrown by the framework when an executor attempts to send
            test result to the framework when the test(s) is canceled. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder.RecordEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Notify the framework about completion of the test case.
            Framework sends this event to data collectors enabled in the run. If no data collector is enabled, then the event is ignored.
            </summary>
            <param name="testCase">test case which has completed.</param>
            <param name="outcome">outcome of the test case.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder.SendTestCaseEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Send TestCaseEnd event for given testCase if not sent already
            </summary>
            <param name="testCase"></param>
            <param name="outcome"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder.RecordAttachments(System.Collections.Generic.IList{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet})">
            <summary>
            Notify the framework about run level attachments.
            </summary>
            <param name="attachments"> The attachment sets. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.DataCollectorAttachmentProcessorAppDomain">
             <summary>
             This class is a proxy implementation of IDataCollectorAttachmentProcessor.
             We cannot load extension directly inside the runner in design mode because we're locking files
             and in some scenario build or publish can fail.
            
             DataCollectorAttachmentProcessorAppDomain creates DataCollectorAttachmentProcessorRemoteWrapper in a
             custom domain.
            
             IDataCollectorAttachmentProcessor needs to communicate back some information like, report percentage state
             of the processing, send messages through the IMessageLogger etc...so we have a full duplex communication.
            
             For this reason we use an anonymous pipe to "listen" to the events from the real implementation and we forward
             the information to the caller.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.DataCollectorAttachmentProcessorRemoteWrapper">
            <summary>
            This class is the "container" for the real IDataCollectorAttachmentProcessor implementation.
            It tries to load the extension and it receives calls from the DataCollectorAttachmentProcessorAppDomain that
            acts as a proxy for the main AppDomain(the runner one).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager">
            <summary>
            Orchestrates test run localAttachments processing operations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager.#ctor(Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IDataCollectorAttachmentsProcessorsFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager.ProcessTestRunAttachmentsAsync(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunAttachmentsProcessingEventsHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager.ProcessTestRunAttachmentsAsync(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DiscoveryCriteriaExtensions.UpdateTestSources(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Update the AdapterSourceMap
            </summary>
            <param name="sources">actual test sources</param>
            <param name="adapterSourceMap">Adapter Source Map</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.ITestHostManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager"/> class.
            </summary>
            <param name="testHostManager">
            The test Host Manager.
            </param>
            <param name="testHostManagerFactory">
            Manager factory
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager.Initialize(System.Boolean)">
            <summary>
            Initializes test discovery.
            <param name="skipDefaultAdapters">Skip default adapters flag.</param>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager.DiscoverTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Discovers tests
            </summary>
            <param name="discoveryCriteria">Settings, parameters for the discovery request</param>
            <param name="eventHandler">EventHandler for handling discovery events from Engine</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager.Close">
            <summary>
            Closes the current test operation.
            This function is of no use in this context as we are not creating any testhost
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager.Abort">
            <summary>
            Aborts the test operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyExecutionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.ITestHostManagerFactory)">
            <summary>
            Initializes a new instance of the <see cref="!:InProcessProxyexecutionManager"/> class.
            </summary>
            <param name="testHostManager">
            The test Host Manager.
            </param>
            <param name="testHostManagerFactory">
            Manager factory
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyExecutionManager.Initialize(System.Boolean)">
            <summary>
            Initialize adapters.
            <param name="skipDefaultAdapters">Skip default adapters flag.</param>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyExecutionManager.StartTestRun(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyExecutionManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Aborts the test operation.
            </summary>
            <param name="eventHandler"> EventHandler for handling execution events from Engine. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyExecutionManager.Cancel(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Cancels the test run.
            </summary>
            <param name="eventHandler"> EventHandler for handling execution events from Engine. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyExecutionManager.Close">
            <summary>
            Closes the current test operation.
            This function is of no use in this context as we are not creating any testhost
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.LoggerNameValueConfigurationManager">
            <summary>
            Utility class that loggers can use to read name/value configuration information from the XML element sent to them
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.LoggerNameValueConfigurationManager.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.LoggerNameValueConfigurationManager"/> class.
            Loads the configuration name/value information from the provided XML element into a dictionary
            </summary>
            <param name="configurationElement">
            XML element containing the configuration
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator">
            <summary>
            DiscoveryDataAggregator aggregates discovery data from multiple sources running in parallel or in series.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator._isMessageSent">
            <summary>
            Atomic boolean used to detect if message was already sent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.IsAborted">
            <summary>
            Set to initialized if any of the request is aborted
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.TotalTests">
            <summary>
            Aggregate total test count
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.DiscoveredExtensions">
            <summary>
            A collection of aggregated discovered extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.GetMetrics">
            <summary>
            Returns the Aggregated Metrics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.Aggregate(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs)">
            <summary>
            Aggregate discovery data
            Must be thread-safe as this is expected to be called by parallel managers
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.AggregateMetrics(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Aggregates the metrics from Test Host Process.
            </summary>
            <param name="metrics"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.TryAggregateIsMessageSent">
            <summary>
            Determines if we should send the message to the client.
            </summary>
            <remarks>
            Handles race conditions as this aggregator is shared across various event handler for the
            same discovery request but we want to notify only once.
            </remarks>
            <returns><see langword="true"/> if first to send the message; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator.MarkSourcesBasedOnDiscoveredTestCases(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Updates the discovery status of the source based on the discovered test cases.
            </summary>
            <param name="previousSource">The last discovered sources or null.</param>
            <param name="testCases">The discovered sources.</param>
            <returns>The last discovered source or null.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelDiscoveryEventsHandler">
            <summary>
            ParallelDiscoveryEventsHandler for handling the discovery events in case of parallel discovery
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelDiscoveryEventsHandler.HandleDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelDiscoveryEventsHandler.HandleRawMessage(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelDiscoveryEventsHandler.HandleDiscoveredTests(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelDiscoveryEventsHandler.HandleLogMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelDiscoveryEventsHandler.ConvertToRawMessageAndSend(System.String,System.Object)">
            <summary>
            To send message to IDE output window use HandleRawMessage
            </summary>
            <param name="messageType"></param>
            <param name="payload"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager">
            <summary>
            ParallelProxyDiscoveryManager that manages parallel discovery
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager._discoveryStatusLockObject">
            <summary>
            LockObject to update discovery status in parallel
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.Initialize(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.DiscoverTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.Abort">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.Close">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.HandlePartialDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager,System.Int64,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.InitializeDiscoverTestsOnConcurrentManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria)">
            <summary>
            Triggers the discovery for the next data object on the concurrent discoverer
            Each concurrent discoverer calls this method, once its completed working on previous data
            </summary>
            <param name="ProxyDiscoveryManager">Proxy discovery manager instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager.DiscoverTestsOnConcurrentManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,System.Boolean,System.Threading.Tasks.Task)">
            <summary>
            Triggers the discovery for the next data object on the concurrent discoverer
            Each concurrent discoverer calls this method, once its completed working on previous data
            </summary>
            <param name="ProxyDiscoveryManager">Proxy discovery manager instance.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyExecutionManager">
            <summary>
            ParallelProxyExecutionManager that manages parallel execution
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyExecutionManager.IsInitialized">
            <inheritdoc/>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyExecutionManager._executionStatusLockObject">
            <summary>
            LockObject to update execution status in parallel
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyExecutionManager.HandlePartialRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyExecutionManager.SplitToWorkloads(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo})">
            <summary>
             Split the incoming work into smaller workloads that we can run on different testhosts.
             Each workload is associated with a type of provider that can run it.
            </summary>
            <param name="testRunCriteria"></param>
            <param name="sourceToTestHostProviderMap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyExecutionManager.StartTestRunOnConcurrentManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,System.Boolean,System.Threading.Tasks.Task)">
            <summary>
            Triggers the execution for the next data object on the concurrent executor
            Each concurrent executor calls this method, once its completed working on previous data
            </summary>
            <param name="proxyExecutionManager">Proxy execution manager instance.</param>
            <returns>True, if execution triggered</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ProviderSpecificWorkload`1">
            <summary>
            A workload with a specification of a provider that can run that workload. The workload is a list of sources,
            or a list of testcases. Provider is a testhost manager, that is capable of running this workload, so
            we end up running .NET sources on .NET testhost, and .NET Framework sources on .NET Framework testhost.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunDataAggregator">
            <summary>
            ParallelRunDataAggregator aggregates test run data from execution managers running in parallel
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunDataAggregator.DiscoveredExtensions">
            <summary>
            A collection of aggregated discovered extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunDataAggregator.GetAggregatedRunDataMetrics">
            <summary>
            Returns the Aggregated Run Data Metrics
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunDataAggregator.Aggregate(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics,System.Collections.Generic.ICollection{System.String},System.Exception,System.TimeSpan,System.Boolean,System.Boolean,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}})">
            <summary>
            Aggregate Run Data
            Must be thread-safe as this is expected to be called by parallel managers
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunDataAggregator.AggregateRunDataMetrics(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Aggregates Run Data Metrics from each Test Host Process
            </summary>
            <param name="metrics"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunEventsHandler">
            <summary>
            ParallelRunEventsHandler for handling the run events in case of parallel execution
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunEventsHandler.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Handles the Run Complete event from a parallel proxy manager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunEventsHandler.AttachDebuggerToProcess(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ParallelOperationManager`3">
            <summary>
            Manages work that is done on multiple managers (testhosts) in parallel such as parallel discovery or parallel run.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ParallelOperationManager`3._eventHandler">
            <summary>
            Default number of Processes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ParallelOperationManager`3.#ctor(System.Func{Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo,`2,`0},System.Int32)">
            <summary>
            Creates new instance of ParallelOperationManager.
            </summary>
            <param name="createNewManager">Creates a new manager that is responsible for running a single part of the overall workload.
            A manager is typically a testhost, and the part of workload is discovering or running a single test dll.</param>
            <param name="parallelLevel">Determines the maximum amount of parallel managers that can be active at the same time.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager">
            <summary>
            Orchestrates discovery operations for the engine communicating with the client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,System.Func{System.String,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager})">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager"/> class.
             </summary>
            
             <param name="testSessionInfo">The test session info.</param>
             <param name="proxyOperationManagerCreator">The proxy operation manager creator.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager"/> class.
             </summary>
            
             <param name="requestData">
             The request data for providing discovery services and data.
             </param>
             <param name="testRequestSender">Test request sender instance.</param>
             <param name="testHostManager">Test host manager instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataSerializer,Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager"/> class.
             </summary>
            
             <remarks>
             Constructor with dependency injection. Used for unit testing.
             </remarks>
            
             <param name="requestData">
             The request data for providing discovery services and data.
             </param>
             <param name="requestSender">The request sender.</param>
             <param name="testHostManager">Test host manager instance.</param>
             <param name="dataSerializer">The data serializer.</param>
             <param name="fileHelper">The file helper.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.InitializeDiscovery(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.Abort">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.Close">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleDiscoveredTests(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleRawMessage(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleLogMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager">
            <summary>
            Orchestrates test execution operations for the engine communicating with the client.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.IsInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.CancellationTokenSource">
            <summary>
            Gets or sets the cancellation token source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,System.Func{System.String,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager},System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager"/> class.
             </summary>
            
             <param name="testSessionInfo">The test session info.</param>
             <param name="proxyOperationManagerCreator">The proxy operation manager creator.</param>
             <param name="debugEnabledForTestSession">
             A flag indicating if debugging should be enabled or not.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager"/> class.
             </summary>
            
             <param name="requestData">
             The request data for providing services and data for run.
             </param>
             <param name="requestSender">Test request sender instance.</param>
             <param name="testHostManager">Test host manager for this proxy.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataSerializer,Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager"/> class.
             </summary>
            
             <remarks>
             Constructor with dependency injection. Used for unit testing.
             </remarks>
            
             <param name="requestData">The request data for common services and data for run.</param>
             <param name="requestSender">Request sender instance.</param>
             <param name="testHostManager">Test host manager instance.</param>
             <param name="dataSerializer">Data serializer instance.</param>
             <param name="fileHelper">File helper instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.Initialize(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.StartTestRun(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.Cancel(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.Close">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.LaunchProcessWithDebuggerAttached(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.AttachDebuggerToProcess(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.HandleTestRunStatsChange(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.HandleRawMessage(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.HandleLogMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.SetupChannel(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             Ensures that the engine is ready for test operations. Usually includes starting up the
             test host process.
             </summary>
            
             <param name="sources">List of test sources.</param>
             <param name="runSettings">Run settings to be used.</param>
            
             <returns>
             Returns true if the communication is established b/w runner and host, false otherwise.
             </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection">
            <summary>
            The proxy execution manager with data collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection"/> class.
            </summary>
            <param name="requestSender">
            Test request sender instance.
            </param>
            <param name="testHostManager">
            Test host manager for this operation.
            </param>
            <param name="proxyDataCollectionManager">
            The proxy Data Collection Manager.
            </param>
            <param name="requestData">
            The request data for providing execution services and data.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection.DataCollectionRunEventsHandler">
            <summary>
            Gets the data collection run events handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection.ProxyDataCollectionManager">
            <summary>
            Gets the proxy data collection manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection.CancellationToken">
            <summary>
            Gets the cancellation token for execution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection.Initialize(System.Boolean)">
            <summary>
            Ensure that the Execution component of engine is ready for execution usually by loading extensions.
            <param name="skipDefaultAdapters">Skip default adapters flag.</param>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection.StartTestRun(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Starts the test run
            </summary>
            <param name="testRunCriteria"> The settings/options for the test run. </param>
            <param name="eventHandler"> EventHandler for handling execution events from Engine. </param>
            <returns> The process id of the runner executing tests. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler">
            <summary>
            Handles Log and raw messages and stores them in list. Messages in the list will be logged after test execution begins.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler.Messages">
            <summary>
            Gets the cached messages.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler.RawMessages">
            <summary>
            Gets the cached raw messages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler.HandleLogMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler.HandleRawMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager">
            <summary>
            Base class for any operations that the client needs to drive through the engine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager"/> class.
             </summary>
            
             <param name="requestData">Request data instance.</param>
             <param name="requestSender">Request sender instance.</param>
             <param name="testHostManager">Test host manager instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IBaseProxy)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager"/> class.
             </summary>
            
             <param name="requestData">Request data instance.</param>
             <param name="requestSender">Request sender instance.</param>
             <param name="testHostManager">Test host manager instance.</param>
             <param name="baseProxy">The base proxy.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RequestData">
            <summary>
            Gets or sets the request data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RequestSender">
            <summary>
            Gets or sets the server for communication.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.TestHostManager">
            <summary>
            Gets or sets the test host manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.Id">
            <summary>
            Gets the proxy operation manager id for proxy test session manager internal organization.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.IsTestSessionEnabled">
            <summary>
            Gets or sets a value indicating whether the current proxy operation manager is part of a
            test session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.CancellationTokenSource">
            <summary>
            Gets or sets the cancellation token source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.Initialize(System.Boolean)">
             <summary>
             Initializes the proxy.
             </summary>
            
             <param name="skipDefaultAdapters">
             Flag indicating if we should skip the default adapters initialization.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
             <summary>
             Ensures that the engine is ready for test operations. Usually includes starting up the
             test host process.
             </summary>
            
             <param name="sources">List of test sources.</param>
             <param name="runSettings">Run settings to be used.</param>
             <param name="eventHandler">The events handler.</param>
            
             <returns>
             Returns true if the communication is established b/w runner and host, false otherwise.
             </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             Ensures that the engine is ready for test operations. Usually includes starting up the
             test host process.
             </summary>
            
             <param name="sources">List of test sources.</param>
             <param name="runSettings">Run settings to be used.</param>
            
             <returns>
             Returns true if the communication is established b/w runner and host, false otherwise.
             </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.Close">
            <summary>
            Closes the channel and terminates the test host process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
             <summary>
             This method is exposed to enable derived classes to modify
             <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo"/>. For example, data collectors need additional
             environment variables to be passed.
             </summary>
            
             <param name="testProcessStartInfo">The test process start info.</param>
            
             <returns>
             The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo"/>.
             </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RemoveNodesFromRunsettingsIfRequired(System.String,System.Action{Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String})">
             <summary>
             This function will remove the unknown run settings nodes from the run settings strings.
             This is necessary because older test hosts may throw exceptions when encountering
             unknown nodes.
             </summary>
            
             <param name="runsettingsXml">Run settings string.</param>
            
             <returns>The run settings after removing non-required nodes.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection">
            <summary>
            The proxy operation manager with data collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender,Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection"/>
             class.
             </summary>
            
             <param name="requestData">The request data.</param>
             <param name="requestSender">The request sender.</param>
             <param name="testHostManager">The test host manager.</param>
             <param name="proxyDataCollectionManager">The data collection proxy.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.Initialize(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.SetupChannel(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.DataCollectionRunEventsHandler">
            <summary>
            Gets the data collection run events handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.ProxyDataCollectionManager">
            <summary>
            Gets the proxy data collection manager.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager">
            <summary>
            Responsible for managing logger extensions and broadcasting results
            and error/warning/informational messages to them.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._isDisposed">
            <summary>
            Keeps track if we are disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._initializedLoggers">
            <summary>
            Used to keep track of which loggers have been initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._testRunDirectory">
            <summary>
            Test run directory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._targetFramework">
            <summary>
            Target framework.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._treatNoTestsAsError">
            <summary>
            TreatNoTestsAsError value;
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._loggerEvents">
            <summary>
            Test Logger Events instance which will be passed to loggers when they are initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._messageLogger">
            <summary>
            Message logger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._requestData">
            <summary>
            Request data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._testLoggerExtensionManager">
            <summary>
            Logger extension manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager._assemblyLoadContext">
            <summary>
            AssemblyLoadContext for current platform
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents)">
            <summary>
            Test logger manager.
            </summary>
            <param name="requestData">Request Data for Providing Common Services/Data for Discovery and Execution.</param>
            <param name="messageLogger">Message Logger.</param>
            <param name="loggerEvents">Logger events.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents,Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IAssemblyLoadContext)">
            <summary>
            Test logger manager.
            </summary>
            <param name="requestData"></param>
            <param name="messageLogger"></param>
            <param name="loggerEvents"></param>
            <param name="assemblyLoadContext"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.LoggersInitialized">
            <summary>
            Loggers initialized flag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.Initialize(System.String)">
            <summary>
            Initializes all the loggers passed by user
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleTestRunMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)">
            <summary>
            Handles test run message event.
            </summary>
            <param name="e">TestRunMessage event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleTestRunStatsChange(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs)">
            <summary>
            Handle test run stats change event.
            </summary>
            <param name="e">TestRunChanged event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleTestRunStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs)">
            <summary>
            Handles test run start event.
            </summary>
            <param name="e">TestRunStart event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs)">
            <summary>
            Handles test run complete.
            </summary>
            <param name="e">TestRunComplete event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleDiscoveryMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)">
            <summary>
            Handles discovery message event.
            </summary>
            <param name="e">TestRunMessage event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleDiscoveredTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveredTestsEventArgs)">
            <summary>
            Handle discovered tests.
            </summary>
            <param name="e">DiscoveredTests event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs)">
            <summary>
            Handles discovery complete event.
            </summary>
            <param name="e">DiscoveryComplete event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.HandleDiscoveryStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryStartEventArgs)">
            <summary>
            Handles discovery start event.
            </summary>
            <param name="e">DiscoveryStart event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.Dispose">
            <summary>
            Ensure that all pending messages are sent to the loggers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.InitializeLoggerByUri(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes logger with the specified URI and parameters.
            For ex. TfsPublisher takes parameters such as  Platform, Flavor etc.
            </summary>
            <param name="uri">URI of the logger to add.</param>
            <param name="parameters">Logger parameters.</param>
            <returns>Logger Initialized flag.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.TryGetUriFromFriendlyName(System.String,System.Uri@)">
            <summary>
            Tries to get uri of the logger corresponding to the friendly name. If no such logger exists return null.
            </summary>
            <param name="friendlyName">The friendly Name.</param>
            <param name="loggerUri">The logger Uri.</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.GetResultsDirectory(System.String)">
            <summary>
            Gets the test results directory.
            </summary>
            <param name="runSettings">Test run settings.</param>
            <returns>Test results directory</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.GetTargetFramework(System.String)">
            <summary>
            Gets the target framework of the test run.
            </summary>
            <param name="runSettings">Test run settings.</param>
            <returns>Target framework</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.GetTreatNoTestsAsError(System.String)">
            <summary>
            Get TreatNoTestsAsError value of the test run
            </summary>
            <param name="runSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.EnableLogging">
            <summary>
            Enables sending of events to the loggers which are registered.
            </summary>
            <remarks>
            By default events are disabled and will not be raised until this method is called.
            This is done because during logger initialization, errors could be sent and we do not
            want them broadcast out to the loggers until all loggers have been enabled.  Without this
            all loggers would not receive the errors which were sent prior to initialization finishing.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.Dispose(System.Boolean)">
            <summary>
            Ensure that all pending messages are sent to the loggers.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.GetParametersFromConfigurationElement(System.Xml.XmlElement)">
            <summary>
            Get parameters from configuration element.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.InitializeLoggerByType(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize logger with the specified type and parameters.
            </summary>
            <param name="assemblyQualifiedName">Assembly qualified name.</param>
            <param name="codeBase">Code base.</param>
            <param name="parameters">Logger parameters.</param>
            <returns>Logger Initialized flag.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager.UpdateLoggerParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Populates user supplied and default logger parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRunCriteriaExtensions.UpdateTestSources(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Update the AdapterSourceMap
            </summary>
            <param name="sources">actual test sources</param>
            <param name="adapterSourceMap">Adapter Source Map</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Constants">
            <summary>
            The set of constants used throughout this project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher">
            <summary>
            Abstract DataCollection Launcher provides functionality to handle process launch and exit events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher.#ctor(Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher"/> class.
            </summary>
            <param name="processHelper">
            The process helper.
            </param>
            <param name="messageLogger">
            The message logger.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher.DataCollectorProcessId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher.ExitCallBack">
            <summary>
            Gets callback on process exit
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher.ErrorReceivedCallback">
            <summary>
            Gets callback to read from process error stream
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher.LaunchDataCollector(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            The launch data collector.
            </summary>
            <param name="environmentVariables">
            The environment variables.
            </param>
            <param name="commandLineArguments">
            The command line arguments.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncherFactory">
            <summary>
            Factory for creating DataCollectionLauncher
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncherFactory.GetDataCollectorLauncher(Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper,System.String)">
            <summary>
            The get data collector launcher.
            </summary>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectionLauncher"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters">
            <summary>
            The data collection parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.#ctor(System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters"/> class.
            </summary>
            <param name="areTestCaseLevelEventsRequired">
            The are test case level events required.
            </param>
            <param name="environmentVariables">
            The environment variables.
            </param>
            <param name="dataCollectionEventsPort">
            The data Collection Events Port.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.AreTestCaseLevelEventsRequired">
            <summary>
            Gets a value indicating whether any of the enabled data collectors
            registered for test case level events
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.EnvironmentVariables">
            <summary>
            Gets BeforeTestRunStart Call on the DataCollectors can yield/return a set of environment variables
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.DataCollectionEventsPort">
            <summary>
            Gets the data collection events port.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.CreateDefaultParameterInstance">
            <summary>
            The create default parameter instance.
            </summary>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult">
            <summary>
            Information returned after data collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult.Attachments">
            <summary>
            Get list of attachments
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult.InvokedDataCollectors">
            <summary>
            Get the list of the invoked data collectors.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler">
            <summary>
            Handles DataCollection attachments by calling DataCollection Process on Test Run Complete.
            Existing functionality of ITestRunEventsHandler is decorated with additional call to Data Collection Process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler"/> class.
            </summary>
            <param name="baseTestRunEventsHandler">
            The base test run events handler.
            </param>
            <param name="proxyDataCollectionManager">
            The proxy Data Collection Manager.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataSerializer,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler"/> class.
            </summary>
            <param name="baseTestRunEventsHandler">
            The base test run events handler.
            </param>
            <param name="proxyDataCollectionManager">
            The proxy Data Collection Manager.
            </param>
            <param name="dataSerializer">
            The data Serializer.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.HandleLogMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <summary>
            The handle log message.
            </summary>
            <param name="level">
            The level.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.HandleRawMessage(System.String)">
            <summary>
            The handle raw message.
            </summary>
            <param name="rawMessage">
            The raw message.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <summary>
            The handle test run complete.
            </summary>
            <param name="testRunCompleteArgs">
            The test run complete args.
            </param>
            <param name="lastChunkArgs">
            The last chunk args.
            </param>
            <param name="runContextAttachments">
            The run context attachments.
            </param>
            <param name="executorUris">
            The executor uris.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.HandleTestRunStatsChange(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs)">
            <summary>
            The handle test run stats change.
            </summary>
            <param name="testRunChangedArgs">
            The test run changed args.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.LaunchProcessWithDebuggerAttached(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <summary>
            Launches a process with a given process info under debugger
            Adapter get to call into this to launch any additional processes under debugger
            </summary>
            <param name="testProcessStartInfo">Process start info</param>
            <returns>ProcessId of the launched process</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.AttachDebuggerToProcess(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler.GetCombinedAttachmentSets(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet})">
            <summary>
            The get combined attachment sets.
            </summary>
            <param name="originalAttachmentSets">
            The run attachments.
            </param>
            <param name="newAttachments">
            The run context attachments.
            </param>
            <returns>
            The <see cref="!:Collection"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DefaultDataCollectionLauncher">
            <summary>
            The datacollection launcher.
            This works for Desktop local scenarios
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DefaultDataCollectionLauncher.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DefaultDataCollectionLauncher.#ctor(Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DefaultDataCollectionLauncher"/> class.
            </summary>
            <param name="processHelper">
            The process helper.
            </param>
            <param name="messageLogger">
            The message Logger.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DefaultDataCollectionLauncher.LaunchDataCollector(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Launches the test host for discovery/execution.
            </summary>
            <param name="environmentVariables">Environment variables for the process.</param>
            <param name="commandLineArguments">The command line arguments to pass to the process.</param>
            <returns>ProcessId of launched Process. 0 means not launched.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DotnetDataCollectionLauncher">
            <summary>
            The datacollection launcher.
            This works for Desktop local scenarios
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DotnetDataCollectionLauncher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DotnetDataCollectionLauncher"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DotnetDataCollectionLauncher.#ctor(Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper,Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DotnetDataCollectionLauncher"/> class.
            </summary>
            <param name="processHelper">
            The process helper.
            </param>
            <param name="fileHelper">
            The file Helper.
            </param>
            <param name="messageLogger">
            The message Logger.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DotnetDataCollectionLauncher.LaunchDataCollector(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Launches the test host for discovery/execution.
            </summary>
            <param name="environmentVariables">Environment variables for the process.</param>
            <param name="commandLineArguments">The command line arguments to pass to the process.</param>
            <returns>ProcessId of launched Process. 0 means not launched.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager">
            <summary>
            The in process data collection extension manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager._inProcDataCollectorSettingsCollection">
            <summary>
            Loaded in-proc datacollectors collection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.#ctor(System.String,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher,System.String,Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager"/> class.
            </summary>
            <param name="runSettings">
            The run settings.
            </param>
            <param name="testEventsPublisher">
            The data collection test case event manager.
            </param>
            <param name="defaultCodeBase">
            The default code base to be used by in-proc data collector
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.IsInProcDataCollectionEnabled">
            <summary>
            Gets a value indicating whether is in-proc data collection enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.CreateDataCollector(System.String,System.String,System.Xml.XmlElement,System.Type)">
            <summary>
            Creates data collector instance based on datacollector settings provided.
            </summary>
            <param name="dataCollectorSettings">
            Settings to be used for creating DataCollector.
            </param>
            <param name="interfaceTypeInfo">
            TypeInfo of datacollector.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IInProcDataCollector"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.TriggerTestSessionStart(System.Object,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs)">
            <summary>
            The trigger test session start.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.TriggerTestSessionEnd(System.Object,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionEndEventArgs)">
            <summary>
            The trigger session end.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.TriggerTestCaseStart(System.Object,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs)">
            <summary>
            The trigger test case start.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.TriggerTestCaseEnd(System.Object,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs)">
            <summary>
            The trigger test case end.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.TriggerUpdateTestResult(System.Object,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs)">
            <summary>
            Triggers the send test result method
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.InitializeInProcDataCollectors(System.String)">
            <summary>
            Loads all the in-proc data collector dlls
            </summary>
            <param name="runSettings">
            The run Settings.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.GetCodebase(System.String)">
            <summary>
            Gets code base for in-proc datacollector
            Uses all codebasePaths to check where the datacollector exists
            </summary>
            <param name="codeBase">The code base.</param>
            <returns> Code base </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager.SetInProcDataCollectionDataInTestResult(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Set the data sent via datacollection sink in the testresult property for upstream applications to read.
            And removes the data from the dictionary.
            </summary>
            <param name="testResult">
            The test Result.
            </param>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants.TestSessionStartMethodName">
            <summary>
            The test session start method name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants.TestSessionEndMethodName">
            <summary>
            The test session end method name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants.TestCaseStartMethodName">
            <summary>
            The test case start method name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants.TestCaseEndMethodName">
            <summary>
            The test case end method name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants.TestSourcesPropertyName">
            <summary>
            Test sources property name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants.CoverletDataCollectorCodebase">
            <summary>
            Coverlet in-proc data collector code base
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants.CoverletDataCollectorTypeName">
            <summary>
            Coverlet in-proc data collector type name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionSink.#ctor">
            <summary>
            In process data collection sink
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionSink.GetDataCollectionDataSetForTestCase(System.Guid)">
            <summary>
            Gets the data collection data stored in the in process data collection sink
            </summary>
            <param name="testCaseId">valid test case id</param>
            <returns>test data collection dictionary </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector">
            <summary>
            Class representing an InProcDataCollector loaded by InProcDataCollectionExtensionManager
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector._dataCollectorType">
            <summary>
            DataCollector Class Type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector._dataCollectorObject">
            <summary>
            Instance of the
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector._configXml">
            <summary>
            Config XML from the runsettings for current datacollector
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector._assemblyLoadContext">
            <summary>
            AssemblyLoadContext for current platform
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector.#ctor(System.String,System.String,System.Type,System.String,Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IAssemblyLoadContext,Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector"/> class.
            </summary>
            <param name="codeBase">
            </param>
            <param name="assemblyQualifiedName">
            </param>
            <param name="interfaceTypeInfo">
            </param>
            <param name="configXml">
            </param>
            <param name="assemblyLoadContext">
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector.AssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName of the datacollector type
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector.LoadDataCollector(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectionSink)">
            <summary>
            Loads the DataCollector type
            </summary>
            <param name="inProcDataCollectionSink">Sink object to send data</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector.TriggerInProcDataCollectionMethod(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.InProcDataCollectionArgs)">
            <summary>
            Triggers InProcDataCollection Methods
            </summary>
            <param name="methodName">Name of the method to trigger</param>
            <param name="methodArg">Arguments for the method</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector.LoadInProcDataCollectorExtension(System.String)">
            <summary>
            Loads the assembly into the default context based on the code base path
            </summary>
            <param name="codeBase"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectionLauncher">
            <summary>
            The DataCollectionLauncher interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectionLauncher.DataCollectorProcessId">
            <summary>
            Gets the data collector process id
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectionLauncher.LaunchDataCollector(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            The launch data collector.
            </summary>
            <param name="environmentVariables">
            The environment variables.
            </param>
            <param name="commandLineArguments">
            The command line arguments.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectorsSettingsProvider">
            <summary>
            The DataCollectorsSettingsProvider interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectorsSettingsProvider.Settings">
            <summary>
            Gets run specific data collection settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IInProcDataCollector.AssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName of the datacollector type
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IInProcDataCollector.LoadDataCollector(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectionSink)">
            <summary>
            Loads the DataCollector type
            </summary>
            <param name="inProcDataCollectionSink">Sink object to send data</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IInProcDataCollector.TriggerInProcDataCollectionMethod(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.InProcDataCollectionArgs)">
            <summary>
            Triggers InProcDataCollection Methods
            </summary>
            <param name="methodName">Name of the method to trigger</param>
            <param name="methodArg">Arguments for the method</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager">
            <summary>
            The ProxyDataCollectionManager interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.Initialize">
            <summary>
            Initializes proxy datacollection manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.SettingsXml">
            <summary>
            The settings xml
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.Sources">
            <summary>
            List of test sources
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.BeforeTestRunStart(System.Boolean,System.Boolean,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
            <summary>
            Invoked before starting of test run
            </summary>
            <param name="resetDataCollectors">
            Bool value to reset and reinitialize datacollectors.
            </param>
            <param name="isRunStartingNow">
            Bool value to specify if the test execution has started or not.
            </param>
            <param name="runEventsHandler">
            The run Events Handler.
            </param>
            <returns>
            BeforeTestRunStartResult object
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.AfterTestRunEnd(System.Boolean,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
            <summary>
            Invoked after ending of test run
            </summary>
            <param name="isCanceled">
            The is Canceled.
            </param>
            <param name="runEventsHandler">
            The run Events Handler.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.TestHostLaunched(System.Int32)">
            <summary>
            Invoked after initialization of test host
            </summary>
            <param name="processId">
            Process ID of test host
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher">
            <summary>
            Manager for sending test case events to data collectors.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher.SessionStart">
            <summary>
            The session start event.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher.SessionEnd">
            <summary>
            The session end event.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher.TestCaseStart">
            <summary>
            The test case start event.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher.TestCaseEnd">
            <summary>
            The test case end event.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher.TestResult">
            <summary>
            The test result event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ParallelDataCollectionEventsHandler.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Handles the Run Complete event from a parallel proxy manager
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager">
            <summary>
            Managed datacollector interaction from runner process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.SettingsXml">
            <summary>
            The settings xml
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.Sources">
            <summary>
            List of test sources
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager"/> class.
            </summary>
            <param name="requestData">
            Request Data providing common execution/discovery services.
            </param>
            <param name="settingsXml">
                Runsettings that contains the datacollector related configuration.
            </param>
            <param name="sources">
                Test Run sources
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager"/> class.
            </summary>
            <param name="requestData">
                Request Data providing common execution/discovery services.
            </param>
            <param name="settingsXml">
                The settings xml.
            </param>
            <param name="sources">
                Test Run sources
            </param>
            <param name="processHelper">
                The process helper.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollection.Interfaces.IDataCollectionRequestSender,Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectionLauncher)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager"/> class.
            </summary>
            <param name="requestData">
                Request Data providing common execution/discovery services.
            </param>
            <param name="settingsXml">
                Runsettings that contains the datacollector related configuration.
            </param>
            <param name="sources">
                Test Run sources
            </param>
            <param name="dataCollectionRequestSender">
                Handles communication with datacollector process.
            </param>
            <param name="processHelper">
                The process Helper.
            </param>
            <param name="dataCollectionLauncher">
                Launches datacollector process.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.AfterTestRunEnd(System.Boolean,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
            <summary>
            Invoked after ending of test run
            </summary>
            <param name="isCanceled">
            The is Canceled.
            </param>
            <param name="runEventsHandler">
            The run Events Handler.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.BeforeTestRunStart(System.Boolean,System.Boolean,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
            <summary>
            Invoked before starting of test run
            </summary>
            <param name="resetDataCollectors">
            The reset Data Collectors.
            </param>
            <param name="isRunStartingNow">
            The is Run Starting Now.
            </param>
            <param name="runEventsHandler">
            The run Events Handler.
            </param>
            <returns>
            BeforeTestRunStartResult object
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.TestHostLaunched(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.UpdateExtensionsFolderInRunSettings(System.String)">
            <summary>
            Update Extensions path folder in test adapters paths in runsettings.
            </summary>
            <param name="settingsXml"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager.LogEnabledDataCollectors">
            <summary>
            Log Enabled Data Collectors
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyOutOfProcDataCollectionManager">
            <summary>
            Sends test case events to communication layer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyOutOfProcDataCollectionManager._syncObject">
            <summary>
            Sync object for ensuring that only run is active at a time
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyOutOfProcDataCollectionManager.#ctor(Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataCollectionTestCaseEventSender,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyOutOfProcDataCollectionManager"/> class.
            </summary>
            <param name="dataCollectionTestCaseEventSender">
            The data collection test case event sender.
            </param>
            <param name="dataCollectionTestCaseEventManager">
            The data collection test case event manager.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator">
            <summary>
            Enumerates through all the discoverers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator"/> class.
            </summary>
            <param name="requestData">The request data for providing discovery services and data.</param>
            <param name="discoveryResultCache"> The discovery result cache. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache,Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator"/> class.
            </summary>
            <param name="requestData">The request data for providing discovery services and data.</param>
            <param name="discoveryResultCache"> The discovery result cache. </param>
            <param name="testPlatformEventSource">Telemetry events receiver</param>
            <param name="token">Cancellation Token to abort discovery</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache,Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IAssemblyProperties,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator"/> class.
            </summary>
            <param name="requestData">The request data for providing discovery services and data.</param>
            <param name="discoveryResultCache"> The discovery result cache. </param>
            <param name="testPlatformEventSource">Telemetry events receiver</param>
            <param name="assemblyProperties">Information on the assemblies being discovered</param>
            <param name="token">Cancellation Token to abort discovery</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.LoadTests(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunSettings,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Discovers tests from the sources.
            </summary>
            <param name="testExtensionSourceMap"> The test extension source map. </param>
            <param name="settings"> The settings. </param>
            <param name="testCaseFilter"> The test case filter. </param>
            <param name="logger"> The logger. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.LoadTestsFromAnExtension(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunSettings,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Loads test cases from individual source.
            Discovery extensions update progress through ITestCaseDiscoverySink.
            Discovery extensions sends discovery messages through TestRunMessageLoggerProxy
            </summary>
            <param name="extensionAssembly"> The extension Assembly. </param>
            <param name="sources"> The sources.   </param>
            <param name="settings"> The settings.   </param>
            <param name="testCaseFilter"> The test case filter. </param>
            <param name="logger"> The logger.  </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.GetDiscovererToSourcesMap(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IAssemblyProperties)">
            <summary>
            Get the discoverers matching with the parameter sources
            </summary>
            <param name="extensionAssembly"> The extension assembly. </param>
            <param name="sources"> The sources. </param>
            <param name="logger"> The logger instance. </param>
            <returns> The map between an extension type and a source. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.GetAssemblyTypeToSoucesMap(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IAssemblyProperties)">
            <summary>
            Get assembly type to sources map.
            </summary>
            <param name="sources">Sources.</param>
            <param name="assemblyType">Assembly type.</param>
            <returns>Sources with matching assembly type.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator.IsAssembly(System.String)">
            <summary>
            Finds if a file is an assembly or not.
            </summary>
            <param name="filePath">File path.</param>
            <returns>True if file is an assembly.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext">
            <summary>
            Specifies the user specified RunSettings and framework provided context of the discovery.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext.RunSettings">
            <summary>
            Gets the run settings specified for this request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext.GetTestCaseFilter(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty})">
            <summary>
            Returns TestCaseFilterExpression validated for supportedProperties.
            If there is a parsing error in filter expression, TestPlatformFormatException() is thrown.
            </summary>
            <param name="supportedProperties"> The supported Properties. </param>
            <param name="propertyProvider"> The property Provider. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression"/>. </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext.FilterExpressionWrapper">
            <summary>
            Gets or sets the FilterExpressionWrapper instance as created from filter string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager">
            <summary>
            Orchestrates discovery operations for the engine communicating with the test host process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager"/> class.
            </summary>
            <param name="requestData">
            The Request Data for providing discovery services and data.
            </param>
            <param name="testPlatformEventSource">
                The test platform event source.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.Initialize(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Initializes the discovery manager.
            </summary>
            <param name="pathToAdditionalExtensions"> The path to additional extensions. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.DiscoverTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Discovers tests
            </summary>
            <param name="discoveryCriteria">Settings, parameters for the discovery request</param>
            <param name="eventHandler">EventHandler for handling discovery events from Engine</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.Abort">
            <summary>
            Aborts the test discovery.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.GetValidSources(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,System.String)">
            <summary>
            Verify/Normalize the test source files.
            </summary>
            <param name="sources"> Paths to source file (or directory) in which to look for tests. </param>
            <param name="logger">logger</param>
            <param name="package">package</param>
            <returns> The list of verified sources. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache">
            <summary>
            The discovery result cache.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache._onReportTestCases">
            <summary>
            Callback used when cache is full.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache._cacheSize">
            <summary>
            Max size of the test case buffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache._cacheTimeout">
            <summary>
            Timeout that triggers sending test cases regardless of cache size.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache._lastUpdate">
            <summary>
            Last time test cases were sent.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache._tests">
            <summary>
            Test case buffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache._syncObject">
            <summary>
            Sync object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache.#ctor(System.Int64,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache.OnReportTestCases)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache"/> class.
            </summary>
            <param name="cacheSize"> The cache size. </param>
            <param name="discoveredTestEventTimeout"> The discovered test event timeout. </param>
            <param name="onReportTestCases"> The on report test cases. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache.OnReportTestCases">
            <summary>
            Called when the cache is ready to report some discovered test cases.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache.Tests">
            <summary>
            Gets the tests present in the cache currently
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache.TotalDiscoveredTests">
            <summary>
            Gets the total discovered tests
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache.AddTest(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Adds a test to the cache.
            </summary>
            <param name="test"> The test. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.TestCaseDiscoverySink">
            <summary>
            The test case discovery sink.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.TestCaseDiscoverySink.#ctor(Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.TestCaseDiscoverySink"/> class.
            </summary>
            <param name="discoveryRequestCache"> The discovery request cache. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.TestCaseDiscoverySink.SendTestCase(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Sends the test case to the discovery cache.
            </summary>
            <param name="discoveredTest"> The discovered test. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler">
            <summary>
            The test case events handler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler.SendTestCaseStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler.SendTestCaseEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler.SendTestResult(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler.SendSessionStart(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler.SendSessionEnd">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests">
            <summary>
            The base run tests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests._platformThread">
            <summary>
            To create thread in given apartment state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests._runConfiguration">
            <summary>
            The Run configuration. To determine framework and execution thread apartment state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests._dataSerializer">
            <summary>
            The Serializer to clone testcase object in case of user input test source is package. E.g UWP scenario(appx/build.appxrecipe).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests._isCancellationRequested">
            <summary>
            Specifies that the test run cancellation is requested
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests._activeExecutor">
            <summary>
            Active executor which is executing the tests currently
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler,Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests"/> class.
            </summary>
            <param name="requestData">The request data for providing common execution services and data</param>
            <param name="package">The user input test source(package) if it differs from actual test source otherwise null.</param>
            <param name="runSettings">The run settings.</param>
            <param name="testExecutionContext">The test execution context.</param>
            <param name="testCaseEventsHandler">The test case events handler.</param>
            <param name="testRunEventsHandler">The test run events handler.</param>
            <param name="testPlatformEventSource">Test platform event source.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler,Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher,Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IThread,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests"/> class.
            </summary>
            <param name="requestData">Provides services and data for execution</param>
            <param name="package">The user input test source(package) list if it differs from actual test source otherwise null.</param>
            <param name="runSettings">The run settings.</param>
            <param name="testExecutionContext">The test execution context.</param>
            <param name="testCaseEventsHandler">The test case events handler.</param>
            <param name="testRunEventsHandler">The test run events handler.</param>
            <param name="testPlatformEventSource">Test platform event source.</param>
            <param name="testEventsPublisher">Publisher for test events.</param>
            <param name="platformThread">Platform Thread.</param>
            <param name="dataSerializer">Data Serializer for cloning TestCase and test results object.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunSettings">
            <summary>
            Gets the run settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.TestExecutionContext">
            <summary>
            Gets the test execution context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.TestRunEventsHandler">
            <summary>
            Gets the test run events handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.TestRunCache">
            <summary>
            Gets the test run cache.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.Cancel">
            <summary>
            Cancel the current run by setting cancellation token for active executor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.ShouldAttachDebuggerToTestHost(Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExecutorCapabilities},System.Tuple{System.Uri,System.String},Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext)">
            <summary>
            Asks the adapter about attaching the debugger to the default test host.
            </summary>
            <param name="executor">The executor used to run the tests.</param>
            <param name="executorUriExtensionTuple">The executor URI.</param>
            <param name="runContext">The run context.</param>
            <returns>
            <see langword="true"/> if must attach the debugger to the default test host,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager">
            <summary>
            Orchestrates test execution related functionality for the engine communicating with the test host process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.#ctor(Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager"/> class.
            </summary>
            <param name="testPlatformEventSource">Test platform event source.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.Initialize(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
            <summary>
            Initializes the execution manager.
            </summary>
            <param name="pathToAdditionalExtensions"> The path to additional extensions. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.StartTestRun(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Starts the test run
            </summary>
            <param name="adapterSourceMap"> The adapter Source Map.  </param>
            <param name="package">The user input test source(package) if it differ from actual test source otherwise null.</param>
            <param name="runSettings"> The run Settings.  </param>
            <param name="testExecutionContext"> The test Execution Context. </param>
            <param name="testCaseEventsHandler"> EventHandler for handling test cases level events from Engine. </param>
            <param name="runEventsHandler"> EventHandler for handling execution events from Engine.  </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.StartTestRun(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Starts the test run with tests.
            </summary>
            <param name="tests"> The test list. </param>
            <param name="package">The user input test source(package) if it differ from actual test source otherwise null.</param>
            <param name="runSettings"> The run Settings.  </param>
            <param name="testExecutionContext"> The test Execution Context. </param>
            <param name="testCaseEventsHandler"> EventHandler for handling test cases level events from Engine. </param>
            <param name="runEventsHandler"> EventHandler for handling execution events from Engine. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.Cancel(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Cancel the test execution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Aborts the test execution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.InitializeDataCollectors(System.String,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher,System.String)">
            <summary>
            Initializes out-proc and in-proc data collectors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler,System.Collections.Generic.Dictionary{System.Tuple{System.Uri,System.String},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Used for unit testing only.
            </summary>
            <param name="requestData"></param>
            <param name="adapterSourceMap"></param>
            <param name="package">The user input test source(package) if it differ from actual test source otherwise null.</param>
            <param name="runSettings"></param>
            <param name="testExecutionContext"></param>
            <param name="testCaseEventsHandler"></param>
            <param name="testRunEventsHandler"></param>
            <param name="executorUriVsSourceList"></param>
            <param name="testRunCache"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.ShouldAttachDebuggerToTestHost(Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExecutorCapabilities},System.Tuple{System.Uri,System.String},Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.GetExecutorVsSourcesList(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Returns executor Vs sources list
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.SendSessionEnd">
            <summary>
            Sends Session-End event on in-proc datacollectors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.SendSessionStart">
            <summary>
            Sends Session-Start event on in-proc datacollectors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithTests.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler,System.Collections.Generic.Dictionary{System.Tuple{System.Uri,System.String},System.Collections.Generic.List{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase}})">
            <summary>
            Used for unit testing only.
            </summary>
            <param name="testCases"></param>
            <param name="package">The user input test source(package) if it differ from actual test source otherwise null.</param>
            <param name="testRunCache"></param>
            <param name="runSettings"></param>
            <param name="testExecutionContext"></param>
            <param name="testCaseEventsHandler"></param>
            <param name="testRunEventsHandler"></param>
            <param name="executorUriVsTestList"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithTests.ShouldAttachDebuggerToTestHost(Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExecutorCapabilities},System.Tuple{System.Uri,System.String},Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithTests.SendSessionEnd">
            <summary>
            Sends Session-End event on in-proc datacollectors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithTests.SendSessionStart">
            <summary>
            Sends Session-Start event on in-proc datacollectors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithTests.GetExecutorVsTestCaseList(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Returns the executor Vs TestCase list
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache">
            <summary>
            Maintains a cache of last 'n' test results and maintains stats for the complete run.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._isDisposed">
            <summary>
            Specifies whether the object is disposed or not.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._runStats">
            <summary>
            Test run stats
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._totalExecutedTests">
            <summary>
            Total tests which have currently executed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._onCacheHit">
            <summary>
            Callback used when cache is ready to report some test results/case.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._cacheSize">
            <summary>
            Max size of the test result buffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._cacheTimeout">
            <summary>
            Timeout that triggers sending results regardless of cache size.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._timer">
            <summary>
            Timer for cache
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._lastUpdate">
            <summary>
            Last time results were sent.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._inProgressTests">
            <summary>
            The test case currently in progress.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._testResults">
            <summary>
            Test results buffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache._syncObject">
            <summary>
            Sync object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.#ctor(System.Int64,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.OnCacheHit)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache"/> class.
            </summary>
            <param name="cacheSize"> The cache size. </param>
            <param name="cacheTimeout"> The cache timeout. </param>
            <param name="onCacheHit"> The on cache hit. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.OnCacheHit">
            <summary>
            Called when the cache is ready to report on the current status.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.TestResults">
            <summary>
            Gets the test results present in the cache currently.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.InProgressTests">
            <summary>
            Gets the set of in-progress test cases present in the cache currently.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.TotalExecutedTests">
            <summary>
            Gets the total executed tests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.TestRunStatistics">
            <summary>
            Gets the test run stats
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.Dispose">
            <summary>
            Disposes the cache
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.OnTestStarted(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Notifies the cache that a test is starting.
            This notification comes from the adapter to the engine which then calls into the cache.
            </summary>
            <param name="testCase"> The test Case. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.OnNewTestResult(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Notifies the cache of a new test result from the adapter.
            </summary>
            <param name="testResult"> The test result. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.OnTestCompletion(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Notifies the cache of a test completion.
            </summary>
            <param name="completedTest">
            The completed Test.
            </param>
            <returns> True if this test has been removed from the list of in progress tests. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.GetLastChunk">
            <summary>
            Returns the last chunk
            </summary>
            <returns> The set of test results remaining in the cache. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing"> Indicates if this needs to clean up managed resources. </param>
            <remarks>
            The dispose pattern is a best practice to differentiate between managed and native resources cleanup.
            Even though this particular class does not have any native resources - honoring the pattern to be consistent throughout the code base.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache.CheckForCacheHit">
            <summary>
            Checks if the cache timeout/size has been met.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ITestRunCache">
            <summary>
            The cache for test execution information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.StringUtils.IsNullOrEmpty(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.StringUtils.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.StringUtils.IsNullOrWhiteSpace(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.StringUtils.IsNullOrWhiteSpace(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TPDebug.Assert(System.Boolean)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TPDebug.Assert(System.Boolean,System.String)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.AccessDenied">
            <summary>
              Looks up a localized string similar to {0} Access denied while trying to create &quot;TestResults&quot; folder in mentioned location. You are getting this exception because you are running vstest.console.exe from a folder which requires having write access. To solve the issue: please  run vstest.console.exe from a folder where you have write privileges..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.AttachDebuggerToDefaultTestHostFailure">
            <summary>
              Looks up a localized string similar to Cannot attach the debugger to the default test host with process ID: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.AttachmentOutputFormat">
            <summary>
              Looks up a localized string similar to   {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.AttachmentsBanner">
            <summary>
              Looks up a localized string similar to Attachments:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.DataCollectorDebuggerWarning">
            <summary>
              Looks up a localized string similar to DataCollector debugging is enabled. Please attach debugger to datacollector process to continue..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.DeprecatedAdapterPath">
            <summary>
              Looks up a localized string similar to Adapter lookup is being changed, please follow https://github.com/Microsoft/vstest/blob/main/RFCs/0022-User-Specified-TestAdapter-Lookup.md#roadmap for more details..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.DiscovererInstantiationException">
            <summary>
              Looks up a localized string similar to Exception occurred while instantiating discoverer : {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.DuplicateAdaptersFound">
            <summary>
              Looks up a localized string similar to Multiple test adapters with the same uri &apos;{0}&apos; were found. Ignoring adapter &apos;{1}&apos;. Please uninstall the conflicting adapter(s) to avoid this warning..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.DuplicateSource">
            <summary>
              Looks up a localized string similar to Ignoring the specified duplicate source &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.ExceptionFromLoadTests">
            <summary>
              Looks up a localized string similar to An exception occurred while test discoverer &apos;{0}&apos; was loading tests. Exception: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.ExceptionFromRunTests">
            <summary>
              Looks up a localized string similar to An exception occurred while invoking executor &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.ExecutionThreadApartmentStateNotSupportedForFramework">
            <summary>
              Looks up a localized string similar to ExecutionThreadApartmentState option not supported for framework: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.FailedToLaunchTestHost">
            <summary>
              Looks up a localized string similar to Failed to launch testhost with error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.FileNotFound">
            <summary>
              Looks up a localized string similar to Could not find file {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.HostDebuggerWarning">
            <summary>
              Looks up a localized string similar to Host debugging is enabled. Please attach debugger to testhost process to continue..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.IgnoringExecutorAsNoDefaultExecutorUriAttribute">
            <summary>
              Looks up a localized string similar to Ignoring the test executor corresponding to test discoverer {0} because the discoverer does not have the DefaultExecutorUri attribute . You might need to re-install the test adapter add-in..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.InitializationFailed">
            <summary>
              Looks up a localized string similar to Failed to initialize client proxy: could not connect to test process..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.LaunchDebugProcessNotAllowedForANonDebugRun">
            <summary>
              Looks up a localized string similar to This operation is not allowed in the context of a non-debug run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoAvailableProxyForDeque">
            <summary>
              Looks up a localized string similar to Could not find an available proxy to deque..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoDotnetExeFound">
            <summary>
              Looks up a localized string similar to Could not find {0}. Make sure that the dotnet is installed on the machine..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoMatchingExecutor">
            <summary>
              Looks up a localized string similar to Could not find test executor with URI &apos;{0}&apos;.  Make sure that the test executor is installed and supports .net runtime version {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NonExistingExtensions">
            <summary>
              Looks up a localized string similar to Could not find extensions: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoProxyMatchesDescription">
            <summary>
              Looks up a localized string similar to The runsettings changed between the time when the test session was established and the time of the current run/discovery request..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoSuchProxyId">
            <summary>
              Looks up a localized string similar to Proxy with id {0} is not managed by the current session manager..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoSuitableRuntimeProviderFound">
            <summary>
              Looks up a localized string similar to No suitable test runtime provider was found:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoTestHostProviderFound">
            <summary>
              Looks up a localized string similar to No suitable test runtime provider was found for any source in this run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoTestsAvailableForGivenTestCaseFilter">
            <summary>
              Looks up a localized string similar to No test matches the given testcase filter `{0}` in {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.NoValidSourceFoundForDiscovery">
            <summary>
              Looks up a localized string similar to None of the specified source(s) &apos;{0}&apos; is valid. Fix the above errors/warnings and then try again. .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.OldTestHostIsGettingUsed">
            <summary>
              Looks up a localized string similar to You are using an older version of Microsoft.NET.Test.Sdk. Kindly move to a version equal or greater than 15.3.0..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.ProxyIsAlreadyAvailable">
            <summary>
              Looks up a localized string similar to Proxy with id {0} is already available and cannot be re-enqueued..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.SkippingSource">
            <summary>
              Looks up a localized string similar to Skipping source:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.StringSeperator">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.TestDiscoveryCancelled">
            <summary>
              Looks up a localized string similar to Discovery of tests cancelled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.TesthostDiagLogOutputFile">
            <summary>
              Looks up a localized string similar to Logging TestHost Diagnostics in file: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.TestHostExitedWithError">
            <summary>
              Looks up a localized string similar to Testhost process for source(s) &apos;{0}&apos; exited with error: {1}. Please check the diagnostic logs for more information..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.TestRunFailed_NoDiscovererFound_NoTestsAreAvailableInTheSources">
            <summary>
              Looks up a localized string similar to No test is available in {0}. Make sure that test discoverer &amp; executors are registered and platform &amp; framework version settings are appropriate and try again..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources.UnsupportedPropertiesInTestCaseFilter">
            <summary>
              Looks up a localized string similar to No tests matched the filter because it contains one or more properties that are not valid ({0}). Specify filter expression containing valid properties ({1})..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine">
            <summary>
            Cross platform test engine entry point for the client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetDiscoveryManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetExecutionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetTestSessionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetExtensionManager">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetLoggerManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.VerifyParallelSettingAndCalculateParallelLevel(System.Int32,System.String)">
             <summary>
             Verifies parallel setting and returns parallel level to use based on the run criteria.
             </summary>
            
             <param name="sourceCount">The source count.</param>
             <param name="runSettings">The run settings.</param>
            
             <returns>The parallel level to use.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetTargetFrameworkTestHostDemultiplexer(System.String)">
            <summary>
            We don't add this helper to the XmlRunSettingsUtilities because the feature is in preview and not exposed yet
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager">
            <summary>
            Orchestrates extensions for this engine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager.ClearExtensions">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager.UseAdditionalExtensions(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory">
            <summary>
            The factory that provides discovery and execution managers to the test host.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory"/> class.
             </summary>
            
             <param name="telemetryOptedIn">
             A value indicating if the telemetry is opted in or not.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory.GetDiscoveryManager">
            <summary>
            The discovery manager instance for any discovery related operations inside of the test host.
            </summary>
            <returns>The discovery manager.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory.GetExecutionManager">
            <summary>
            The execution manager instance for any discovery related operations inside of the test host.
            </summary>
            <returns>The execution manager.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager">
            <summary>
            Orchestrates test session operations for the engine communicating with the client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria,System.Int32,System.Func{Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager},System.Collections.Generic.List{Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo})">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager"/> class.
             </summary>
            
             <param name="criteria">The test session criteria.</param>
             <param name="maxTesthostCount">The testhost count.</param>
             <param name="proxyCreator">The proxy creator.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.StartSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.StopSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.DequeueProxy(System.String,System.String)">
             <summary>
             Dequeues a proxy to be used either by discovery or execution.
             </summary>
            
             <param name="source">The source to be associated to this proxy.</param>
             <param name="runSettings">The run settings.</param>
            
             <returns>The dequeued proxy.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.EnqueueProxy(System.Int32)">
             <summary>
             Enqueues a proxy back once discovery or executions is done with it.
             </summary>
            
             <param name="proxyId">The id of the proxy to be re-enqueued.</param>
            
             <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyOperationManagerContainer">
            <summary>
            Defines a container encapsulating the proxy and its corresponding state info.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyOperationManagerContainer.#ctor(Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyOperationManagerContainer"/> class.
             </summary>
            
             <param name="proxy">The proxy.</param>
             <param name="available">A flag indicating if the proxy is available to do work.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyOperationManagerContainer.Proxy">
            <summary>
            Gets or sets the proxy.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyOperationManagerContainer.IsAvailable">
            <summary>
            Gets or sets a flag indicating if the proxy is available to do work.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool">
            <summary>
            Represents the test session pool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.Instance">
             <summary>
             Gets the test session pool instance.
             Sets the test session pool instance for testing purposes only.
             </summary>
            
             <remarks>Thread-safe singleton pattern.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.AddSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager)">
             <summary>
             Adds a session to the pool.
             </summary>
            
             <param name="testSessionInfo">The test session info object.</param>
             <param name="proxyManager">The proxy manager object.</param>
            
             <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.KillSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
             <summary>
             Kills and removes a session from the pool.
             </summary>
            
             <param name="testSessionInfo">The test session info object.</param>
             <param name="requestData">The request data.</param>
            
             <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.TryTakeProxy(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
             <summary>
             Gets a reference to the proxy object from the session pool.
             </summary>
            
             <param name="testSessionInfo">The test session info object.</param>
             <param name="source">The source to be associated to this proxy.</param>
             <param name="runSettings">The run settings.</param>
             <param name="requestData">The request data.</param>
            
             <returns>The proxy object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.ReturnProxy(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,System.Int32)">
             <summary>
             Returns the proxy object to the session pool.
             </summary>
            
             <param name="testSessionInfo">The test session info object.</param>
             <param name="proxyId">The proxy id to be returned.</param>
            
             <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.TestSourcesUtility">
            <summary>
            Test sources utility class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.TestSourcesUtility.GetSources(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Gets test sources from adapter source map
            </summary>
            <param name="adapterSourceMap"> The test list. </param>
            <returns> List of test Sources </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.TestSourcesUtility.GetSources(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Gets test sources from test case list
            </summary>
            <param name="tests"> The test list. </param>
            <returns> List of test Sources </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.TestSourcesUtility.GetDefaultCodebasePath(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Gets default code base path for in-proc collector from test sources
            </summary>
            <param name="adapterSourceMap"> The test list. </param>
            <returns> List of test Sources </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.TestSourcesUtility.GetDefaultCodebasePath(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Gets default code base path for in-proc collector from test sources
            </summary>
            <param name="tests"> The test list. </param>
            <returns> List of test Sources </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler">
            <summary>
            This interface holds additional values for a request handler when rewriting paths is used.
            This is in case when --local-path and --remote-path parameters are provided and testhost is running
            in a remote deployment. This interface is used only to avoid changes to public API of TestRequestHandler.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.PathConverter">
            <summary>
            Converts paths in received and sent objects, to make testhost seem like it run a local test,
            while it was in fact running a test on a remote system, in a totally different path. This is for UWP which
            does testhost deployment.
            The modifications here rely on combination of side-effects, and actually replacing the values, because
            we cannot modify the properties on our public objects, and add setters.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler">
            <summary>
            Listens inside of testhost for requests, that are sent from vstest.console. Requests are handled in <see cref="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.OnMessageReceived(System.Object,Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.MessageReceivedEventArgs)"/>
            and responses are sent back via various methods, for example <see cref="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendExecutionComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.InitializeCommunication">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.WaitForRequestSenderConnection(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.ProcessRequests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.ITestHostManagerFactory)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.Close">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendTestCases(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendTestRunStatistics(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendLog(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendExecutionComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.DiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.LaunchProcessWithDebuggerAttached(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.AttachDebuggerToProcess(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo)">
            <inheritdoc />
        </member>
    </members>
</doc>
