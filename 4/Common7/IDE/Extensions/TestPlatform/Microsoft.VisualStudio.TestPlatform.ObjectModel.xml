<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.TestPlatform.ObjectModel</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext">
            <summary>
            Specifies the user specified RunSettings and framework provided context of the discovery.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext.RunSettings">
            <summary>
            Runsettings specified for this request.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle">
            <summary>
            Handle to the framework which is passed to the test executors.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle.EnableShutdownAfterTestRun">
            <summary>
            Gets or sets a value indicating whether the execution framework enables the shutdown of execution process after the test run is complete. This should be used only in out of process test runs when IRunContext.KeepAlive is true
            and should be used only when absolutely required as using it degrades the performance of the subsequent run.
            It throws InvalidOperationException when it is attempted to be enabled when keepAlive is false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle.LaunchProcessWithDebuggerAttached(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Launch the specified process with the debugger attached.
            </summary>
            <param name="filePath">File path to the exe to launch.</param>
            <param name="workingDirectory">Working directory that process should use.</param>
            <param name="arguments">Command line arguments the process should be launched with.</param>
            <param name="environmentVariables">Environment variables to be set in target process</param>
            <returns>Process ID of the started process.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle2">
            <summary>
            Handle to the framework which is passed to the test executors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle2.AttachDebuggerToProcess(System.Int32)">
            <summary>
            Attach debugger to an already running process.
            </summary>
            <param name="pid">Process ID of the process to which the debugger should be attached.</param>
            <returns><see langword="true"/> if the debugger was successfully attached to the requested process, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext">
            <summary>
            It provides user specified runSettings and framework provided context of the run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext.KeepAlive">
            <summary>
            Whether the execution process should be kept alive after the run is finished or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext.InIsolation">
            <summary>
            Whether the execution is happening in InProc or outOfProc
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext.IsDataCollectionEnabled">
            <summary>
            Whether the data collection is enabled or not
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext.IsBeingDebugged">
            <summary>
            Whether the test is being debugged or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext.GetTestCaseFilter(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty})">
            <summary>
            Test case filter for user specified criteria which has been validated for 'supportedProperties'.
            It is used only with sources. With specific test cases it will always be null.
            If there is a parsing error or filter expression has unsupported properties, TestPlatformFormatException() is thrown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext.TestRunDirectory">
            <summary>
            Directory which should be used for storing result files/deployment files etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext.SolutionDirectory">
            <summary>
            Solution Directory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunSettings">
            <summary>
            Used for loading settings for a run.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunSettings.GetSettings(System.String)">
            <summary>
            Get the settings for the provided settings name.
            </summary>
            <param name="settingsName">Name of the settings section to get.</param>
            <returns>The settings provider for the settings or null if one was not found.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunSettings.SettingsXml">
            <summary>
            Settings used for this run.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ISettingsProvider">
            <summary>
            Interface implemented to provide a section in the run settings. A class that
            implements this interface will be available for use if it exports its type via
            MEF, and if its containing assembly is placed in the Extensions folder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ISettingsProvider.Load(System.Xml.XmlReader)">
            <summary>
            Load the settings from the reader.
            </summary>
            <param name="reader">Reader to load the settings from.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink">
            <summary>
            TestCaseDiscovery sink is used by discovery extensions to communicate test cases as they are being discovered,
            and various discovery related events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink.SendTestCase(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Callback used by discovery extensions to send back testcases as they are being discovered.
            </summary>
            <param name="discoveredTest">New test discovered since last invocation.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression">
            <summary>
            It represents expression for filtering test cases.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression.TestCaseFilterValue">
            <summary>
            Gets original string for test case filter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression.MatchTestCase(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.Func{System.String,System.Object})">
            <summary>
            Matched test case with test case filtering criteria.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer">
            <summary>
            Interface implemented to provide tests to the test platform.
            </summary>
            <remarks>
            <para>
            A class that implements this interface will be available for use if its containing assembly is either placed in
            the Extensions folder or is marked as a 'UnitTestExtension' type in the vsix package.
            </para>
            <para>
            Provide one or more <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute"/>s on the implementing class to indicate the set of file
            extensions that are supported for test discovery. If the discoverer supports discovering tests present inside
            directories, provide <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute"/> instead. If neither
            <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute"/> nor <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute"/> is provided, the
            discoverer will be called for all relevant test files and directories.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer.DiscoverTests(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink)">
            <summary>
            Discovers the tests available from the provided source.
            </summary>
            <param name="sources">Collection of test containers.</param>
            <param name="discoveryContext">Context in which discovery is being performed.</param>
            <param name="logger">Logger used to log messages.</param>
            <param name="discoverySink">Used to send testcases and discovery related events back to Discoverer manager.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutionRecorder">
            <summary>
            Used for recording test results and test messages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutionRecorder.RecordResult(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Notify the framework about the test result.
            </summary>
            <param name="testResult">Test Result to be sent to the framework.</param>
            <exception cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException">Exception thrown by the framework when an executor attempts to send
            test result to the framework when the test(s) is canceled. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutionRecorder.RecordStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Notify the framework about starting of the test case.
            Framework sends this event to data collectors enabled in the run. If no data collector is enabled, then the event is ignored.
            </summary>
            <param name="testCase">testcase which will be started.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutionRecorder.RecordEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Notify the framework about completion of the test case.
            Framework sends this event to data collectors enabled in the run. If no data collector is enabled, then the event is ignored.
            </summary>
            <param name="testCase">testcase which has completed.</param>
            <param name="outcome">outcome of the test case.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutionRecorder.RecordAttachments(System.Collections.Generic.IList{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet})">
            <summary>
            Notify the framework about run level attachments.
            </summary>
            <param name="attachmentSets">attachments produced in this run.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor">
             <summary>
             Defines the test executor which provides capability to run tests.
            
             A class that implements this interface will be available for use if its containing
              assembly is either placed in the Extensions folder or is marked as a 'UnitTestExtension' type
              in the vsix package.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.RunTests(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.RunTests(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" -->
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.Cancel">
            <summary>
            Cancel the execution of the tests.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor2">
             <summary>
             Defines the test executor which provides capability to run tests.
            
             A class that implements this interface will be available for use if its containing
              assembly is either placed in the Extensions folder or is marked as a 'UnitTestExtension' type
              in the vsix package.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor2.ShouldAttachToTestHost(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)">
            <summary>
            Indicates whether or not the default test host process should be attached to.
            </summary>
            <param name="sources">Path to test container files to look for tests in.</param>
            <param name="runContext">Context to use when executing the tests.</param>
            <returns>
            <see langword="true"/> if the default test host process should be attached to,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor2.ShouldAttachToTestHost(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)">
            <summary>
            Indicates whether or not the default test host process should be attached to.
            </summary>
            <param name="tests">Tests to be run.</param>
            <param name="runContext">Context to use when executing the tests.</param>
            <returns>
            <see langword="true"/> if the default test host process should be attached to,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException">
            <summary>
            Exception thrown on parsing error in user provided filter expression.
            This can happen when filter has invalid format or has unsupported properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException.#ctor">
            <summary>
            Creates a new TestPlatformFormatException
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException.#ctor(System.String)">
            <summary>
            Initializes with the message.
            </summary>
            <param name="message">Message for the exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException.#ctor(System.String,System.String)">
            <summary>
            Initializes with the message and filter string.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="filterValue">Filter expression.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes with message and inner exception.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException.FilterValue">
            <summary>
            Filter expression.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization helper.
            </summary>
            <param name="info">Serialization info to add to</param>
            <param name="context">not used</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException">
            <summary>
            Exception thrown by the framework when an executor attempts to send
            test result to the framework when the test is canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException.#ctor">
            <summary>
            Creates a new TestCanceledException
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException.#ctor(System.String)">
            <summary>
            Initializes with the message.
            </summary>
            <param name="message">Message for the exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes with message and inner exception.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet">
            <summary>
            Represents a set of attachments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet.Uri">
            <summary>
            URI of the sender.
            If a data-collector is sending this set, then it should be uri of the data collector. Also if an
            executor is sending this attachment, then it should be uri of executor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet.DisplayName">
            <summary>
            Name of the sender.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet.Attachments">
            <summary>
            List of data attachments.
            These attachments can be things such as files that the collector/adapter wants to make available to the publishers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.UriDataAttachment">
            <summary>
            Defines the data attachment.
            Dev10 equivalent is UriDataAttachment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.UriDataAttachment.Description">
            <summary>
            Description of the attachment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.UriDataAttachment.Uri">
            <summary>
            Uri of the attachment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria">
            <summary>
            Defines the discovery criterion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria"/> class.
            </summary>
            <remarks>This constructor doesn't perform any parameter validation, it is meant to be used for serialization."/></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria"/> class.
            </summary>
            <param name="sources">
            Sources from which the tests should be discovered.
            </param>
            <param name="frequencyOfDiscoveredTestsEvent">
            Frequency of discovered test event. This is used for batching discovered tests.
            </param>
            <param name="testSettings">
            Test configuration provided by user.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.TimeSpan,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria"/> class.
            </summary>
            <param name="sources">
            Sources from which the tests should be discovered
            </param>
            <param name="frequencyOfDiscoveredTestsEvent">
            Frequency of discovered test event. This is used for batching discovered tests.
            </param>
            <param name="discoveredTestEventTimeout">
            Timeout that triggers the discovered test event regardless of cache size.
            </param>
            <param name="runSettings">
            Run Settings for the discovery.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.TimeSpan,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria"/> class.
            </summary>
            <param name="sources">
            Sources from which the tests should be discovered
            </param>
            <param name="frequencyOfDiscoveredTestsEvent">
            Frequency of discovered test event. This is used for batching discovered tests.
            </param>
            <param name="discoveredTestEventTimeout">
            Timeout that triggers the discovered test event regardless of cache size.
            </param>
            <param name="runSettings">
            Run Settings for the discovery.
            </param>
            <param name="testSessionInfo">The test session info object.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.Sources">
            <summary>
            Gets the test Containers (e.g. DLL/EXE/artifacts to scan)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.Package">
            <summary>
            Gets the test Containers (e.g. .appx, .appxrecipie)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.AdapterSourceMap">
            <summary>
            Gets the test adapter and source map which would look like below:
            <code>
            { C:\temp\testAdapter1.dll : [ source1.dll, source2.dll ], C:\temp\testadapter2.dll : [ source3.dll, source2.dll ]
            </code>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.FrequencyOfDiscoveredTestsEvent">
            <summary>
            Gets the frequency of discovered test event.
            </summary>
            <remarks>
            Discovered test event will be raised after discovering these number of tests.
            Note that this event is raised asynchronously and the underlying discovery process is not
            paused during the listener invocation. So if the event handler, you try to query the
            next set of tests, you may get more than 'FrequencyOfDiscoveredTestsEvent'.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.DiscoveredTestEventTimeout">
            <summary>
            Gets the timeout that triggers the discovered test event regardless of cache size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.RunSettings">
            <summary>
            Gets the test settings used for the discovery request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.TestCaseFilter">
            <summary>
            Gets or sets the criteria for filtering test cases.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria.TestSessionInfo">
            <summary>
            Gets or sets the test session info object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveredTestsEventArgs">
            <summary>
            Event arguments used to notify the availability of new tests
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveredTestsEventArgs.DiscoveredTestCases">
            <summary>
            Tests discovered in this discovery request
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs">
            <summary>
            Event arguments used on completion of discovery
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.#ctor(System.Int64,System.Boolean)">
            <summary>
            Constructor for creating event args object
            </summary>
            <param name="totalTests">Total tests which got discovered</param>
            <param name="isAborted">Specifies if discovery has been aborted.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.TotalCount">
            <summary>
              Indicates the total tests which got discovered in this request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.IsAborted">
            <summary>
            Specifies if discovery has been aborted. If true TotalCount is also set to -1.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.Metrics">
            <summary>
            Metrics
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.FullyDiscoveredSources">
            <summary>
            Gets or sets the list of sources which were fully discovered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.PartiallyDiscoveredSources">
            <summary>
            Gets or sets the list of sources which were partially discovered (started discover tests, but then discovery aborted).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.SkippedDiscoveredSources">
            <summary>
             Gets or sets the list of sources that were skipped during discovery.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.NotDiscoveredSources">
            <summary>
            Gets or sets the list of sources which were not discovered at all.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs.DiscoveredExtensions">
            <summary>
            Gets or sets the collection of discovered extensions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryStartEventArgs">
            <summary>
            Event arguments used when test discovery starts
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryStartEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria)">
            <summary>
            Constructor for creating event args object
            </summary>
            <param name="discoveryCriteria"> Discovery criteria to be used for test discovery. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryStartEventArgs.DiscoveryCriteria">
            <summary>
            Discovery criteria to be used for test discovery
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCompleteEventArgs">
            <summary>
            Event arguments used to notify the caller about the status of the test session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCompleteEventArgs.TestSessionInfo">
            <summary>
            Gets or sets the test session info.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCompleteEventArgs.Metrics">
            <summary>
            Gets or sets the metrics.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs">
            <summary>
            Event arguments used to notify the caller about the status of the test session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs.#ctor">
            <summary>
            Creates an instance of the current class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo)">
             <summary>
             Creates an instance of the current class.
             </summary>
            
             <param name="testSessionInfo">The test session info.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs.TestSessionInfo">
            <summary>
            Gets or sets the test session info.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs.Metrics">
            <summary>
            Gets or sets the metrics.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs.IsStopped">
            <summary>
            Gets or sets a value indicating if the session was successfully stopped or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingCompleteEventArgs.#ctor(System.Boolean,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="isCanceled">Specifies whether the attachments processing is canceled.</param>
            <param name="error">Specifies the error encountered during the execution of the attachments processing.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingCompleteEventArgs.IsCanceled">
            <summary>
            Gets a value indicating whether the attachments processing is canceled or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingCompleteEventArgs.Error">
            <summary>
            Gets the error encountered during the attachments processing of the test runs. Null if there is no error.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingCompleteEventArgs.Metrics">
            <summary>
            Get or Sets the Metrics (used for telemetry)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingProgressEventArgs.#ctor(System.Int64,System.Collections.Generic.ICollection{System.Uri},System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="currentAttachmentProcessorIndex">Specifies current attachment processor index.</param>
            <param name="currentAttachmentProcessorUris">Specifies current processor Uris.</param>
            <param name="currentAttachmentProcessorProgress">Specifies current processor progress.</param>
            <param name="attachmentProcessorsCount">Specifies the overall number of processors.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingProgressEventArgs.CurrentAttachmentProcessorIndex">
            <summary>
            Gets a current attachment processor index.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingProgressEventArgs.CurrentAttachmentProcessorUris">
            <summary>
            Gets a current attachment processor URI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingProgressEventArgs.CurrentAttachmentProcessorProgress">
            <summary>
            Gets a current attachment processor progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingProgressEventArgs.AttachmentProcessorsCount">
            <summary>
            Gets the overall number of attachment processors.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs">
            <summary>
            The test run changed event args that provides the test results available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs"/> class.
            </summary>
            <param name="stats"> The stats. </param>
            <param name="newTestResults"> The new test results. </param>
            <param name="activeTests"> The active tests. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs.NewTestResults">
            <summary>
            Gets the new test results.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs.TestRunStatistics">
            <summary>
            Gets the test run statistics.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs.ActiveTests">
            <summary>
            Gets the active tests.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs">
            <summary>
            Event arguments used when a test run has completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics,System.Boolean,System.Boolean,System.Exception,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.TimeSpan)">
            <summary>
            Default constructor.
            </summary>
            <param name="stats">The final stats for the test run. This parameter is only set for communications between the test host and the clients (like VS)</param>
            <param name="isCanceled">Specifies whether the test run is canceled.</param>
            <param name="isAborted">Specifies whether the test run is aborted.</param>
            <param name="error">Specifies the error encountered during the execution of the test run.</param>
            <param name="attachmentSets">Attachment sets associated with the run.</param>
            <param name="elapsedTime">Time elapsed in just running tests</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics,System.Boolean,System.Boolean,System.Exception,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},System.TimeSpan)">
            <summary>
            Default constructor.
            </summary>
            <param name="stats">The final stats for the test run. This parameter is only set for communications between the test host and the clients (like VS)</param>
            <param name="isCanceled">Specifies whether the test run is canceled.</param>
            <param name="isAborted">Specifies whether the test run is aborted.</param>
            <param name="error">Specifies the error encountered during the execution of the test run.</param>
            <param name="attachmentSets">Attachment sets associated with the run.</param>
            <param name="InvokedDataCollectors">Invoked data collectors</param>
            <param name="elapsedTime">Time elapsed in just running tests</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.TestRunStatistics">
            <summary>
            Gets the statistics on the state of the test run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.IsCanceled">
            <summary>
            Gets a value indicating whether the test run is canceled or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.IsAborted">
            <summary>
            Gets a value indicating whether the test run is aborted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.Error">
            <summary>
            Gets the error encountered during the execution of the test run. Null if there is no error.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.AttachmentSets">
            <summary>
            Gets the attachment sets associated with the test run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.InvokedDataCollectors">
            <summary>
            Gets the invoked data collectors for the test session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.ElapsedTimeInRunningTests">
            <summary>
            Gets the time elapsed in just running the tests.
            Value is set to TimeSpan.Zero in case of any error.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.Metrics">
            <summary>
            Get or Sets the Metrics
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs.DiscoveredExtensions">
            <summary>
            Gets or sets the collection of discovered extensions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs">
            <summary>
            Event arguments used when test run starts
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria)">
            <summary>
            Constructor for creating event args object
            </summary>
            <param name="testRunCriteria"> Test run criteria to be used for test run. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs.TestRunCriteria">
            <summary>
            Test run criteria to be used for test run
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions">
            <summary>
            Filter options to be passed into the Test Platform during Discovery/Execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions.FilterRegEx">
            <summary>
            Gets or sets the regular expression that will be applied on the property before matching.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions.FilterRegExReplacement">
            <summary>
            Gets or sets the optional regular expression replacement string. When this property is set, <see cref="!:System.Text.RegularExpressions.Regex.Replace(string)"/>
            will be called upon property value instead of <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String)"/> before matching.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher">
            <summary>
            Interface defining contract for custom test host implementations
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher.IsDebug">
            <summary>
            Gets a value indicating whether this is a debug launcher.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher.LaunchTestHost(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <summary>
            Launches custom test host using the default test process start info
            </summary>
            <param name="defaultTestHostStartInfo">Default TestHost Process Info</param>
            <returns>Process id of the launched test host</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher.LaunchTestHost(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo,System.Threading.CancellationToken)">
            <summary>
            Launches custom test host using the default test process start info
            </summary>
            <param name="defaultTestHostStartInfo">Default TestHost Process Info</param>
            <param name="cancellationToken">The cancellation Token.</param>
            <returns>Process id of the launched test host</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher2">
            <summary>
            Interface defining contract for custom test host launcher implementation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher2.AttachDebuggerToProcess(System.Int32)">
            <summary>
            Attach debugger to already running custom test host process.
            </summary>
            <param name="pid">Process ID of the process to which the debugger should be attached.</param>
            <returns><see langword="true"/> if the debugger was successfully attached to the requested process, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher2.AttachDebuggerToProcess(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attach debugger to already running custom test host process.
            </summary>
            <param name="pid">Process ID of the process to which the debugger should be attached.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><see langword="true"/> if the debugger was successfully attached to the requested process, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher3.AttachDebuggerToProcess(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo,System.Threading.CancellationToken)">
            <summary>
            Attach debugger to already running custom test host process.
            </summary>
            <param name="attachDebuggerInfo">Process ID and target framework of the process to which the debugger should be attached.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><see langword="true"/> if the debugger was successfully attached to the requested process, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IBaseProxy">
            <summary>
            Provides basic functionality for the Proxy Operation Manager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IBaseProxy.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
             <summary>
             Updates the test process start info.
             </summary>
            
             <param name="testProcessStartInfo">The test process start info to be updated.</param>
            
             <returns>The updated test process start info.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest">
            <summary>
            IDiscoverTestsRequest returned after calling GetDiscoveredTestsAsync
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest.OnDiscoveryStart">
            <summary>
            Handler for notifying discovery process is started
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest.OnDiscoveryComplete">
            <summary>
            Handler for notifying discovery process is complete
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest.OnDiscoveredTests">
            <summary>
            Handler for notifying when newly found tests are available for UI to fetch.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest.OnDiscoveryMessage">
            <summary>
            Handler for receiving error during fetching/execution. This is used for when abnormal error
            occurs; equivalent of IRunMessageLogger in the current RockSteady core
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest.DiscoveryCriteria">
            <summary>
            Gets the discovery criterion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest.DiscoverAsync">
            <summary>
            Starts tests discovery async.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest.Abort">
            <summary>
            Aborts the discovery request
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler">
            <summary>
            Interface contract for handling internal test run events during run. This interface should have methods similar to <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler"/> <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler2"/>,
            but only the newest (most broad) version of each method, so that we only operate on the latest interface in the internals, and adapt on the edges.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Handle the TestRunCompletion event from a test engine
            </summary>
            <param name="testRunCompleteArgs">TestRunCompletion Data</param>
            <param name="lastChunkArgs">Last set of test results</param>
            <param name="runContextAttachments">Attachments of the test run</param>
            <param name="executorUris">ExecutorURIs of the adapters involved in test run</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler.HandleTestRunStatsChange(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs)">
            <summary>
            Handle a change in TestRun i.e. new testresults and stats
            </summary>
            <param name="testRunChangedArgs">TestRunChanged Data</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler.LaunchProcessWithDebuggerAttached(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <summary>
            Launches a process with a given process info under debugger
            Adapter get to call into this to launch any additional processes under debugger
            </summary>
            <param name="testProcessStartInfo">Process start info</param>
            <returns>ProcessId of the launched process</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler.AttachDebuggerToProcess(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo)">
            <summary>
            Attach debugger to an already running process.
            </summary>
            <param name="pid">Process ID of the process to which the debugger should be attached.</param>
            <returns><see langword="true"/> if the debugger was successfully attached to the requested process, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IMetricsCollection">
            <summary>
            This Interface Provides API's to Collect Metrics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IMetricsCollection.Add(System.String,System.Object)">
            <summary>
            Add Metric in the Metrics Cache
            </summary>
            <param name="metric">Metric Message</param>
            <param name="value">Value associated with Metric</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IMetricsCollection.Metrics">
            <summary>
            Get Metrics
            </summary>
            <value>Returns the Telemetry Data Points</value>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequest">
            <summary>
            Represents any request to discover or run tests.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequest.OnRawMessageReceived">
            <summary>
             Handler for receiving raw messages directly from host without any deserialization or morphing
             This is required if one wants to re-direct the message over the process boundary without any processing overhead
             All events should come as raw messages as well as actual serialized events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequest.WaitForCompletion(System.Int32)">
            <summary>
            Waits for the request to complete
            </summary>
            <param name="timeout">Time out</param>
            <returns>True if the request timeouts</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.RequestExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequest"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.RequestExtensions.WaitForCompletion(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequest)">
            <summary>
            Waits for the request to complete.
            </summary>
            <param name="request">Request to wait on.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData">
            <summary>
            Provide common services and data for a discovery/run request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData.MetricsCollection">
            <summary>
            Gets an instance of <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IMetricsCollection"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData.ProtocolConfig">
            <summary>
            Gets or sets the ProtocolConfig <see cref="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData.ProtocolConfig"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData.IsTelemetryOptedIn">
            <summary>
            Gets or sets a value indicating whether is telemetry opted in.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler">
            <summary>
            Interface contract for handling discovery events during test discovery operation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler.HandleDiscoveryComplete(System.Int64,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Boolean)">
            <summary>
            Dispatch DiscoveryComplete event to listeners.
            </summary>
            <param name="totalTests">Total number of tests discovered.</param>
            <param name="lastChunk">Last set of test cases discovered.</param>
            <param name="isAborted">True if the discovery operation is aborted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler.HandleDiscoveredTests(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Dispatch DiscoveredTest event to listeners.
            </summary>
            <param name="discoveredTestCases">Discovered test cases.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2">
            <summary>
            Interface contract for handling discovery events during test discovery operation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2.HandleDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Dispatch DiscoveryComplete event to listeners.
            </summary>
            <param name="discoveryCompleteEventArgs">Discovery Complete Event Args</param>
            <param name="lastChunk">Last set of test cases discovered.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2.HandleDiscoveredTests(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase})">
            <summary>
            Dispatch DiscoveredTest event to listeners.
            </summary>
            <param name="discoveredTestCases">Discovered  test cases.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatform">
            <summary>
            Defines the functionality of the test platform.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatform.UpdateExtensions(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
             <summary>
             Updates the extensions to be used by the test service.
             </summary>
            
             <param name="pathToAdditionalExtensions">
             Specifies the path to unit test extensions. If no additional extension is available,
             then specify null or empty list.
             </param>
             <param name="skipExtensionFilters">
             Flag indicating if we should skip the default adapters initialization.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatform.ClearExtensions">
            <summary>
            Clears the extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatform.CreateDiscoveryRequest(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions,System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
             <summary>
             Creates a discovery request.
             </summary>
            
             <param name="requestData">Providing common services and data for discovery.</param>
             <param name="discoveryCriteria">Specifies the discovery parameters.</param>
             <param name="options">Test platform options.</param>
            
             <returns>A DiscoveryRequest object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatform.CreateTestRunRequest(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions,System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
             <summary>
             Creates a test run request.
             </summary>
            
             <param name="requestData">Providing common services and data for execution.</param>
             <param name="testRunCriteria">Specifies the test run criteria.</param>
             <param name="options">Test platform options.</param>
            
             <returns>A RunRequest object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatform.StartTestSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler,System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
             <summary>
             Starts a test session.
             </summary>
            
             <param name="requestData">
             Providing common services and data for test session start.
             </param>
             <param name="criteria">Specifies the start test session criteria.</param>
             <param name="eventsHandler">Events handler for handling session events.</param>
            
             <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatformCapabilities">
            <summary>
            Basic metadata for ITestPlaform.
            </summary>
            <remarks>
            This interface is only public due to limitations in MEF which require metadata interfaces
            to be public.  This interface is not intended for external consumption.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatformCapabilities.TestPlatformType">
            <summary>
            Type of testPlatform
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunAttachmentsProcessingEventsHandler">
            <summary>
            Interface contract for handling test run attachments processing events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunAttachmentsProcessingEventsHandler.HandleTestRunAttachmentsProcessingComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingCompleteEventArgs,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet})">
            <summary>
            Dispatch TestRunAttachmentsProcessingComplete event to listeners.
            </summary>
            <param name="attachmentsProcessingCompleteEventArgs">AttachmentsProcessing Complete event args.</param>
            <param name="attachments">Last set of processed attachment sets.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunAttachmentsProcessingEventsHandler.HandleProcessedAttachmentsChunk(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet})">
            <summary>
            Dispatch ProcessedAttachmentsChunk event to listeners.
            </summary>
            <param name="attachments">Processed attachment sets.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunAttachmentsProcessingEventsHandler.HandleTestRunAttachmentsProcessingProgress(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingProgressEventArgs)">
            <summary>
            Dispatch TestRunAttachmentsProcessingProgress event to listeners.
            </summary>
            <param name="AttachmentsProcessingProgressEventArgs">AttachmentsProcessing Progress event args.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunConfiguration">
            <summary>
            Defines common test run configuration APIs
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunConfiguration.FrequencyOfRunStatsChangeEvent">
             <summary>
             Defines the frequency of run stats test event.
             </summary>
             <remarks>
             Run stats change event will be raised after completion of these number of tests.
            
             Note that this event is raised asynchronously and the underlying execution process is not
             paused during the listener invocation. So if the event handler, you try to query the
             next set of results, you may get more than 'FrequencyOfRunStatsChangeEvent'.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunConfiguration.HasSpecificTests">
            <summary>
            Returns whether the run is configured to run specific tests
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunConfiguration.HasSpecificSources">
            <summary>
            Returns whether the run is configured to run specific sources
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunConfiguration.Tests">
            <summary>
            The specific tests for this test run if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler">
            <summary>
            Interface contract for handling test run events during run operation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Handle the TestRunCompletion event from a test engine
            </summary>
            <param name="testRunCompleteArgs">TestRunCompletion Data</param>
            <param name="lastChunkArgs">Last set of test results</param>
            <param name="runContextAttachments">Attachments of the test run</param>
            <param name="executorUris">ExecutorURIs of the adapters involved in test run</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler.HandleTestRunStatsChange(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs)">
            <summary>
            Handle a change in TestRun i.e. new testresults and stats
            </summary>
            <param name="testRunChangedArgs">TestRunChanged Data</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler.LaunchProcessWithDebuggerAttached(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo)">
            <summary>
            Launches a process with a given process info under debugger
            Adapter get to call into this to launch any additional processes under debugger
            </summary>
            <param name="testProcessStartInfo">Process start info</param>
            <returns>ProcessId of the launched process</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler">
            <summary>
            Interface for handling generic message events during various operations
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler.HandleRawMessage(System.String)">
            <summary>
            Raw Message from the host directly
            </summary>
            <param name="rawMessage">raw message args from host</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler.HandleLogMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <summary>
            Handle a IMessageLogger message event from Adapter
            Whenever adapters call IMessageLogger.SendMessage, TestEngine notifies client with this event
            </summary>
            <param name="level">Message Level</param>
            <param name="message">string message</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler2">
            <summary>
            Interface contract for handling test run events during run operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler2.AttachDebuggerToProcess(System.Int32)">
            <summary>
            Attach debugger to an already running process.
            </summary>
            <param name="pid">Process ID of the process to which the debugger should be attached.</param>
            <returns><see langword="true"/> if the debugger was successfully attached to the requested process, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest">
            <summary>
            The request that a RunTests API returns.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.ExecuteAsync">
            <summary>
            Start the current RunTestAsync API call.
            </summary>
            <returns>Id of the executor process </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.CancelAsync">
            <summary>
             Cancel the current RunTestsAsync API call. This can be used when  making async RunTestsAsync call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.Abort">
            <summary>
             Aborts the test run execution process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.TestRunConfiguration">
            <summary>
            Specifies the test run criteria
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.State">
            <summary>
            State of the test run
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.OnRunStatsChange">
            <summary>
             Handler for notifying when test results came back from the agent!
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.OnRunStart">
            <summary>
             Handler for notifying test run started
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.OnRunCompletion">
            <summary>
             Handler for notifying test run is complete
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.TestRunMessage">
            <summary>
             Handler for receiving error during fetching/execution. This is used for when abnormal error
             occurs; equivalent of IRunMessageLogger in the current RockSteady core
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest.DataCollectionMessage">
            <summary>
             Handler for receiving data collection messages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics">
            <summary>
            Stats on the test run state
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics.Item(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            The number of tests that have the specified value of TestOutcome
            </summary>
            <param name="testOutcome"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics.Stats">
            <summary>
            TestOutcome - Test count map
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics.ExecutedTests">
            <summary>
            Number of tests that have been run.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler">
            <summary>
            Interface contract for handling test session events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler.HandleStartTestSessionComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCompleteEventArgs)">
             <summary>
             Dispatch StartTestSession complete event to listeners.
             </summary>
            
             <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler.HandleStopTestSessionComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs)">
             <summary>
             Dispatch StopTestSession complete event to listeners.
             </summary>
            
             <param name="eventArgs">The event args.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger">
            <summary>
            DO NOT use this to extend TestPlatform, it is public only because ITestPlatform is also public, and will be made internal later.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger.LogWarning(System.String)">
            <summary>
            Log warning message that will be shown to user.
            </summary>
            <param name="message">message string</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.CustomHostLaunchAckPayload">
            <summary>
            Class used to define the CustomHostLaunchAckPayload sent by the Vstest.console translation layers into design mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.CustomHostLaunchAckPayload.HostProcessId">
            <summary>
            ProcessId of the TestHost launched by Clients like IDE, LUT etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.CustomHostLaunchAckPayload.ErrorMessage">
            <summary>
            ErrorMessage, in cases where custom launch fails
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryRequestPayload">
            <summary>
            Class used to define the DiscoveryRequestPayload sent by the Vstest.console translation layers into design mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryRequestPayload.Sources">
            <summary>
            Settings used for the discovery request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryRequestPayload.RunSettings">
            <summary>
            Settings used for the discovery request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryRequestPayload.TestPlatformOptions">
            <summary>
            Gets or sets the test platform options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryRequestPayload.TestSessionInfo">
            <summary>
            Gets or sets the test session info.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.EditorAttachDebuggerAckPayload">
            <summary>
            Class used to define the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.EditorAttachDebuggerAckPayload"/> sent by the
            vstest.console translation layers into design mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.EditorAttachDebuggerAckPayload.Attached">
            <summary>
            A value indicating if the debugger has successfully attached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.EditorAttachDebuggerAckPayload.ErrorMessage">
            <summary>
            ErrorMessage, in cases where attaching the debugger fails.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionAckPayload">
            <summary>
            Class used to define the start test session ack payload sent by the design mode client
            back to the vstest.console translation layers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionAckPayload.EventArgs">
            <summary>
            Gets or sets the event args.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionPayload">
            <summary>
            Class used to define the start test session payload sent by the vstest.console translation
            layers into design mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionPayload.Sources">
            <summary>
            Gets or sets the sources used for starting the test session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionPayload.RunSettings">
            <summary>
            Gets or sets the run settings used for starting the test session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionPayload.IsDebuggingEnabled">
            <summary>
            Gets or sets a flag indicating if debugging is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionPayload.HasCustomHostLauncher">
            <summary>
            Gets or sets a flag indicating if a custom host launcher should be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionPayload.TestPlatformOptions">
            <summary>
            Gets or sets the test platform options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StopTestSessionAckPayload">
            <summary>
            Class used to define the stop test session ack payload sent by the design mode client
            back to the vstest.console translation layers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StopTestSessionAckPayload.EventArgs">
            <summary>
            Gets or sets the event args.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StopTestSessionPayload">
            <summary>
            Class used to define the stop test session payload sent by the vstest.console translation
            layers into design mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StopTestSessionPayload.TestSessionInfo">
            <summary>
            Gets or sets the test session info.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StopTestSessionPayload.CollectMetrics">
            <summary>
            Gets or sets a flag indicating if metrics should be collected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingPayload">
            <summary>
            Class used to define the TestRunAttachmentsProcessingPayload sent by the Vstest.console translation layers into design mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingPayload.Attachments">
            <summary>
            Collection of attachments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingPayload.InvokedDataCollectors">
            <summary>
            Collection of the invoked data collectors.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingPayload.RunSettings">
            <summary>
            Gets or sets the settings used for the test run request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingPayload.CollectMetrics">
            <summary>
             Gets or sets whether Metrics should be collected or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload">
            <summary>
            Class used to define the TestRunRequestPayload sent by the Vstest.console translation layers into design mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload.Sources">
            <summary>
            Gets or sets the sources for the test run request.
            </summary>
            <remarks>
            Making this a list instead of an IEnumerable because the json serializer fails to deserialize
            if a linq query outputs the IEnumerable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload.TestCases">
            <summary>
            Gets or sets the test cases for the test run request.
            </summary>
            <remarks>
            Making this a list instead of an IEnumerable because the json serializer fails to deserialize
            if a linq query outputs the IEnumerable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload.RunSettings">
            <summary>
            Gets or sets the settings used for the test run request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload.KeepAlive">
            <summary>
            Settings used for the Run request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload.DebuggingEnabled">
            <summary>
            Is Debugging enabled
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload.TestPlatformOptions">
            <summary>
            Gets or sets the testplatform options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload.TestSessionInfo">
            <summary>
            Gets or sets the test session info.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ProtocolConfig">
            <summary>
            Class for Protocol related information
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ProtocolConfig.Version">
            <summary>
            Get or Set the version of protocol
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria">
            <summary>
            Class used to define the start test session criteria.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria.Sources">
            <summary>
            Gets or sets the sources used for starting the test session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria.RunSettings">
            <summary>
            Gets or sets the run settings used for starting the test session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria.TestHostLauncher">
            <summary>
            Gets or sets the test host launcher used for starting the test session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions">
            <summary>
            Options to be passed into the Test Platform during Discovery/Execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions.TestCaseFilter">
             <summary>
             Gets or sets the filter criteria for test cases.
             </summary>
            
             <remarks>
             This is only used when running tests with sources.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions.FilterOptions">
             <summary>
             Gets or sets the filter options if there are any.
             </summary>
            
             <remarks>
             This will be valid only if TestCase filter is present.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions.CollectMetrics">
            <summary>
            Gets or sets whether metrics should be collected or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions.SkipDefaultAdapters">
            <summary>
            Gets or sets whether default adapters should be skipped or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria">
            <summary>
            Defines the test run criterion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether the execution process should be kept alive after the run is finished or not.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Boolean,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether the execution process should be kept alive after the run is finished or not.
             </param>
             <param name="testSettings">Settings used for this run.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Boolean,System.String,System.TimeSpan)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether the execution process should be kept alive after the run is finished or not.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Boolean,System.String,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether the execution process should be kept alive after the run is finished or not.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
             <param name="testHostLauncher">
             Test host launcher. If null then default will be used.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Boolean,System.String,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether the execution process should be kept alive after the run is finished or not.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
             <param name="testHostLauncher">
             Test host launcher. If null then default will be used.
             </param>
             <param name="testCaseFilter">Test case filter.</param>
             <param name="filterOptions">Filter options.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Boolean,System.String,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether the execution process should be kept alive after the run is finished or not.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
             <param name="testHostLauncher">
             Test host launcher. If null then default will be used.
             </param>
             <param name="testCaseFilter">Test case filter.</param>
             <param name="filterOptions">Filter options.</param>
             <param name="testSessionInfo">The test session info object.</param>
             <param name="debugEnabledForTestSession">
             Indicates if debugging should be enabled when we have test session info available.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             Create the TestRunCriteria for a test run.
             </summary>
            
             <param name="sources">Sources which contains tests that should be executed.</param>
             <param name="testRunCriteria">The test run criteria.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Int64,System.Boolean,System.String,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="adapterSourceMap">
             Sources which contains tests that should be executed.
             </param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether the execution process should be kept alive after the run is finished or not.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
             <param name="testHostLauncher">
             Test host launcher. If null then default will be used.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="tests">Tests which should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Int64,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="tests">Tests which should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether or not to keep the test executor process alive after run completion.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Int64,System.Boolean,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="tests">Tests which should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether or not to keep the test executor process alive after run completion.
             </param>
             <param name="testSettings">Settings used for this run.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Int64,System.Boolean,System.String,System.TimeSpan)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="tests">Tests which should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether or not to keep the test executor process alive after run completion.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="tests">Tests which should be executed.</param>
             <param name="baseTestRunCriteria">The base test run criteria.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Int64,System.Boolean,System.String,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="tests">Tests which should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether or not to keep the test executor process alive after run completion.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
             <param name="testHostLauncher">
             Test host launcher. If null then default will be used.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Int64,System.Boolean,System.String,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria"/> class.
             </summary>
            
             <param name="tests">Tests which should be executed.</param>
             <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
             <param name="keepAlive">
             Whether or not to keep the test executor process alive after run completion.
             </param>
             <param name="testSettings">Settings used for this run.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout that triggers sending results regardless of cache size.
             </param>
             <param name="testHostLauncher">
             Test host launcher. If null then default will be used.
             </param>
             <param name="testSessionInfo">The test session info object.</param>
             <param name="debugEnabledForTestSession">
             Indicates if debugging should be enabled when we have test session info available.
             </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.Sources">
            <summary>
            Gets the test containers (e.g. DLL/EXE/artifacts to scan).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.AdapterSourceMap">
            <summary>
            Gets the test adapter and source map which would look like below:
            <code>
            { C:\temp\testAdapter1.dll : [ source1.dll, source2.dll ], C:\temp\testadapter2.dll : [ source3.dll, source2.dll ]
            </code>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.Tests">
            <summary>
            Gets the tests that need to executed in this test run.
            This will be null if test run is created with specific test containers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.TestCaseFilter">
            <summary>
            Gets or sets the criteria for filtering test cases.
            </summary>
            <remarks>This is only for with sources.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.FilterOptions">
            <summary>
            Gets or sets the filter options.
            </summary>
            <remarks>This is only applicable when TestCaseFilter is present.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.TestSessionInfo">
            <summary>
            Gets or sets the test session info object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.DebugEnabledForTestSession">
            <summary>
            Gets or sets a flag indicating if debugging should be enabled when we have test session
            info available.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.HasSpecificTests">
            <summary>
            Gets a value indicating whether run criteria is based on specific tests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.HasSpecificSources">
            <summary>
            Gets a value indicating whether run criteria is based on specific sources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria">
            <summary>
            Defines the base test run criterion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria"/> class.
             </summary>
            
             <param name="runCriteria">Run criteria to clone.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria"/> class.
             </summary>
            
             <param name="frequencyOfRunStatsChangeEvent">
             Frequency of <c>TestRunChangedEvent</c>.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.#ctor(System.Int64,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria"/> class.
             </summary>
            
             <param name="frequencyOfRunStatsChangeEvent">
             Frequency of <c>TestRunChangedEvent</c>.
             </param>
             <param name="keepAlive">
             Specify if the test host process should be stay alive after run.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.#ctor(System.Int64,System.Boolean,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria"/> class.
             </summary>
            
             <param name="frequencyOfRunStatsChangeEvent">
             Frequency of <c>TestRunChangedEvent</c>.
             </param>
             <param name="keepAlive">
             Specify if the test host process should be stay alive after run.
             </param>
             <param name="testSettings">Test run settings.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.#ctor(System.Int64,System.Boolean,System.String,System.TimeSpan)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria"/> class.
             </summary>
            
             <param name="frequencyOfRunStatsChangeEvent">
             Frequency of <c>TestRunChangedEvent</c>.
             </param>
             <param name="keepAlive">
             Specify if the test host process should be stay alive after run.
             </param>
             <param name="testSettings">Test run settings.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout for a <c>TestRunChangedEvent</c>.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.#ctor(System.Int64,System.Boolean,System.String,System.TimeSpan,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria"/> class.
             </summary>
            
             <param name="frequencyOfRunStatsChangeEvent">
             Frequency of <c>TestRunChangedEvent</c>.
             </param>
             <param name="keepAlive">
             Specify if the test host process should be stay alive after run.
             </param>
             <param name="testSettings">Test run settings.</param>
             <param name="runStatsChangeEventTimeout">
             Timeout for a <c>TestRunChangedEvent</c>.
             </param>
             <param name="testHostLauncher">Test host launcher.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.KeepAlive">
            <summary>
            Gets a value indicating whether the test executor process should remain alive after
            run completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.TestRunSettings">
            <summary>
            Gets the settings used for this run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.TestHostLauncher">
            <summary>
            Gets the custom launcher for test executor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.FrequencyOfRunStatsChangeEvent">
             <summary>
             Gets the frequency of run stats test event.
             </summary>
            
             <remarks>
             Run stats change event will be raised after completion of these number of tests.
             Note that this event is raised asynchronously and the underlying execution process is not
             paused during the listener invocation. So if the event handler, you try to query the
             next set of results, you may get more than 'FrequencyOfRunStatsChangeEvent'.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.RunStatsChangeEventTimeout">
            <summary>
            Gets the timeout that triggers sending results regardless of cache size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState">
            <summary>
            States of the TestRun
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState.None">
            <summary>
            Status is not known
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState.Pending">
            <summary>
            The run is still being created.  No tests have started yet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState.InProgress">
            <summary>
            Tests are running.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState.Completed">
            <summary>
            All tests have completed or been skipped.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState.Canceled">
            <summary>
            Run is canceled and remaining tests have been aborted
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState.Aborted">
            <summary>
            Run is aborted
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics">
            <summary>
            Defines the test run stats header
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics"/> class.
            </summary>
            <remarks>This constructor doesn't perform any parameter validation, it is meant to be used for serialization."/></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics.#ctor(System.Collections.Generic.IDictionary{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome,System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics"/> class.
            </summary>
            <param name="stats"> The stats. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics.#ctor(System.Int64,System.Collections.Generic.IDictionary{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome,System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics"/> class.
            </summary>
            <param name="executedTests"> The executed tests. </param>
            <param name="stats"> The stats. </param>
            <remarks> This constructor is only needed to reconstruct the object during deserialization.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics.ExecutedTests">
            <summary>
            Gets or sets the number of tests that have been run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics.Stats">
            <summary>
            Gets the test stats which is the test outcome versus its state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics.Item(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Gets the number of tests with a specified outcome.
            </summary>
            <param name="testOutcome"> The test outcome. </param>
            <returns> The number of tests with this outcome. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo">
            <summary>
            Defines the test session info object to be passed around between vstest.console and
            vstest.console wrapper in order to identify the current session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo.#ctor">
            <summary>
            Creates an instance of the current class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo.Id">
            <summary>
            Gets the session id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo.GetHashCode">
             <summary>
             Calculates the hash code for the current object.
             </summary>
            
             <returns>An integer representing the computed hashcode value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo.Equals(System.Object)">
             <summary>
             Checks if the specified object is equal to the current instance.
             </summary>
            
             <param name="obj">The object to be checked.</param>
            
             <returns>True if the two objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo.Equals(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo)">
             <summary>
             Checks if the specified session is equal to the current instance.
             </summary>
            
             <param name="other">The session to be checked.</param>
            
             <returns>True if the two sessions are equal, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLogger">
            <summary>
            Interface implemented to log messages and results from tests.  A class that
            implements this interface will be available for use if it exports its type via
            MEF, and if its containing assembly is placed in the Extensions folder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLogger.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents,System.String)">
            <summary>
            Initializes the Test Logger.
            </summary>
            <param name="events">Events that can be registered for.</param>
            <param name="testRunDirectory">Test Run Directory</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLoggerWithParameters">
            <summary>
            This Interface extends ITestLogger and adds capability to pass
            parameters to loggers such as TfsPublisher.
            Currently it is marked for internal consumption (ex: TfsPublisher)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLoggerWithParameters.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes the Test Logger with given parameters.
            </summary>
            <param name="events">Events that can be registered for.</param>
            <param name="parameters">Collection of parameters</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents">
            <summary>
            Exposes events that Test Loggers can register for.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.TestRunMessage">
            <summary>
            Raised when a test message is received.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.TestRunStart">
            <summary>
            Raised when a test run starts.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.TestResult">
            <summary>
            Raised when a test result is received.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.TestRunComplete">
            <summary>
            Raised when a test run is complete.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.DiscoveryStart">
            <summary>
            Raised when test discovery starts
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.DiscoveryMessage">
            <summary>
            Raised when a discovery message is received.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.DiscoveredTests">
            <summary>
            Raised when discovered tests are received
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents.DiscoveryComplete">
            <summary>
            Raised when test discovery is complete
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestHostConnectionInfo">
            <summary>
            Details of EndPoint address for connection b/w test runtime, test runner
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestHostConnectionInfo.Endpoint">
            <summary>
            Endpoint where the service is hosted, This endpoint is specific to Transport
            e.g. 127.0.0.0:8080 for sockets
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestHostConnectionInfo.Role">
            <summary>
            Gets or sets the role played by TestRuntime during communication.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestHostConnectionInfo.Transport">
            <summary>
            Gets or sets the transport protocol supported by test runtime
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ConnectionRole">
            <summary>
            Specifies the role of application, whether as host or client
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.ConnectionRole.Host">
            <summary>
            Act as server host
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.ConnectionRole.Client">
            <summary>
            Act as client
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Transport">
            <summary>
            Specifies the underneath Transport channel to be used
            E.g. For UWP/Desktop it is Sockets, for Android it could be SSH
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Transport.Sockets">
            <summary>
            Act as server host
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo">
            <summary>
            Connection information for a test host to communicate with test runner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo.Port">
            <summary>
            Gets or sets the port for runner to connect to
            Needed for backward compatibility
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo.ConnectionInfo">
            <summary>
            Gets or sets the details of endpoint by test runner for host communication.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo.LogFile">
            <summary>
            Gets or sets the diagnostics log file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo.TraceLevel">
            <summary>
            Gets or sets the trace level of logs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo.RunnerProcessId">
            <summary>
            Gets or sets the runner process id.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfoExtensions.ToCommandLineOptions(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo)">
            <summary>
            Creates a default command line options string from <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo"/>.
            </summary>
            <param name="connectionInfo">Connection info for the test host.</param>
            <returns>Command line option string.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants">
            <summary>
            Defines the defaults/constants used across different components.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.InProcDataCollectionRunSettingsName">
            <summary>
            The in process data collection run settings name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.InProcDataCollectorSettingName">
            <summary>
            The in process data collector setting name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.InProcDataCollectorsSettingName">
            <summary>
            The in process data collectors setting name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.BlameCollectDumpKey">
            <summary>
            Name of collect dump option for blame.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.BlameCollectMonitorPostMortemDebuggerKey">
            <summary>
            Name of collect dump option for blame.
            The internal visibility is because the new feature is not publicly exposed yet and so we can retire it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.BlameCollectHangDumpKey">
            <summary>
            Name of collect dump option for blame.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.CollectDumpOnTestSessionHang">
            <summary>
            Name of collect hang dump option for blame.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DataCollectionRunSettingsName">
            <summary>
            Name of data collection settings node in RunSettings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerRunSettingsName">
            <summary>
            Name of logger run settings node in RunSettings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggersSettingName">
            <summary>
            Name of loggers node in RunSettings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerSettingName">
            <summary>
            Name of logger node in RunSettings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerFriendlyName">
            <summary>
            Name of friendlyName attribute of logger node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerFriendlyNameLower">
            <summary>
            Name of friendlyName attribute of logger node in lower case.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerUriName">
            <summary>
            Name of uri attribute of logger node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerAssemblyQualifiedName">
            <summary>
            Name of assemblyQualifiedName attribute of logger node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerAssemblyQualifiedNameLower">
            <summary>
            Name of assemblyQualifiedName attribute of logger node in lower case.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerCodeBase">
            <summary>
            Name of codeBase attribute of logger node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerCodeBaseLower">
            <summary>
            Name of codeBase attribute of logger node in lower case.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerEnabledName">
            <summary>
            Name of enabled attribute of logger node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerConfigurationName">
            <summary>
            Name of configuration element of logger node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.LoggerConfigurationNameLower">
            <summary>
            Name of configuration element of logger node in lower case.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.TreatNoTestsAsError">
            <summary>
            Name of TreatNoTestsAsError parameter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.RunConfigurationSettingsName">
            <summary>
            Name of RunConfiguration settings node in RunSettings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.UnspecifiedAdapterPath">
            <summary>
            Default testrunner if testrunner is not specified
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.TestRunParametersName">
            <summary>
            Pattern used to find test run parameter node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.UnitTestExtensionType">
            <summary>
            Type of the unit test extension. (Extension author will use this name while authoring their Vsix)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.TraceLogMaxFileSizeInKB">
            <summary>
            Maximum size of the trace log file (in kilobytes).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DefaultFramework">
            <summary>
            Adding this for compatibility
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DefaultCpuCount">
            <summary>
            Default option for parallel execution
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DefaultBatchSize">
            <summary>
            The default batch size.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DefaultProtocolConfig">
            <summary>
            The default protocol version
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.MinimumProtocolVersionWithDebugSupport">
            <summary>
            The minimum protocol version that has debug support
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.MinimumProtocolVersionWithCancelDiscoveryEventHandlerSupport">
            <summary>
            The minimum protocol version that has debug support
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.ResultsDirectoryName">
            <summary>
            Name of the results directory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DefaultResultsDirectory">
            <summary>
            Default results directory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DefaultTreatTestAdapterErrorsAsWarnings">
            <summary>
            Default treatment of error from test adapters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.DefaultExecutionThreadApartmentState">
            <summary>
            The default execution thread apartment state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants.TargetFrameworkAttributeFullName">
            <summary>
             Constants for detecting .net framework.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DefaultLoggerParameterNames">
            <summary>
            Default parameters to be passed onto all loggers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorAttachmentProcessorAttribute">
            <summary>
            Registers an attachment processor for a data collector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorAttachmentProcessorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorAttachmentProcessorAttribute"/> class.
            </summary>
            <param name="type">
            The type of the attachement data processor.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorAttachmentProcessorAttribute.Type">
            <summary>
            Gets the data collector type uri.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorFriendlyNameAttribute">
            <summary>
            Provides a friendly name for the data collector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorFriendlyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorFriendlyNameAttribute"/> class.
            </summary>
            <param name="friendlyName">
            The friendly name.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorFriendlyNameAttribute.FriendlyName">
            <summary>
            Gets the friendly name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorTypeUriAttribute">
            <summary>
            Provides unique identification of a data collector in the form of a URI.
            Recommended format: 'datacollector://Company/Product/Version'
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorTypeUriAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorTypeUriAttribute"/> class.
            </summary>
            <param name="typeUri">
            The type uri.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorTypeUriAttribute.TypeUri">
            <summary>
            Gets the data collector type uri.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorMessageLevel">
            <summary>
            Severity levels at which a DataCollectionTextMessage can be logged.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileHelper.IsValidFileName(System.String,System.String@)">
            <summary>
            Determines if a file name has invalid characters.
            </summary>
            <param name="fileName">File name to check.</param>
            <param name="invalidCharacters">Invalid characters which were found in the file name.</param>
            <returns>True if the file name is valid and false if the filename contains invalid characters.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileHelper.IsReservedFileName(System.String)">
            <summary>
            Returns true if the file name specified is Windows reserved file name.
            </summary>
            <param name="fileName">The name of the file. Note: only a file name, does not expect to contain directory separators.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId">
            <summary>
            Wrapper class for a request ID that can be used for messages or events for identification
            purposes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.Empty">
            <summary>
            A request ID with an empty GUID
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.#ctor">
            <summary>
            Initializes the instance by creating a new GUID
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.#ctor(System.Guid)">
            <summary>
            Initializes the instance with the provided GUID
            </summary>
            <param name="id">The GUID to use as the underlying ID</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.Equals(System.Object)">
            <summary>
            Compares this instance with the provided object for value equality
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.GetHashCode">
            <summary>
            Gets a hash code for this instance
            </summary>
            <returns>The underlying GUID's hash code</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.ToString">
            <summary>
            Converts the instance to a string in lower-case registry format
            </summary>
            <returns>A lower-case string in registry format representing the underlying GUID</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.Equals(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId)">
            <summary>
            Compares this instance with the provided request ID for value equality
            </summary>
            <param name="other">The request ID to compare to</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.CompareTo(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId)">
            <summary>
            Compares this instance with the provided request ID
            </summary>
            <param name="other">The request ID to compare to</param>
            <returns>An indication of the two request IDs' relative values</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.CompareTo(System.Object)">
            <summary>
            Compares this instance with the provided object
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>An indication of the two objects' relative values</returns>
            <exception cref="T:System.ArgumentException">
            'obj' is not null and not an instance of <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId"/>
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.op_Equality(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId)">
            <summary>
            Compares the two request IDs for value equality
            </summary>
            <param name="left">The left-hand request ID</param>
            <param name="right">The right-hand request ID</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.op_Inequality(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId)">
            <summary>
            Compares two request IDs for value inequality
            </summary>
            <param name="left">The left-hand request ID</param>
            <param name="right">The right-hand request ID</param>
            <returns>True if unequal, false otherwise</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId.Id">
            <summary>
            Gets the underlying GUID that represents the request ID
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionId">
            <summary>
            Class identifying a session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseFailureType">
            <summary>
            Type of test case failure which occurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestExecId">
            <summary>
            Class identifying test execution id.
            Execution ID is assigned to test at run creation time and is guaranteed to be unique within that run.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext">
            <summary>
            Class representing the context in which data collection occurs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Constructs DataCollection Context for in process data collectors
            </summary>
            <param name="testCase">test case to identify the context</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionId)">
            <summary>
            Constructs a DataCollectionContext indicating that there is a session,
            but no executing test, in context.
            </summary>
            <param name="sessionId">The session under which the data collection occurs.  Cannot be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionId,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestExecId)">
            <summary>
            Constructs a DataCollectionContext indicating that there is a session and an executing test,
            but no test step, in context.
            </summary>
            <param name="sessionId">The session under which the data collection occurs.  Cannot be null.</param>
            <param name="testExecId">The test execution under which the data collection occurs,
            or null if no executing test case is in context</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext.TestCase">
            <summary>
            Gets test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext.SessionId">
            <summary>
            Identifies the session under which the data collection occurs.  Will not be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext.TestExecId">
            <summary>
            Identifies the test execution under which the data collection occurs,
            or null if no such test exists.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext.HasTestCase">
            <summary>
            Returns true if there is an executing test case associated with this context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext">
            <summary>
            Encapsulates the context of the environment a data collector is being hosted in.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext.#ctor">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext)">
            <summary>
            Initializes with the DataCollectionContext
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext.CreateForLocalEnvironment">
            <summary>
            Creates an environment context for a local (hosted) agent and controller
            </summary>
            <returns>An environment context for a local (hosted) agent and controller</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext.CreateForLocalEnvironment(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext)">
            <summary>
            Creates an environment context for a local (hosted) agent and controller
            </summary>
            <param name="sessionDataCollectionContext">Session level data collection context.</param>
            <returns>An environment context for a local (hosted) agent and controller</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext.SessionDataCollectionContext">
            <summary>
            DataCollectionContext for the session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger">
            <summary>
            Class used by data collectors to send messages to the client (e.g. Manual Test Runner, Visual Studio IDE, MSTest).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger.#ctor">
            <summary>
            Constructs a DataCollectionLogger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger.LogError(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="context">The context in which the message is being sent.</param>
            <param name="text">The error text.  Cannot be null.</param>
            <remarks>
            When a Data Collector invokes this method, Client would get called on OnCollectionError( ) with a CollectionErrorMessageEventArgs.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger.LogError(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Exception)">
            <summary>
            Logs an error message for an exception.
            </summary>
            <param name="context">The context in which the message is being sent.</param>
            <param name="exception">The exception.  Cannot be null.</param>
            <remarks>
            When a Data Collector invokes this method, Client would get called on OnCollectionError( ) with a CollectionErrorMessageEventArgs.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger.LogError(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,System.Exception)">
            <summary>
            Logs an error message for an exception.
            </summary>
            <param name="context">The context in which the message is being sent.</param>
            <param name="text">Text explaining the exception.  Cannot be null.</param>
            <param name="exception">The exception.  Cannot be null.</param>
            <remarks>
            When a Data Collector invokes this method, Client would get called on OnCollectionError( ) with a CollectionErrorMessageEventArgs.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger.LogWarning(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String)">
            <summary>
            Logs a warning.
            </summary>
            <param name="context">The context in which the message is being sent.</param>
            <param name="text">The warning text.  Cannot be null.</param>
            <remarks>
            When a Data Collector invokes this method, Client would get called on OnCollectionWarning( ) with a CollectionWarningMessageEventArgs.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger.LogException(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Exception,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorMessageLevel)">
            <summary>
            Logs and given exception to the client.
            </summary>
            <param name="context"></param>
            <param name="ex">The exception to be logged</param>
            <param name="level"> Is the exception at warning level or error level.</param>
            <remarks>
            When a Data Collector invokes this method, Client would get called on OnCollectionException( ) with a CollectionExceptionMessageEventArgs.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink">
            <summary>
            Class used by data collectors to send data to up-stream components
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink"/> class.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink.SendFileCompleted">
            <summary>
            Called when sending of a file has completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink.SendFileAsync(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,System.Boolean)">
            <summary>
            Sends a file to up-stream components.
            </summary>
            <param name="context">The context in which the file is being sent.  Cannot be null.</param>
            <param name="path">the path to the file on the local file system</param>
            <param name="deleteFile">True to automatically have the file removed after sending it.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink.SendFileAsync(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,System.String,System.Boolean)">
            <summary>
            Sends a file to up-stream components.
            </summary>
            <param name="context">The context in which the file is being sent.  Cannot be null.</param>
            <param name="path">the path to the file on the local file system</param>
            <param name="description">A short description of the data being sent.</param>
            <param name="deleteFile">True to automatically have the file removed after sending it.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink.SendFileAsync(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation)">
            <summary>
            Sends a file to up-stream components
            </summary>
            <param name="fileTransferInformation">Information about the file to be transferred.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector">
            <summary>
            Interface for data collector add-ins
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector.Initialize(System.Xml.XmlElement,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext)">
            <summary>
            Initializes the data collector
            </summary>
            <param name="configurationElement">
            The XML element containing configuration information for the data collector. Can be
            null if the add-in does not have any configuration information.
            </param>
            <param name="events">
            Object containing the execution events the data collector can register for
            </param>
            <param name="dataSink">The sink used by the data collector to send its data</param>
            <param name="logger">
            Used by the data collector to send warnings, errors, or other messages
            </param>
            <param name="environmentContext">Provides contextual information about the agent environment</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector.Dispose">
            <summary>
            Disposes the data collector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector.Dispose(System.Boolean)">
            <summary>
            Called to perform cleanup when the instance is being disposed.
            </summary>
            <param name="disposing">True when being called from the Dispose method and false when being called during finalization.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs">
            <summary>
            Base class for all execution event arguments
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs.#ctor">
            <summary>
            Default constructor added for serialization/deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext)">
            <summary>
            Initializes the instance by storing the given information
            </summary>
            <param name="context">Context information for the event</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs.Context">
            <summary>
            Gets the context information for the event
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents">
            <summary>
            Class defining execution events that will be registered for by collectors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents"/> class.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents.TestHostLaunched">
            <summary>
            Raised when test host initialized
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents.SessionStart">
            <summary>
            Raised when a session is starting
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents.SessionEnd">
            <summary>
            Raised when a session is ending
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents.TestCaseStart">
            <summary>
            Raised when a test case is starting
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents.TestCaseEnd">
            <summary>
            Raised when a test case is ending
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs">
            <summary>
            Session Start event arguments
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs"/> class.
            </summary>
            <remarks>
            Default constructor with empty properties and default DataCollectionContext.
            DataCollectionContext with empty session signifies that is it irrelevant in the current context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs"/> class.
            </summary>
            <remarks>
            constructor with properties and default DataCollectionContext.
            DataCollectionContext with empty session signifies that is it irrelevant in the current context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs"/> class.
            </summary>
            <param name="context">
            Context information for the session
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs.GetProperties">
            <summary>
            Gets session start properties enumerator
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs.GetPropertyValue``1(System.String)">
            <summary>
            Gets property value
            </summary>
            <param name="property">
            Property name
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs.GetPropertyValue(System.String)">
            <summary>
            Gets property value
            </summary>
            <param name="property">
            Property name
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionEndEventArgs">
            <summary>
            Session End event arguments
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionEndEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionEndEventArgs"/> class.
            </summary>
            <remarks>
            Default constructor with default DataCollectionContext.
            DataCollectionContext with empty session signifies that is it irrelevant in the current context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionEndEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionEndEventArgs"/> class.
            </summary>
            <param name="context">
            Context information for the session
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs">
            <summary>
            Base class for all test case event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs.#ctor">
            <summary>
            Default constructor added for serialization/deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Guid,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs"/> class.
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testCaseId">
            The test case ID
            </param>
            <param name="testCaseName">
            The test case name
            </param>
            <param name="isChildTestCase">
            True if this is a child test case, false if this is a top-level test case.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs"/> class.
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testElement">
            The test element of the test that this event is for.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs.TestCaseId">
            <summary>
            Gets the test case ID
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs.TestCaseName">
            <summary>
            Gets the test case name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs.IsChildTestCase">
            <summary>
            Gets a value indicating whether this is a child test case, false if this is a top-level test case
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs.TestElement">
            <summary>
            Gets test element of the test this event is for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs">
            <summary>
            Test Case Start event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs.#ctor">
            <summary>
            Default constructor for serialization/deserialization
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs"/> class with default datacollection context.
            </summary>
            <param name="testElement">
            The test element.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs"/> class.
            Initializes the instance by storing the given information.
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testElement">
            The test element of the test that this event is for.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Guid,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs"/> class.
            Initializes the instance by storing the given information
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testCaseId">
            The test case ID
            </param>
            <param name="testCaseName">
            The test case name
            </param>
            <param name="isChildTestCase">
            True if this is a child test case, false if this is a top-level test case
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs">
            <summary>
            Test Case End event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs.#ctor">
            <summary>
            Default constructor added for serialization/deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs"/> class with default data collection context.
            </summary>
            <param name="testElement">
            The test element.
            </param>
            <param name="testOutcome">
            The test outcome.
            </param>
            <remarks>
            Default constructor with default DataCollectionContext.
            DataCollectionContext with empty session signifies that is it irrelevant in the current context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs"/> class.
            Initializes the instance by storing the given information.
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testElement">
            The test element of the test that this event is for.
            </param>
            <param name="testOutcome">
            The outcome of the test case.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Guid,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs"/> class.
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testCaseId">
            The test case ID
            </param>
            <param name="testCaseName">
            The test case name
            </param>
            <param name="isChildTestCase">
            True if this is a child test case, false if this is a top-level test case
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Guid,System.String,System.Boolean,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs"/> class.
            Initializes the instance by storing the given information
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testCaseId">
            The test case ID
            </param>
            <param name="testCaseName">
            The test case name
            </param>
            <param name="isChildTestCase">
            True if this is a child test case, false if this is a top-level test case
            </param>
            <param name="testOutcome">
            The outcome of the test case.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs.TestOutcome">
            <summary>
            Gets the outcome of the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs">
            <summary>
            Test Case Result event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs.#ctor">
            <summary>
            Default constructor for serialization/deserialization
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs"/> class with default data collection context.
            </summary>
            <param name="testResult">
            The test result.
            </param>
            <remarks>
            Default constructor with default DataCollectionContext.
            DataCollectionContext with empty session signifies that is it irrelevant in the current context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs"/> class.
            Initializes the instance by storing the given information.
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testResult">
            The test Result.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Guid,System.String,System.Boolean,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs"/> class.
            Initializes the instance by storing the given information
            </summary>
            <param name="context">
            Context information for the test case
            </param>
            <param name="testCaseId">
            The test case ID
            </param>
            <param name="testCaseName">
            The test case name
            </param>
            <param name="isChildTestCase">
            True if this is a child test case, false if this is a top-level test case
            </param>
            <param name="testResult">
            The test Result.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs.TestResult">
            <summary>
            Gets the outcome of the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestHostLaunchedEventArgs">
            <summary>
            Session End event arguments
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestHostLaunchedEventArgs.TestHostProcessId">
            <summary>
            Process id of the test host
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestHostLaunchedEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestHostLaunchedEventArgs"/> class.
            </summary>
            <param name="context">
            Data collection context
            </param>
            <param name="processId">
            Process id of test host
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectionSink">
            <summary>
            Class used by data collectors to send data to up-stream components
            (agent, controller, client, etc).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectionSink.SendData(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,System.String)">
            <summary>
            The send data will send the data collection data to upstream applications.
            Key will be set as TestProperty in TestResult and value as corresponding value.
            </summary>
            <param name="dataCollectionContext">
            The data collection context.
            </param>
            <param name="key">
            The key should be unique for a data collector.
            </param>
            <param name="value">
            The value should be a string or an object serialized into a JSON string.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachmentProcessor">
            <summary>
            Interface for data collectors add-ins that choose to reprocess generated attachments
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachmentProcessor.GetExtensionUris">
            <summary>
            Gets the attachments Uris, which are handled by attachment processor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachmentProcessor.SupportsIncrementalProcessing">
             <summary>
             Indicates whether attachment processor is supporting incremental processing of attachments
             </summary>
             <remarks>
             `SupportsIncrementalProcessing` should indicate if attachment processor is supporting incremental processing of attachments. It means that `ProcessAttachmentSetsAsync` should be [associative](https://en.wikipedia.org/wiki/Associative_property).
             By default `SupportsIncrementalProcessing` should be `False`, unless processing can take longer time and it's beneficial to start the process as soon as possible.
            
             If `SupportsIncrementalProcessing` is `True` Test Platform may try to speed up whole process by reprocessing data collector attachments as soon as possible when any two test executions are done.For example let's assume we have 5 test executions which are generating 5 data collector attachments: `a1`, `a2`, `a3`, `a4` and `a5`. Test platform could perform invocations:
             * `var result1 = await ProcessAttachmentSetsAsync([a1, a2, a3], ...);` when first 3 executions are done
             * `var result2 = await ProcessAttachmentSetsAsync(result1.Concat([a4]), ...);` when 4th execution is done
             * `var finalResult = await ProcessAttachmentSetsAsync(result2.Concat([a5]), ...);` when last test execution is done
            
             If `SupportsIncrementalProcessing` is `False` then Test Platform will wait for all test executions to finish and call `ProcessAttachmentSetsAsync` only once:
             * `var finalResult = await ProcessAttachmentSetsAsync([a1, a2, a3, a4, a5], ...);`
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachmentProcessor.ProcessAttachmentSetsAsync(System.Xml.XmlElement,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.IProgress{System.Int32},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,System.Threading.CancellationToken)">
            <summary>
            Reprocess attachments generated by independent test executions
            </summary>
            <param name="configurationElement">Configuration of the attachment processor. Will be the same as the data collector that registers it.</param>
            <param name="attachments">Attachments to be processed</param>
            <param name="progressReporter">Progress reporter. Accepts integers from 0 to 100</param>
            <param name="logger">Message logger</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Attachments after reprocessing</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachments">
            <summary>
            Interface for data collectors add-ins that choose to handle attachment(s) generated
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachments.HandleDataCollectionAttachmentSets(System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet})">
            <summary>
            Gets the attachment set after Test Run Session
            </summary>
            <returns>Gets the attachment set after Test Run Session</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachments.GetExtensionUri">
            <summary>
            Gets the attachment Uri, which is handled by current Collector
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.ITestExecutionEnvironmentSpecifier">
            <summary>
            Interface for data collectors add-ins that choose to specify some information about how the test execution environment
            should be set up
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.ITestExecutionEnvironmentSpecifier.GetTestExecutionEnvironmentVariables">
            <summary>
            Gets environment variables that should be set in the test execution environment
            </summary>
            <returns>Environment variables that should be set in the test execution environment</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation">
            <summary>
            Collects the required and optional information needed for requesting a file transfer from a data collector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation"/> class.
            </summary>
            <param name="context">
            The data collection context for the transfer.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation.Context">
            <summary>
            Gets the data collection context the transfer will be associated with.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation.Description">
            <summary>
            Gets or sets a short description of the data being sent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation.UserToken">
            <summary>
            Gets or sets the token which will be included with the callback to identify this file transfer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation.RequestId">
            <summary>
            Gets or sets the ID of the request that this file should be associated with. This is used
            for sending transient data which will be associated only with this
            data request and not the session or test cases that are currently running.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation.PerformCleanup">
            <summary>
            Gets a value indicating whether cleanup should be performed after transferring the resource. This
            can be known by different names in the derived classes so it is protected internal
            so that we can refer to it in a consistent way.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation.FileName">
            <summary>
            Gets the name of the file to use on the client machine. This
            can be known by different names in the derived classes so it is protected internal
            so that we can refer to it in a consistent way.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation">
            <summary>
            Represents required and optional information needed for requesting a file transfer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation"/> class.
            </summary>
            <param name="context">
            The context in which the file is being sent.  Cannot be null.
            </param>
            <param name="path">
            The path to the file on the local file system
            </param>
            <param name="deleteFile">
            True to automatically have the file removed after sending it.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,System.Boolean,Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation"/> class.
            </summary>
            <param name="context">
            The context in which the file is being sent.  Cannot be null.
            </param>
            <param name="path">
            The path to the file on the local file system
            </param>
            <param name="deleteFile">
            True to automatically have the file removed after sending it.
            </param>
            <param name="fileHelper">
            The file Helper.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation.Path">
            <summary>
            Gets the path to the file on the local file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation.PerformCleanup">
            <summary>
            Indicates if cleanup should be performed after transferring the resource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation.FileName">
            <summary>
            The name of the file to use on the client machine.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings">
            <summary>
            The in procedure data collection run settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings"/> class.
            </summary>
            <param name="dataCollectionRootName">
            The data collection root name.
            </param>
            <param name="dataCollectionsName">
            The data collections name.
            </param>
            <param name="dataCollectorName">
            The data collector name.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings.DataCollectorSettingsList">
            <summary>
            Gets the in procedure data collector settings list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings.IsCollectionEnabled">
            <summary>
            Gets a value indicating whether is in procedure data collection enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings.ToXml">
            <summary>
            The to xml.
            </summary>
            <returns>
            The <see cref="T:System.Xml.XmlElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings.FromXml(System.Xml.XmlReader)">
            <summary>
            The from xml.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings"/>.
            </returns>
            <exception cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException">
            Settings exception
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings.ReadListElementFromXml(System.Xml.XmlReader,System.String)">
            <summary>
            The read list element from xml.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The <see cref="!:List"/>.
            </returns>
            <exception cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException">
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings">
            <summary>
            The in procedure data collector settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.Uri">
            <summary>
            Gets or sets the uri.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.AssemblyQualifiedName">
            <summary>
            Gets or sets the assembly qualified name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.FriendlyName">
            <summary>
            Gets or sets the friendly name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.IsEnabled">
            <summary>
            Gets or sets a value indicating whether is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.CodeBase">
            <summary>
            Gets or sets value CodeBase of collector DLL. The syntax is same as Code Base in AssemblyName class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.ToXml">
            <summary>
            The to xml.
            </summary>
            <returns>
            The <see cref="T:System.Xml.XmlElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.ToXml(System.String)">
            <summary>
            The to xml.
            </summary>
            <param name="dataCollectorName">
            The data collector name.
            </param>
            <returns>
            The <see cref="T:System.Xml.XmlElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings.FromXml(System.Xml.XmlReader)">
            <summary>
            The from xml.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The <see cref="!:InProcDataCollectorSettings"/>.
            </returns>
            <exception cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException">
            Settings exception
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.InProcDataCollectionArgs">
            <summary>
            The InProcDataCollectionArgs interface.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseEndArgs">
            <summary>
            The test case end args.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseEndArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseEndArgs"/> class.
            </summary>
            <param name="dataCollectionContext">
            The data Collection Context.
            </param>
            <param name="outcome">
            The outcome.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseEndArgs.TestOutcome">
            <summary>
            Gets the outcome.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseEndArgs.DataCollectionContext">
            <summary>
            Gets the data collection context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseStartArgs">
            <summary>
            The test case start args.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseStartArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseStartArgs"/> class.
            </summary>
            <param name="testCase">
            The test case.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseStartArgs.TestCase">
            <summary>
            Gets the test case.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionEndArgs">
            <summary>
            The test session end args.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs">
            <summary>
            The test session start args.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs"/> class.
            </summary>
            <param name="properties">
            Properties.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs"/> class.
            </summary>
            <param name="configuration">
            The configuration.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs.GetProperties">
            <summary>
            Gets session start properties enumerator
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs.GetPropertyValue``1(System.String)">
            <summary>
            Gets property value
            </summary>
            <param name="property">
            Property name
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs.GetPropertyValue(System.String)">
            <summary>
            Gets property value
            </summary>
            <param name="property">
            Property name
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.InProcDataCollector.InProcDataCollection">
            <summary>
            Listener interface for external exe from test host
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InProcDataCollector.InProcDataCollection.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectionSink)">
            <summary>
            Initializes the In Process DataCollection with the DataCollectionSink
            </summary>
            <param name="dataCollectionSink">data collection sink object</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InProcDataCollector.InProcDataCollection.TestSessionStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs)">
            <summary>
            Called when test session starts
            </summary>
            <param name="testSessionStartArgs">
            The test Session Start Args.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InProcDataCollector.InProcDataCollection.TestCaseStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseStartArgs)">
            <summary>
            Called when test case starts
            </summary>
            <param name="testCaseStartArgs">
            Test Case start args
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InProcDataCollector.InProcDataCollection.TestCaseEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseEndArgs)">
            <summary>
            Called when test case end
            </summary>
            <param name="testCaseEndArgs">
            The test Case End Args.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InProcDataCollector.InProcDataCollection.TestSessionEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionEndArgs)">
            <summary>
            Called when test session end
            </summary>
            <param name="testSessionEndArgs">
            The test Session End Args.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DefaultExecutorUriAttribute">
            <summary>
            This attribute is applied on the discoverers to inform the framework about their default executor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DefaultExecutorUriAttribute.#ctor(System.String)">
            <summary>
            Initializes with the Uri of the executor.
            </summary>
            <param name="defaultExecutorUri">The Uri of the executor</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.DefaultExecutorUriAttribute.ExecutorUri">
            <summary>
            The Uri of the Test Executor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute">
            <summary>
            This attribute is applied to <see cref="!:ITestDiscoverer"/>s. It indicates the test discoverer discovers tests
            present inside a directory (as opposed to the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute"/> which indicates that the
            discoverer discovers tests present in files with a specified extension).
            </summary>
            <remarks>
            If neither this attribute nor the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute"/> is provided on the test discoverer,
            it will be called for all relevant test files and directories.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPlatformException">
            <summary>
            Base exception for all Rocksteady service exceptions
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ExtensionUriAttribute">
            <summary>
            This attribute is applied to extensions so they can be uniquely identified.
            It indicates the Uri which uniquely identifies the extension.  If this attribute
            is not provided on the extensions such as the Test Executor or Test Logger, then
            the extensions will not be used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ExtensionUriAttribute.#ctor(System.String)">
            <summary>
            Initializes with the Uri of the extension.
            </summary>
            <param name="extensionUri">The Uri of the extension</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.ExtensionUriAttribute.ExtensionUri">
            <summary>
            The Uri of the Test Executor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute">
            <summary>
            This attribute is applied to <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer"/>s. It indicates that the discoverer discovers tests
            present in files with the specified extension.
            </summary>
            <remarks>
            If neither this attribute nor the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute"/> is provided on the test
            discoverer, it will be called for all relevant test files and directories.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute.#ctor(System.String)">
            <summary>
            Initializes with a file extension that the test discoverer can process tests from.
            For example ".dll" or ".exe".
            </summary>
            <param name="fileExtension">The file extensions that the test discoverer can process tests from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute.FileExtension">
            <summary>
            A file extensions that the test discoverer can process tests from.  For example ".dll" or ".exe".
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework">
            <summary>
            Class for target Framework for the test container
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.DefaultFramework">
            <summary>
            Default .Net target framework.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.Name">
            <summary>
            Gets the FullName of framework.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.FrameworkName">
            <summary>
            Gets the framework name such as .NETCoreApp.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.ShortName">
            <summary>
            Common short name, as well as directory name, such as net5.0. Is null when the framework is not correct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.Version">
            <summary>
            Gets the framework version.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.FromString(System.String)">
            <summary>
            Returns a valid framework or null when it cannot parse it, or when given null.
            </summary>
            <param name="frameworkString">Framework name</param>
            <returns>A framework object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework.ToString">
            <summary>
            Returns full name of the framework.
            </summary>
            <returns>String presentation of the object.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FrameworkVersion">
            <summary>
            This holds the major desktop framework versions. This is just to maintain compatibility with older runsettings files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FriendlyNameAttribute">
            <summary>
            This attribute is applied to Loggers so they can be uniquely identified.
            It indicates the Friendly Name which uniquely identifies the extension.
            This attribute is optional.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.FriendlyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes with the Friendly Name of the logger.
            </summary>
            <param name="friendlyName">The friendly name of the Logger</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.FriendlyNameAttribute.FriendlyName">
            <summary>
            The friendly Name of the Test Logger.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider">
            <summary>
            Interface for TestRuntimeProvider which manages test host processes for test engine.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.HostLaunched">
            <summary>
            Raised when host is launched successfully
            Consumed by TestPlatform to initialize connection b/w test host and test platform
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.HostExited">
            <summary>
            Raised when host is cleaned up and removes all it's dependencies
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.Shared">
            <summary>
            Gets a value indicating whether the test host is specific to a test source. If yes, each test source
            is launched in a separate host process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,System.String)">
            <summary>
            Sets a Message Logger
            </summary>
            <param name="logger">provide logger to runtimes</param>
            <param name="runsettingsXml">provide runsettings to runtimes for initialization</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.CanExecuteCurrentRunConfiguration(System.String)">
            <summary>
            Gets a value indicating whether the test host is specific to a test source. If yes, each test source
            is launched in a separate host process.
            </summary>
            <param name="runsettingsXml">
            The run Configuration.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.SetCustomLauncher(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher)">
            <summary>
            Sets a custom launcher
            </summary>
            <param name="customLauncher">Custom launcher to set</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.GetTestHostConnectionInfo">
            <summary>
            Gets the end point address and behavior of TestRuntime
            E.g. for phone device EndPoint:127.0.0.1:8080, ConnectionRole Host, TransportProtocol: Sockets
            </summary>
            <returns> Socket where the service is hosted by TestRuntime</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.LaunchTestHostAsync(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo,System.Threading.CancellationToken)">
            <summary>
            Launches the test host for discovery/execution.
            </summary>
            <param name="testHostStartInfo">Start parameters for the test host.</param>
            <param name="cancellationToken"></param>
            <returns>Returns whether the test host launched successfully or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.GetTestHostProcessStartInfo(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo)">
            <summary>
            Gets the start parameters for the test host.
            </summary>
            <param name="sources">Test source paths.</param>
            <param name="environmentVariables">Set of environment variables for the test host process.</param>
            <param name="connectionInfo">Set of connection parameters for the test host process to communicate with test runner.</param>
            <returns>ProcessStartInfo of the test host.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.GetTestPlatformExtensions(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets paths of any additional extensions.
            A test host manager may choose to provide a custom extensions acquisition and discovery
            mechanism. E.g. for .net core, extensions are discovered from the <c>testproject.deps.json</c> file.
            </summary>
            <param name="sources">List of test sources.</param>
            <param name="extensions"></param>
            <returns>List of paths to extension assemblies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.GetTestSources(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets path of test sources, based on RuntimeProvider, and where the test is actually deployed(Remote Scenario).
            A test host manager may choose to accept input source as XML file, and provide appropriate source(dll/exe) which the adapters can actually consume
            E.g. for UWP, input source could be "appx recipe" file, which gives information about actual source exe.
            </summary>
            <param name="sources">List of test sources.</param>
            <returns>Updated List of test sources based on remote/local scenario.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider.CleanTestHostAsync(System.Threading.CancellationToken)">
            <summary>
            Cleanup the test host process and it's dependencies.
            </summary>
            <param name="cancellationToken">
            Cancellation token.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider2">
            <summary>
            Interface to define a TestRuntimeProvider with support for attaching the debugger to the
            default testhost process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider2.AttachDebuggerToTestHost">
            <summary>
            Attach the debugger to an already running testhost process.
            </summary>
            <returns>
            <see langword="true"/> if the debugger was successfully attached to the running testhost
            process, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.#ctor(System.Uri,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initialize an InvokedDataCollector
            </summary>
            <param name="uri">Data collector Uri</param>
            <param name="assemblyQualifiedName">Data collector assembly qualified name</param>
            <param name="filePath">Data collector file path</param>
            <param name="hasAttachmentProcessor">True if data collector registers an attachment processor</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.Uri">
            <summary>
            DataCollector uri.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.FriendlyName">
            <summary>
            DataCollector FriendlyName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.AssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName of data collector.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.FilePath">
            <summary>
            Data collector file path.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.HasAttachmentProcessor">
            <summary>
            True if the collector registers an attachments processor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.Equals(Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector)">
            <summary>
            Compares InvokedDataCollector instances for equality.
            </summary>
            <param name="other">InvokedDataCollector instance</param>
            <returns>True if objects are equal</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.Equals(System.Object)">
            <summary>
            Compares InvokedDataCollector instances for equality.
            </summary>
            <param name="obj">InvokedDataCollector instance</param>
            <returns>True if objects are equal</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.GetHashCode">
            <summary>
            Returns the object hashcode
            </summary>
            <returns>Hashcode value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector.ToString">
            <summary>
            Return string representation for the current object
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryInitializer">
            <summary>
            Interface for extensions that choose to send telemetry events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryInitializer.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter)">
            <summary>
            Initializes telemetry reporter
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter">
            <summary>
            Interface for extensions that choose to send telemetry events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter.Report(Microsoft.VisualStudio.TestPlatform.ObjectModel.TelemetryEvent)">
            <summary>
            Pushes telemetry event into TP
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue">
            <summary>
            Represents a lazy value calculation for a TestObject
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue.Value">
            <summary>
            Forces calculation of the value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.LazyPropertyValue`1">
            <summary>
            Represents a lazy value calculation for a TestObject
            </summary>
            <typeparam name="T">The type of the value to be calculated</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LazyPropertyValue`1.Value">
            <summary>
            Forces calculation of the value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings">
            <summary>
            The logger run settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings.LoggerSettingsList">
            <summary>
            Gets the logger settings list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings.FromXml(System.Xml.XmlReader)">
            <summary>
            The from xml.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings"/>.
            </returns>
            <exception cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException">
            Settings exception
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings.FromXml(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            The from xml.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="loggersSettingName">
            Loggers setting name.
            </param>
            <param name="loggerSettingName">
            Logger setting name.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings"/>
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings.ReadListElementFromXml(System.Xml.XmlReader,System.String)">
            <summary>
            Reads logger settings list from runSettings
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="loggerSettingName">
            Logger setting name.
            </param>
            <returns>
            LoggerSettings List
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings.GetExistingLoggerIndex(Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings)">
            <summary>
            Gets existing logger index.
            </summary>
            <param name="loggerSettings">Logger settings.</param>
            <returns>Index of given logger settings.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings">
            <summary>
            The logger settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.Uri">
            <summary>
            Gets or sets the uri.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.AssemblyQualifiedName">
            <summary>
            Gets or sets the assembly qualified name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.CodeBase">
            <summary>
            Gets or sets value CodeBase of logger DLL. The syntax is same as Code Base in AssemblyName class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.FriendlyName">
            <summary>
            Gets or sets the friendly name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.IsEnabled">
            <summary>
            Gets or sets a value indicating whether is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.ToXml">
            <summary>
            The to xml.
            </summary>
            <returns>
            The <see cref="T:System.Xml.XmlElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings.ToXml(System.String)">
            <summary>
            The to xml.
            </summary>
            <param name="loggerName">
            The logger name.
            </param>
            <returns>
            The <see cref="T:System.Xml.XmlElement"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs">
            <summary>
            EventArg used for raising data collector message event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="level">Level at which message should be logged.</param>
            <param name="message">Text message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs.FriendlyName">
            <summary>
            Friendly name of collector
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs.Uri">
            <summary>
            Uri of collector.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs.TestCaseId">
            <summary>
            Test case id if the message is generated by test case collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs">
            <summary>
            Event arguments used for raising Test Result events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs"/> class.
            </summary>
            <param name="result">
            Test Result for the event.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs.Result">
            <summary>
            Gets the Test Result.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs">
            <summary>
            Event arguments used for raising Test Run Message events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <summary>
            Initializes with the level and the message for the event.
            </summary>
            <param name="level">Level of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs.Level">
            <summary>
            Level of the message.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunStartedEventArgs">
            <summary>
            Event arguments used for raising TestRunStarted events.
            Mainly contains the process Id of the test execution process running the tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunStartedEventArgs.#ctor(System.Int32)">
            <param name="processId">The process Id of the test execution process running the tests.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger">
            <summary>
            Used for logging error warning and informational messages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger.SendMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <summary>
            Sends a message to the enabled loggers.
            </summary>
            <param name="testMessageLevel">Level of the message.</param>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel">
            <summary>
            Levels for test messages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel.Informational">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaNavigationData">
            <summary>
            A struct that stores the information needed by the navigation: file name, line number, column number.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession">
            <summary>
            The class that enables us to get debug information from both managed and native binaries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession.TestNameStripChars">
            <summary>
            Characters that should be stripped off the end of test names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession._symbolReader">
            <summary>
            The symbol reader.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession"/> class.
            </summary>
            <param name="binaryPath">
            The binary path.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession"/> class.
            </summary>
            <param name="binaryPath">
            The binary path is assembly path Ex: \path\to\bin\Debug\simpleproject.dll
            </param>
            <param name="searchPath">
            search path.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession.Dispose">
            <summary>
            Dispose symbol reader
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession.GetNavigationData(System.String,System.String)">
            <summary>
            Gets the navigation data for a method declared in a type.
            </summary>
            <param name="declaringTypeName"> The declaring type name. </param>
            <param name="methodName"> The method name. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData" /> for that method. </returns>
            <remarks> Leaving this method in place to preserve back compatibility. </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession.GetNavigationDataForMethod(System.String,System.String)">
            <summary>
            Gets the navigation data for a method declared in a type.
            </summary>
            <param name="declaringTypeName"> The declaring type name. </param>
            <param name="methodName"> The method name. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData" /> for that method. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader">
            <summary>
            To get method's file name, startline and endline from desktop assembly file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader._isDisposed">
            <summary>
            To check isDisposed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader._typeSymbols">
            <summary>
            Holds type symbols available in the source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader._methodSymbols">
            <summary>
            Holds method symbols for all types in the source.
            Methods in different types can have same name, hence separated dictionary is created for each type.
            Bug: Method overrides in same type are not handled (not a regression)
            ToDo(Solution): Use method token along with as identifier, this will always give unique method.The adapters would need to send this token to us to correct the behavior.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader.Dispose">
            <summary>
            dispose caches
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader.CacheSymbols(System.String,System.String)">
            <summary>
            Cache symbols from binary path
            </summary>
            <param name="binaryPath">
            The binary path is assembly path Ex: \path\to\bin\Debug\simpleproject.dll
            </param>
            <param name="searchPath">
            search path.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader.GetNavigationData(System.String,System.String)">
            <summary>
            Gets Navigation data from caches
            </summary>
            <param name="declaringTypeName">
            Type name Ex: MyNameSpace.MyType
            </param>
            <param name="methodName">
            Method name in declaringTypeName Ex: Method1
            </param>
            <returns>
            <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData"/>.
            Returns INavigationData which contains filename and line number.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader.UpdateMethodSymbolCache(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSymbol,System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSymbol})">
            <summary>
            Update the method symbol cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData">
            <summary>
            Stores the navigation data associated with the .exe/.dll file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData.FileName">
            <summary>
            Gets or sets the file name of the file containing the method being navigated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData.MinLineNumber">
            <summary>
            Gets or sets the min line number of the method being navigated in the file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData.MaxLineNumber">
            <summary>
            Gets or sets the max line number of the method being navigated in the file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationSession">
            <summary>
            Manages the debug data associated with the .exe/.dll file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationSession.GetNavigationDataForMethod(System.String,System.String)">
            <summary>
            Gets the navigation data for a method.
            </summary>
            <param name="declaringTypeName"> The declaring type name. </param>
            <param name="methodName"> The method name. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData"/> to get to the method. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.ISymbolReader">
            <summary>
            Caches filename and line number for symbols in assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.ISymbolReader.CacheSymbols(System.String,System.String)">
            <summary>
            Cache symbols from binary path
            </summary>
            <param name="binaryPath">
            The binary path is assembly path Ex: \path\to\bin\Debug\simpleproject.dll
            </param>
            <param name="searchPath">
            search path.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.ISymbolReader.GetNavigationData(System.String,System.String)">
            <summary>
            Gets Navigation data from caches
            </summary>
            <param name="declaringTypeName">
            Type name Ex: MyNameSpace.MyType
            </param>
            <param name="methodName">
            Method name in declaringTypeName Ex: Method1
            </param>
            <returns>
            <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData"/>.
            Returns INavigationData which contains file name and line number.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.Guids">
            <summary>
            Some GUID constants we use to instantiate COM objects.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaEnumLineNumbers">
            <summary>
            DIA's IDiaEnumLineNumbers used for enumerating a symbol's line numbers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaLineNumber">
            <summary>
            DIA's IDiaLineNumber used for retrieving line information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSession">
            <summary>
            DIA's IDiaSession used for locating symbols.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSourceFile">
            <summary>
            DIA's IDiaSourceFile used for getting source filenames.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.SymTagEnum">
            <summary>
            Represents the DIA symbol tags.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSymbol">
            <summary>
            DIA's IDiaSymbol used for getting the address of function symbols.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaDataSource">
            <summary>
            DIA's IDiaDataSource used for opening symbols.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader">
            <summary>
            The portable pdb reader.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader.MethodInfoMethodTokenProperty">
            <summary>
            Use to get method token
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader._provider">
            <summary>
            Metadata reader provider from portable pdb stream
            To get Metadata reader
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader._reader">
            <summary>
            Metadata reader from portable pdb stream
            To get method debug info from method info
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader"/> class.
            </summary>
            <param name="stream">
            Portable pdb stream
            </param>
            <exception cref="T:System.Exception">
            Raises Exception on given stream is not portable pdb stream
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader.#ctor(System.Reflection.Metadata.MetadataReaderProvider)">
            <summary>
            Reads the pdb using a provided metadata reader, when the pdb is embedded in the dll, or found by
            path that is in the dll metadata.
            </summary>
            <param name="metadataReaderProvider"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader.Dispose">
            <summary>
            Dispose Metadata reader
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader.GetDiaNavigationData(System.Reflection.MethodInfo)">
            <summary>
            Gets dia navigation data from Metadata reader
            </summary>
            <param name="methodInfo">
            Method info.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaNavigationData"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader.IsPortable(System.IO.Stream)">
            <summary>
            Checks gives stream is from portable pdb or not
            </summary>
            <param name="stream">
            Stream.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader">
            <summary>
                The portable symbol reader.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader._methodsNavigationDataForType">
            <summary>
                Key in first dict is Type FullName
                Key in second dict is method name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader.CacheSymbols(System.String,System.String)">
            <summary>
            The cache symbols.
            </summary>
            <param name="binaryPath">
            The binary path.
            </param>
            <param name="searchPath">
            The search path.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader.GetNavigationData(System.String,System.String)">
            <summary>
            The get navigation data.
            </summary>
            <param name="declaringTypeName">
            The declaring type name.
            </param>
            <param name="methodName">
            The method name.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader.PopulateCacheForTypeAndMethodSymbols(System.String)">
            <summary>
            The populate cache for type and method symbols.
            </summary>
            <param name="binaryPath">
            The binary path.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader.CreatePortablePdbReaderFromPEData(System.String)">
            <summary>
            Reads the pdb data from the dlls itself, either by loading the referenced pdb file, or by reading
            embedded pdb from the dll itself.
            </summary>
            <param name="binaryPath"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RegistryFreeActivationContext">
            <remarks>
            Enable registry-free COM context
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RegistryFreeActivationContext.#ctor(System.String)">
             <summary>
             Initializes a new instance of RegistryFreeActivationContext class.
             </summary>
            <param name="manifest">Manifest file path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RegistryFreeActivationContext.Finalize">
            <summary>
            Finalize an instance of RegistryFreeActivationContext class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RegistryFreeActivationContext.ActivateContext">
            <summary>
            Load manifest to enable registry-free COM context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RegistryFreeActivationContext.DeactivateContext">
            <summary>
            Disable registry-free COM context.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.TestPlatform.ObjectModel.ActivationContextNativeMethods" -->
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources.CannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The parameter cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources.DisplayChosenSettings">
            <summary>
              Looks up a localized string similar to Test run detected DLL(s) which would use different framework and platform versions. Following DLL(s) do not match current settings, which are {0} framework and {1} platform.{2}Go to {3} for more details on managing these settings..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources.MalformedRunSettingsFile">
            <summary>
              Looks up a localized string similar to Settings file provided does not conform to required format..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources.NoMatchingSourcesFound">
            <summary>
              Looks up a localized string similar to None of the provided test containers match the Platform Architecture and .Net Framework settings for the test run. Platform: {0}  .Net Framework: {1}. Go to http://go.microsoft.com/fwlink/?LinkID=330428 for more details on managing these settings..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources.SourceIncompatible">
            <summary>
              Looks up a localized string similar to {0} would use Framework {1} and Platform {2}..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.BasicTestResultFormat">
            <summary>
              Looks up a localized string similar to {0,-10}  {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_CannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The parameter cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_FileNotExist">
            <summary>
              Looks up a localized string similar to File {0} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_ObjectMustBeOfType">
            <summary>
              Looks up a localized string similar to Object must be of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeAborted">
            <summary>
              Looks up a localized string similar to Aborted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeCompleted">
            <summary>
              Looks up a localized string similar to Completed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeDisconnected">
            <summary>
              Looks up a localized string similar to Disconnected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeError">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeFailed">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeInconclusive">
            <summary>
              Looks up a localized string similar to Inconclusive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeInProgress">
            <summary>
              Looks up a localized string similar to In Progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeNotExecuted">
            <summary>
              Looks up a localized string similar to Not Executed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeNotRunnable">
            <summary>
              Looks up a localized string similar to Not Runnable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomePassed">
            <summary>
              Looks up a localized string similar to Passed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomePassedButRunAborted">
            <summary>
              Looks up a localized string similar to Passed (run aborted).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomePending">
            <summary>
              Looks up a localized string similar to Pending.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeTimeout">
            <summary>
              Looks up a localized string similar to Timeout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Common_TestOutcomeWarning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.ConverterNotSupported">
            <summary>
              Looks up a localized string similar to Cannot find TypeConverter for type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.CouldNotFindXmlNode">
            <summary>
              Looks up a localized string similar to Could not find &apos;{0}&apos; node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.DataCollectionSink_CanNotReadStream">
            <summary>
              Looks up a localized string similar to Unable to read from the provided stream.  Data from a stream cannot be sent unless the stream supports reading..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.DataCollectionSink_InvalidFileNameCharacters">
            <summary>
              Looks up a localized string similar to The provided file name &apos;{0}&apos; contains the following invalid characters: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.DataCollectionSink_ReservedFilenameUsed">
            <summary>
              Looks up a localized string similar to The provided file name &apos;{0}&apos; is reserved..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.Exception_RegisteredTestPropertyHasDifferentValueType">
            <summary>
              Looks up a localized string similar to Cannot register property &apos;{0}&apos; as value type &apos;{1}&apos; because it was already registered as &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.FailedToCreateDiaSession">
            <summary>
              Looks up a localized string similar to Failed to Create msdia Session COM HResult &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.FailedToLoadMsDia">
            <summary>
              Looks up a localized string similar to Failed to load msdia.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.InvalidDataCollectorUriInSettings">
            <summary>
              Looks up a localized string similar to Invalid URI in data collector settings &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.InvalidRunSettingsRootNode">
            <summary>
              Looks up a localized string similar to The root node of the run settings must be named &apos;RunSettings&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.InvalidSettingsIncorrectValue">
            <summary>
              Looks up a localized string similar to Invalid settings &apos;{0}&apos;.  Invalid value &apos;{1}&apos; specified for &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.InvalidSettingsXmlAttribute">
            <summary>
              Looks up a localized string similar to Invalid settings &apos;{0}&apos;. Unexpected XmlAttribute: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.InvalidSettingsXmlElement">
            <summary>
              Looks up a localized string similar to Invalid settings &apos;{0}&apos;. Unexpected XmlElement: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.InvalidUriInSettings">
            <summary>
              Looks up a localized string similar to Invalid URI &apos;{0}&apos; in settings &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.MissingDataCollectorAttributes">
            <summary>
              Looks up a localized string similar to Invalid data collector settings. Expected attribute &apos;{0}&apos; is missing.  A typical data collector setting would look like &lt;DataCollector uri=&quot;dataCollector://Samples/SampleCollector/1.0&quot; assemblyQualifiedName=&quot;Samples.SampleCollector.SampleDataCollector, SampleCollectors, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1111111111111111&quot; friendlyName=&quot;sampleCollector&quot;&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.MissingLoggerAttributes">
            <summary>
              Looks up a localized string similar to Invalid settings &apos;{0}&apos;. Expected atleast one of the XmlAttribute among friendlyName, uri and assemblyQualifiedName..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.NoTestCaseFilterForSpecificTests">
            <summary>
              Looks up a localized string similar to Cannot specify TestCaseFilter for specific tests run. FilterCriteria is only for run with sources..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.NotificationFrequencyIsNotPositive">
            <summary>
              Looks up a localized string similar to Notification frequency need to be a positive value..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.NotificationTimeoutIsZero">
            <summary>
              Looks up a localized string similar to Notification timeout must be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.NullString">
            <summary>
              Looks up a localized string similar to (null).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.SolutionDirectoryNotExists">
            <summary>
              Looks up a localized string similar to Solution directory &apos;{0}&apos; does not exists. Please make sure solution directory specified in runsettings exists and have read permissions for directory..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCaseFilterEscapeException">
            <summary>
              Looks up a localized string similar to Filter string &apos;{0}&apos; includes unrecognized escape sequence..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyColumnNumberLabel">
            <summary>
              Looks up a localized string similar to Column Number.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyExecutorUriLabel">
            <summary>
              Looks up a localized string similar to Executor Uri.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyFilePathLabel">
            <summary>
              Looks up a localized string similar to File Path.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyFullyQualifiedNameLabel">
            <summary>
              Looks up a localized string similar to FullyQualifiedName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyIdLabel">
            <summary>
              Looks up a localized string similar to Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyLineNumberLabel">
            <summary>
              Looks up a localized string similar to Line Number.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyNameLabel">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertySourceLabel">
            <summary>
              Looks up a localized string similar to Source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestCasePropertyTraitsLabel">
            <summary>
              Looks up a localized string similar to Traits.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestFailureMessageFormat">
            <summary>
              Looks up a localized string similar to   Message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestFailureStackTraceFormat">
             <summary>
               Looks up a localized string similar to   StackTrace:
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestOutcomeFailed">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestOutcomeNone">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestOutcomeNotFound">
            <summary>
              Looks up a localized string similar to NotFound.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestOutcomePassed">
            <summary>
              Looks up a localized string similar to Passed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestOutcomeSkipped">
            <summary>
              Looks up a localized string similar to Skipped.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultMessageFormat">
             <summary>
               Looks up a localized string similar to   {0}:
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyComputerNameLabel">
            <summary>
              Looks up a localized string similar to Computer Name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyDisplayNameLabel">
            <summary>
              Looks up a localized string similar to TestResult Display Name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyDurationLabel">
            <summary>
              Looks up a localized string similar to Duration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyEndTimeLabel">
            <summary>
              Looks up a localized string similar to End Time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyErrorColumnNumberLabel">
            <summary>
              Looks up a localized string similar to Error Column Number.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyErrorMessageLabel">
            <summary>
              Looks up a localized string similar to Error Message.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyErrorStackTraceLabel">
            <summary>
              Looks up a localized string similar to Error Stack Trace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyOutcomeLabel">
            <summary>
              Looks up a localized string similar to Outcome.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultPropertyStartTimeLabel">
            <summary>
              Looks up a localized string similar to Start Time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.TestResultTextMessagesFormat">
             <summary>
               Looks up a localized string similar to   Test Messages:
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources.UnexpectedTypeOfProperty">
            <summary>
              Looks up a localized string similar to The test property type &apos;{0}&apos; of property &apos;{1}&apos; is not supported. Use one of the supported property type (primitive types, uri, string, string[]) and try again. .
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration">
            <summary>
            Stores information about a test settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._platform">
            <summary>
            Platform architecture which rocksteady should use for discovery/execution
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._maxCpuCount">
            <summary>
            Maximum number of cores that the engine can use to run tests in parallel
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._framework">
            <summary>
            .Net framework which rocksteady should use for discovery/execution
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._batchSize">
            <summary>
            Specifies the frequency of the runStats/discoveredTests event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._resultsDirectory">
            <summary>
            Directory in which rocksteady/adapter should keep their run specific data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._testAdaptersPaths">
            <summary>
            Paths at which rocksteady should look for test adapters
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._disableAppDomain">
            <summary>
            Indication to adapters to disable app domain.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._disableParallelization">
            <summary>
            Indication to adapters to disable parallelization.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._designMode">
            <summary>
            True if test run is triggered
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration._shouldCollectSourceInformation">
            <summary>
            False indicates that the test adapter should not collect source information for discovered tests
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.SolutionDirectory">
            <summary>
            Gets or sets the solution directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.ResultsDirectory">
            <summary>
            Gets or sets the results directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.MaxCpuCount">
            <summary>
            Gets or sets the Parallel execution option. Should be non-negative integer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.BatchSize">
            <summary>
            Gets or sets the frequency of the runStats/discoveredTests event. Should be non-negative integer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TestSessionTimeout">
            <summary>
            Gets or sets the testSessionTimeout. Should be non-negative integer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DesignMode">
            <summary>
            Gets or sets the design mode value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.InIsolation">
            <summary>
            Gets or sets a value indicating whether to run tests in isolation or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.ShouldCollectSourceInformation">
            <summary>
            Gets a value indicating whether test adapter needs to collect source information for discovered tests
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DisableAppDomain">
            <summary>
            Gets or sets a value indicating whether app domain creation should be disabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TestAdapterLoadingStrategy">
            <summary>
            Gets or sets the test adapter loading strategy.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DisableParallelization">
            <summary>
            Gets a value indicating whether parallelism needs to be disabled by the adapters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TargetPlatform">
            <summary>
            Gets or sets the Target platform this run is targeting. Possible values are <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Architecture"/> except for AnyCPU and Default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DefaultPlatform">
            <summary>
            Gets or sets the default platform that will be used for AnyCPU sources, or non-dll sources. Possible values are <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Architecture"/> except for AnyCPU and Default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TargetFramework">
            <summary>
            Gets or sets the target Framework this run is targeting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TreatNoTestsAsError">
            <summary>
            Gets or sets value indicating exit code when no tests are discovered or executed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TargetFrameworkVersion">
            <summary>
            Gets or sets the target Framework this run is targeting. Possible values are Framework3.5|Framework4.0|Framework4.5
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TargetDevice">
            <summary>
            Gets or sets the target device IP. For Phone this value is Device, for emulators "Mobile Emulator 10.0.15063.0 WVGA 4 inch 1GB"
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TestAdaptersPaths">
            <summary>
            Gets or sets the paths used for test adapters lookup in test platform.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.ExecutionThreadApartmentState">
            <summary>
            Gets or sets the execution thread apartment state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TreatTestAdapterErrorsAsWarnings">
            <summary>
            Gets or sets a value indicating whether to treat the errors from test adapters as warnings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TargetPlatformSet">
            <summary>
            Gets a value indicating whether target platform set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DefaultPlatformSet">
            <summary>
            Gets a value indicating whether default platform is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.MaxCpuCountSet">
            <summary>
            Gets a value indicating whether maximum parallelization count is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.BatchSizeSet">
            <summary>
            Gets a value indicating batch size is set
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DesignModeSet">
            <summary>
            Gets a value indicating whether design mode is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DisableAppDomainSet">
            <summary>
            Gets a value indicating whether disable appdomain is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DisableParallelizationSet">
            <summary>
            Gets a value indicating whether parallelism needs to be disabled by the adapters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TargetFrameworkSet">
            <summary>
            Gets a value indicating whether target framework set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TestAdaptersPathsSet">
            <summary>
            Gets a value indicating whether test adapters paths set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.ResultsDirectorySet">
            <summary>
            Gets a value indicating whether results directory is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.BinariesRoot">
            <summary>
            Gets the binaries root.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.CollectSourceInformationSet">
            <summary>
            Collect source information
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.TestCaseFilter">
            <summary>
            Default filter to use to filter tests
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.DotnetHostPath" -->
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.ToXml">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration.FromXml(System.Xml.XmlReader)">
            <summary>
            Loads RunConfiguration from XmlReader.
            </summary>
            <param name="reader">XmlReader having run configuration node.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException">
            <summary>
            Exception thrown by Run Settings when an error with a settings provider
            is encountered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException.#ctor(System.String)">
            <summary>
            Initializes with the message.
            </summary>
            <param name="message">Message for the exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes with message and inner exception.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsNameAttribute">
            <summary>
            Attribute applied to ISettingsProviders to associate it with a settings
            name.  This name will be used to request the settings from the RunSettings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsNameAttribute.#ctor(System.String)">
            <summary>
            Initializes with the name of the settings.
            </summary>
            <param name="settingsName">Name of the settings</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsNameAttribute.SettingsName">
            <summary>
            The name of the settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunParameters">
            <summary>
            This class deals with the run settings, Test Run Parameters node and the extracting of Key Value Pair's from the parameters listed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunParameters.FromXml(System.Xml.XmlReader)">
            <summary>
            Get the test run parameters from the provided reader.
            </summary>
            <param name="reader"> The reader. </param>
            <returns> The dictionary of test run parameters. </returns>
            <exception cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException"> Throws when format is incorrect. </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunSettings">
            <summary>
            Stores information about a test settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunSettings.#ctor(System.String)">
            <summary>
            Initializes with the name of the test case.
            </summary>
            <param name="name">The name of the test case.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunSettings.Name">
            <summary>
            Gets the name of the test settings.
            Do not put a private setter on this
            Chutzpah adapter checks for setters of all properties and it throws error if its private
            during RunSettings.LoadSection() call
            TODO: Communicate to Chutzpah and fix it
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunSettings.ToXml">
            <summary>
            Converter the setting to be an XmlElement.
            </summary>
            <returns>The Xml element for the run settings provided.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TelemetryEvent.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initialize an TelemetryEvent
            </summary>
            <param name="name">Telemetry event name</param>
            <param name="properties">Telemetry event properties</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TelemetryEvent.Name">
            <summary>
            Telemetry event name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TelemetryEvent.Properties">
            <summary>
            Telemetry event properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy">
            <summary>
            Represents a loading strategy
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.Default">
            <summary>
            A strategy not defined, Test Platform will load adapters normally.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.Explicit">
            <summary>
            Test Platform will only load adapters specified by /TestAdapterPath (or RunConfiguration.TestAdaptersPaths node).
            If a specific adapter path is provided, adapter will be loaded; if a directory path is provided adapters directly in that folder will be loaded.
            If no adapter path is specified, test run will fail.
            This will imply /InIsolation switch and force the tests to be run in an isolated process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.NextToSource">
            <summary>
            Load adapters next to source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.DefaultRuntimeProviders">
            <summary>
            Default runtime providers inside Extensions folder will be included.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.ExtensionsDirectory">
            <summary>
            Load adapters inside Extensions folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.Recursive">
            <summary>
            Directory wide searches will be recursive, this is required to be used with <see cref="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.NextToSource" /> or <see cref="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy.Explicit" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase">
            <summary>
            Stores information about a test case.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase"/> class.
            </summary>
            <remarks>This constructor doesn't perform any parameter validation, it is meant to be used for serialization."/></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.#ctor(System.String,System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase"/> class.
            </summary>
            <param name="fullyQualifiedName">
            Fully qualified name of the test case.
            </param>
            <param name="executorUri">
            The Uri of the executor to use for running this test.
            </param>
            <param name="source">
            Test container source from which the test is discovered.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.LocalExtensionData">
            <summary>
            LocalExtensionData which can be used by Adapter developers for local transfer of extended properties.
            Note that this data is available only for in-Proc execution, and may not be available for OutProc executors
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.Id">
            <summary>
            Gets or sets the id of the test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.FullyQualifiedName">
            <summary>
            Gets or sets the fully qualified name of the test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.DisplayName">
            <summary>
            Gets or sets the display name of the test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.ExecutorUri">
            <summary>
            Gets or sets the Uri of the Executor to use for running this test.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.Source">
            <summary>
            Gets the test container source from which the test is discovered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.CodeFilePath">
            <summary>
            Gets or sets the source code file path of the test.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.LineNumber">
            <summary>
            Gets or sets the line number of the test.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.Properties">
            <summary>
            Returns the TestProperties currently specified in this TestObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.GetTestId">
            <summary>
            Creates a Id of TestCase
            </summary>
            <returns>Guid test id</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.ProtectedGetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Object)">
            <summary>
            Return TestProperty's value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.ProtectedSetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Object)">
            <summary>
            Set TestProperty's value
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCaseProperties">
            <summary>
            Well-known TestCase properties
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCaseProperties.IdLabel">
            <summary>
            These are the core Test properties and may be available in commandline/TeamBuild to filter tests.
            These Property names should not be localized.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject">
            <summary>
             Base class for test related classes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject._store">
            <summary>
            The store for all the properties registered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.StoreKeyValuePairs">
            <summary>
            Property used for Json (de)serialization of store dictionary. Serialization of dictionaries
            by default doesn't provide the required object representation. <c>List of KeyValuePair</c> on the
            other hand provides a clean Key, Value entries for <c>TestProperty</c> and it's value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.Properties">
            <summary>
            Returns the TestProperties currently specified in this TestObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.GetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty)">
            <summary>
            Returns property value of the specify TestProperty
            </summary>
            <param name="property">TestObject's TestProperty</param>
            <returns>property value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.GetPropertyValue``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,``0)">
            <summary>
            Returns property value of the specify TestProperty
            </summary>
            <typeparam name="T">Property value type</typeparam>
            <param name="property">TestObject's TestProperty</param>
            <param name="defaultValue">default property value if property is not present</param>
            <returns>property value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.SetPropertyValue``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,``0)">
            <summary>
            Set TestProperty's value
            </summary>
            <typeparam name="T">Property value type</typeparam>
            <param name="property">TestObject's TestProperty</param>
            <param name="value">value to be set</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.SetPropertyValue``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,Microsoft.VisualStudio.TestPlatform.ObjectModel.LazyPropertyValue{``0})">
            <summary>
            Set TestProperty's value
            </summary>
            <typeparam name="T">Property value type</typeparam>
            <param name="property">TestObject's TestProperty</param>
            <param name="value">value to be set</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.SetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Object)">
            <summary>
            Set TestProperty's value
            </summary>
            <param name="property">TestObject's TestProperty</param>
            <param name="value">value to be set</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.RemovePropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty)">
            <summary>
             Remove test property from the current TestObject.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.GetPropertyValue``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,``0,System.Globalization.CultureInfo)">
            <summary>
            Returns TestProperty's value
            </summary>
            <returns>property's value. default value is returned if the property is not present</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.SetPropertyValue``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,``0,System.Globalization.CultureInfo)">
            <summary>
            Set TestProperty's value to the specified value T.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.SetPropertyValue``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,Microsoft.VisualStudio.TestPlatform.ObjectModel.LazyPropertyValue{``0},System.Globalization.CultureInfo)">
            <summary>
            Set TestProperty's value to the specified value T.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.ProtectedGetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Object)">
            <summary>
            Return TestProperty's value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.ProtectedSetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Object)">
            <summary>
            Set TestProperty's value
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.ConvertPropertyFrom``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert passed in value from TestProperty's specified value type.
            </summary>
            <returns>Converted object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject.ConvertPropertyTo``1(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert passed in value into the specified type when property is registered.
            </summary>
            <returns>Converted object</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome">
            <summary>
            Represents the outcomes of a test case.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome.None">
            <summary>
            Test Case Does Not Have an outcome.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome.Passed">
            <summary>
            Test Case Passed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome.Failed">
            <summary>
            Test Case Failed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome.Skipped">
            <summary>
            Test Case Skipped
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome.NotFound">
            <summary>
            Test Case Not found
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcomeHelper">
            <summary>
            Helper methods for working with the TestOutcome enum.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcomeHelper.GetOutcomeString(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Converts the outcome into its localized string representation.
            </summary>
            <param name="outcome">The outcome to get the string for.</param>
            <returns>The localized outcome string.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessAttachDebuggerPayload">
            <summary>
            The test process info payload.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessAttachDebuggerPayload.#ctor(System.Int32)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="pid">The process id the debugger should attach to.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessAttachDebuggerPayload.ProcessID">
            <summary>
            The process id the debugger should attach to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.EditorAttachDebuggerPayload.ProcessID">
            <summary>
            The process id the debugger should attach to.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo">
            <summary>
            The start info of the test runner
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo.FileName">
            <summary>
            The name of the test runner exe
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo.Arguments">
            <summary>
            The arguments for the test runner
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo.WorkingDirectory">
            <summary>
            The working directory for the test runner
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo.EnvironmentVariables">
            <summary>
            The associated environment variables
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo.CustomProperties">
            <summary>
            Any additional custom properties that might be required for the launch
            For example - emulator ID, remote machine details etc.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomKeyValueConverter">
            <summary>
            Converts a json representation of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to an object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomKeyValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomKeyValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomKeyValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomStringArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomStringArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomStringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.Id">
            <summary>
            Gets or sets the Id for the property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.Label">
            <summary>
            Gets or sets a label for the property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.Category">
            <summary>
            Gets or sets a category for the property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.Description">
            <summary>
            Gets or sets a description for the property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.ValidateValueCallback">
            <summary>
            Gets the callback for validation of property value.
            </summary>
            <remarks>This property is not required at the client side.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.Attributes">
            <summary>
            Gets or sets the attributes for this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.ValueType">
            <summary>
            Gets or sets a string representation of the type for value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.Equals(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty.GetValueType">
            <summary>
            Gets the valueType.
            </summary>
            <remarks>Only works for the valueType that is in the currently executing assembly or in Mscorlib.dll. The default valueType is of string valueType.</remarks>
            <returns>The valueType of the test property</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult">
            <summary>
            Represents the result of a test case.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult"/> class.
            </summary>
            <param name="testCase">The test case the result is for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.TestCase">
            <summary>
            Gets the test case that this result is for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.Attachments">
            <summary>
            Gets the list of attachment sets for this TestResult.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.Outcome">
            <summary>
            Gets or sets the outcome of a test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.ErrorMessage">
            <summary>
            Gets or sets the exception message.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.ErrorStackTrace">
            <summary>
            Gets or sets the exception stack trace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.DisplayName">
            <summary>
            Gets or sets the TestResult Display name. Used for Data Driven Test (i.e. Data Driven Test. E.g. InlineData in xUnit)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.Messages">
            <summary>
            Gets the test messages.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.ComputerName">
            <summary>
            Gets or sets test result ComputerName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.Duration">
            <summary>
            Gets or sets the test result Duration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.StartTime">
            <summary>
            Gets or sets the test result StartTime.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.EndTime">
            <summary>
            Gets or sets test result EndTime.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.Properties">
            <summary>
            Returns the TestProperties currently specified in this TestObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.ProtectedGetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Object)">
            <summary>
            Return TestProperty's value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult.ProtectedSetPropertyValue(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty,System.Object)">
            <summary>
            Set TestProperty's value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage">
            <summary>
            Represents the test result message.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage.StandardOutCategory">
            <summary>
                Standard Output Message Category
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage.StandardErrorCategory">
            <summary>
                Standard Error Message Category
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage.DebugTraceCategory">
            <summary>
                Debug Trace Message Category
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage.AdditionalInfoCategory">
            <summary>
                Additional Information Message Category
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage"/> class.
            </summary>
            <param name="category">Category of the message.</param>
            <param name="text">Text of the message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage.Category">
            <summary>
            Gets the message category
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage.Text">
            <summary>
            Gets the message text
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultProperties">
            <summary>
            Well-known TestResult properties
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Trait">
            <summary>
            Class that holds Trait.
            A traits is Name, Value pair.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.TraitCollection">
            <summary>
            Class that holds collection of traits
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.UapConstants">
            <summary>
            Defines the constants used during UWP app execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.UapConstants.UapPackageFullName">
            <summary>
            The UWP PackageName after it is deployed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.UapConstants.UapAppUserModeId">
            <summary>
            The UWP Package ID after it is deployed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper">
            <summary>
            Implementation of finding assembly references using "managed route", i.e. Assembly.Load.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper.DoesReferencesAssembly(System.String,System.Reflection.AssemblyName)">
            <summary>
            Checks whether the source assembly directly references given assembly or not.
            Only assembly name and public key token are match. Version is ignored for matching.
            Returns null if not able to check if source references assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper.GetFrameworkVersionAndArchitectureForSource(System.String)">
            <summary>
            Finds platform and .Net framework version for a given test container.
            If there is an error while inferring this information, defaults (AnyCPU, None) are returned
            for faulting container.
            </summary>
            <param name="testSource"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper.GetReferencedAssemblies(System.String)">
             <summary>
             Returns the full name (AssemblyName.FullName) of the referenced assemblies by the assembly on the specified path.
            
             Returns null on failure and an empty array if there is no reference in the project.
             </summary>
             <param name="source">Full path to the assembly to get dependencies for.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper.SetAppDomainFrameworkVersionBasedOnTestSource(System.AppDomainSetup,System.String)">
            <summary>
            Set the target framework for app domain setup if target framework of dll is > 4.5
            </summary>
            <param name="setup">AppdomainSetup for app domain creation</param>
            <param name="testSource">path of test file</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper.GetTargetFrameworkVersionString(System.String)">
            <summary>
            Get the target dot net framework string for the assembly
            </summary>
            <param name="path">Path of the assembly file</param>
            <returns>String representation of the target dot net framework e.g. .NETFramework,Version=v4.0 </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper.GetTargetFrameworkVersionFromVersionString(System.String)">
            <summary>
            Get the Version for the target framework version string
            </summary>
            <param name="version">Target framework string</param>
            <returns>Framework Version</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper.SetNETFrameworkCompatiblityMode(System.AppDomainSetup,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)">
            <summary>
            When test run is targeted for .Net4.0, set target framework of test appdomain to be v4.0.
            With this done tests would be executed in 4.0 compatibility mode even when .Net4.5 is installed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyLoadWorker">
            <summary>
            Does the real work of finding references using Assembly.ReflectionOnlyLoadFrom.
            The caller is supposed to create AppDomain and create instance of given class in there.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyLoadWorker.GetTargetFrameworkVersionStringFromPath(System.String)">
            <summary>
            Get the target dot net framework string for the assembly
            </summary>
            <param name="path">Path of the assembly file</param>
            <returns> String representation of the target dot net framework e.g. .NETFramework,Version=v4.0 </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyLoadWorker.GetTargetFrameworkStringFromAssembly(System.Reflection.Assembly)">
            <summary>
            Get the target dot net framework string for the assembly
            </summary>
            <param name="assembly">Assembly</param>
            <returns>String representation of the target dot net framework e.g. .NETFramework,Version=v4.0 </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyLoadWorker.GetReferencedAssemblies(System.String)">
             <summary>
             Returns the full name of the referenced assemblies by the assembly on the specified path.
            
             Returns null on failure and an empty array if there is no reference in the project.
             </summary>
             <param name="path">Path to the assembly file to load from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyLoadWorker.CheckAssemblyReference(System.String,System.String,System.Byte[])">
            <summary>
            Returns true if given assembly matched name and public key token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyLoadWorker.GetPlatformAndFrameworkSettings(System.String,System.String@,System.String@)">
            <summary>
            Finds platform and .Net framework version for a given container.
            In case of errors defaults are returned.
            </summary>
            <param name="path"></param>
            <param name="procArchType"></param>
            <param name="frameworkVersion"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.EqtHash">
            <summary>
            Wrapper class for cryptographic hashing.
            This class uses SHA1 instead of MD5 in order to conform to the FIPS standard.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.EqtHash.GuidFromString(System.String)">
            <summary>
            Calculates a hash of the string and copies the first 128 bits of the hash
            to a new Guid.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.FilterHelper.Escape(System.String)" -->
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.FilterHelper.Unescape(System.String)">
            <summary>
            Converts any escaped characters in the input filter string.
            </summary>
            <param name="str">The input string that contains the text to convert.</param>
            <returns>A filter string of characters with any escaped characters converted to their un-escaped form.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.Sha1Helper">
             <summary>
             Used to calculate SHA1 hash.
            
             https://tools.ietf.org/html/rfc3174
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.Sha1Helper.Sha1Implementation">
            <summary>
            SHA-1 Implementation as in https://tools.ietf.org/html/rfc3174
            </summary>
            <remarks>
            This implementation only works with messages with a length
            that is a multiple of the size of 8-bits.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.Sha1Helper.Sha1Implementation.F(System.Int32,System.UInt32,System.UInt32,System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.Sha1Helper.Sha1Implementation.K(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.Sha1Helper.Sha1Implementation.S(System.UInt32,System.Byte)" -->
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.Sha1Helper.Sha1Implementation.EnsureBigEndian(System.Byte[]@)">
            <summary>
            Ensures that given bytes are in big endian notation.
            </summary>
            <param name="array">An array of bytes</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.StringUtilities">
            <summary>
            Utility methods for manipulating strings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.StringUtilities.PrepareForOutput(System.String)">
            <summary>
            Prepares the string for output by converting null values to the "(null)" string
            and removing any trailing new lines.
            </summary>
            <param name="input">The input string.</param>
            <returns>The string that is prepared for output.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.StringUtilities.IsNullOrWhiteSpace(System.String)">
            <summary>
            Checks if given string is null or a whitespace.
            </summary>
            <param name="input">string to check</param>
            <returns>True if string is null or a whitespace, false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.SuspendCodeCoverage">
            <summary>
            Suspends the instrumentation (for code coverage) of the modules which are loaded
            during this object is created and disposed
            exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.SuspendCodeCoverage._isDisposed">
            <summary>
            Whether the object is disposed or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.SuspendCodeCoverage.#ctor">
            <summary>
            Constructor. Code Coverage instrumentation of the modules, which are loaded
            during this object is created and disposed, is disabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.SuspendCodeCoverage.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.SuspendCodeCoverage.Dispose(System.Boolean)">
            <summary>
            Disposes instance.
            </summary>
            <param name="disposing"> Should dispose. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlReaderUtilities">
            <summary>
            Utility methods for working with an XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlReaderUtilities.ReadToNextElement(System.Xml.XmlReader)">
            <summary>
            Reads up to the next Element in the document.
            </summary>
            <param name="reader">Reader to move to the next element.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlReaderUtilities.SkipToNextElement(System.Xml.XmlReader)">
            <summary>
            Skips the current element and moves to the next Element in the document.
            </summary>
            <param name="reader">Reader to move to the next element.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlReaderUtilities.ReadToRootNode(System.Xml.XmlReader)">
            <summary>
            Reads to the root node of the run settings and verifies that it is a "RunSettings" node.
            </summary>
            <param name="path">Path to the file.</param>
            <param name="reader">XmlReader for the file.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities">
            <summary>
            Utilities for the run settings XML.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.OSArchitecture">
            <summary>
            Gets the os architecture of the machine where this application is running
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.ReaderSettings">
            <summary>
            Gets the settings to be used while creating XmlReader for runsettings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.ContainsDataCollector(System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            Examines the given XPathNavigable representation of a runsettings file and determines if it has a configuration node
            for the data collector (used for Fakes and CodeCoverage)
            </summary>
            <param name="runSettingDocument"> XPathNavigable representation of a runsettings file </param>
            <param name="dataCollectorUri"> The data Collector Uri. </param>
            <returns> True if there is a datacollector configured. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.GetDataCollectorsFriendlyName(System.String)">
            <summary>
            Get the list of friendly name of all data collector present in runsettings.
            </summary>
            <param name="runsettingsXml">runsettings xml string</param>
            <returns>List of friendly name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.InsertDataCollectorsNode(System.Xml.XPath.IXPathNavigable,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings)">
            <summary>
            Inserts a data collector settings in the file
            </summary>
            <param name="runSettingDocument">runSettingDocument</param>
            <param name="settings">settings</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.GetRunConfigurationNode(System.String)">
            <summary>
            Returns RunConfiguration from settingsXml.
            </summary>
            <param name="settingsXml">The run settings.</param>
            <returns> The RunConfiguration node as defined in the settings xml.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.GetTestRunParameters(System.String)">
            <summary>
            Gets the set of user defined test run parameters from settings xml as key value pairs.
            </summary>
            <param name="settingsXml">The run settings xml.</param>
            <returns>The test run parameters defined in the run settings.</returns>
            <remarks>If there is no test run parameters section defined in the settings xml a blank dictionary is returned.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.CreateDefaultRunSettings">
            <summary>
            Create a default run settings
            </summary>
            <returns>
            The <see cref="T:System.Xml.XPath.IXPathNavigable"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.IsDataCollectionEnabled(System.String)">
            <summary>
            Returns whether data collection is enabled in the parameter settings xml or not
            </summary>
            <param name="runSettingsXml"> The run Settings Xml. </param>
            <returns> True if data collection is enabled. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.IsInProcDataCollectionEnabled(System.String)">
            <summary>
            Returns whether in-proc data collection is enabled in the parameter settings xml or not
            </summary>
            <param name="runSettingsXml"> The run Settings Xml. </param>
            <returns> True if data collection is enabled. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.GetDataCollectionRunSettings(System.String)">
            <summary>
            Get DataCollection Run settings from the settings XML.
            </summary>
            <param name="runSettingsXml"> The run Settings Xml. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings"/>. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.GetInProcDataCollectionRunSettings(System.String)">
            <summary>
            Get InProc DataCollection Run settings
            </summary>
            <param name="runSettingsXml">
            The run Settings Xml.
            </param>
            <returns>Data collection run settings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.GetLoggerRunSettings(System.String)">
            <summary>
            Get logger run settings from the settings XML.
            </summary>
            <param name="runSettings">The run Settings Xml.</param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings"/>. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.ThrowOnHasAttributes(System.Xml.XmlReader)">
            <summary>
            Throws a settings exception if the node the reader is on has attributes defined.
            </summary>
            <param name="reader"> The xml reader. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.ThrowOnNoAttributes(System.Xml.XmlReader)">
            <summary>
            Throws a settings exception if the node the reader is on doesn't have attributes defined.
            </summary>
            <param name="reader"> The xml reader. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities.MoveToDataCollectorsNode(System.Xml.XPath.XPathNavigator@)">
            <summary>
            Moves the given runsettings file navigator to the DataCollectors node in the runsettings xml.
            Throws XmlException if it was unable to find the DataCollectors node.
            </summary>
            <param name="runSettingsNavigator">XPathNavigator for a runsettings xml document.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.TestSDKAutoGeneratedCode">
            <summary>
            Only to be used to Test platform, to exclude auto generated code from CodeCoverage
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.CompatibilityCacheKey">
            <summary>
            Internal cache key used to store framework compatibility.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.CompatibilityProvider.IsCompatible(NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Check if the frameworks are compatible.
            </summary>
            <param name="target">Project framework</param>
            <param name="candidate">Other framework to check against the project framework</param>
            <returns>True if framework supports other</returns>
        </member>
        <member name="M:NuGetClone.Frameworks.CompatibilityProvider.IsCompatibleCore(NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Actual compatibility check without caching
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.CompatibilityProvider.GetEquivalentFrameworksClosure(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Find all equivalent frameworks, and their equivalent frameworks.
            Example:
            Mappings:
            A &lt;&#8210;&gt; B
            B &lt;&#8210;&gt; C
            C &lt;&#8210;&gt; D
            For A we need to find B, C, and D so we must retrieve equivalent frameworks for A, B, and C
            also as we discover them.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.DefaultFrameworkMappings.Instance">
            <summary>
            Singleton instance of the default framework mappings.
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.DefaultPortableFrameworkMappings">
            <summary>
            Contains the standard portable framework mappings
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.DefaultPortableFrameworkMappings.Instance">
            <summary>
            Static instance of the portable framework mappings
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.FallbackFramework.Fallback">
            <summary>
            List framework to fall back to.
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.FrameworkConstants.CommonFrameworks">
            <summary>
            Interned frameworks that are commonly used in NuGet
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.FrameworkExpander">
            <summary>
            FrameworkExpander finds all equivalent and compatible frameworks for a NuGetFramework
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkExpander.Expand(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Return all possible equivalent, subset, and known compatible frameworks.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkExpander.ExpandInternal(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Finds all expansions using the mapping provider
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.FrameworkNameProvider.SingleDigitVersionFrameworks">
            <summary>
            Legacy frameworks that are allowed to have a single digit for the version number.
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.FrameworkNameProvider.DecimalPointFrameworks">
            <summary>
            Frameworks that must always include a decimal point (period) between numerical parts.
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.FrameworkNameProvider._identifierSynonyms">
            <summary>
            Contains identifier -> identifier
            Ex: .NET Framework -> .NET Framework
            Ex: NET Framework -> .NET Framework
            This includes self mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkNameProvider.TryConvertOrNormalize(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String@)">
            <summary>
            Converts a key using the mappings, or if the key is already converted, finds the normalized form.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkNameProvider.GetAllEquivalentFrameworks(NuGetClone.Frameworks.NuGetFramework)">
            <summary>  
            Get all equivalent frameworks including the given framework  
            </summary>  
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkNameProvider.AddEquivalentProfiles(System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.FrameworkSpecificMapping})">
            <summary>
            2 way per framework profile equivalence
            </summary>
            <param name="mappings"></param>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkNameProvider.AddEquivalentFrameworks(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework}})">
            <summary>
            2 way framework equivalence
            </summary>
            <param name="mappings"></param>
        </member>
        <member name="T:NuGetClone.Frameworks.FrameworkPrecedenceSorter">
            <summary>
            Sorts frameworks according to the framework mappings
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.FrameworkRange">
            <summary>
            An inclusive range of frameworks
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.FrameworkRange.Min">
            <summary>
            Minimum Framework
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.FrameworkRange.Max">
            <summary>
            Maximum Framework
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.FrameworkRange.IncludeMin">
            <summary>
            Minimum version inclusiveness.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.FrameworkRange.IncludeMax">
            <summary>
            Maximum version inclusiveness.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.FrameworkRange.FrameworkIdentifier">
            <summary>
            Framework Identifier of both the Min and Max
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkRange.Satisfies(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            True if the framework version falls between the min and max
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.FrameworkReducer">
            <summary>
            Reduces a list of frameworks into the smallest set of frameworks required.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.#ctor">
            <summary>
            Creates a FrameworkReducer using the default framework mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.#ctor(NuGetClone.Frameworks.IFrameworkNameProvider,NuGetClone.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Creates a FrameworkReducer using custom framework mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.GetNearest(NuGetClone.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Returns the nearest matching framework that is compatible.
            </summary>
            <param name="framework">Project target framework</param>
            <param name="possibleFrameworks">Possible frameworks to narrow down</param>
            <returns>Nearest compatible framework. If no frameworks are compatible null is returned.</returns>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.ReduceEquivalent(System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Remove duplicates found in the equivalence mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.ReduceUpwards(System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Reduce to the highest framework
            Ex: net45, net403, net40 -> net45
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.ReduceDownwards(System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Reduce to the lowest framework
            Ex: net45, net403, net40 -> net40
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.ExplodePortableFrameworks(System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Create lookup of the given PCLs to their actual frameworks
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.ExplodePortableFramework(NuGetClone.Frameworks.NuGetFramework,System.Boolean)">
            <summary>
            portable-net45+win8 -> net45, win8
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.GetBestPCL(System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Order PCLs when there is no other way to decide.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.FrameworkReducer.IsBetterPCL(NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Sort PCLs using these criteria
            1. Lowest number of frameworks (highest surface area) wins first
            2. Profile with the highest version numbers wins next
            3. String compare is used as a last resort
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.FrameworkSpecificMapping">
            <summary>
            A keyvalue pair specific to a framework identifier
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkCompatibilityListProvider.GetFrameworksSupporting(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Get a list of frameworks supporting the provided framework. This list
            is not meant to be exhaustive but is instead meant to be human-readable.
            Ex: netstandard1.5 -> netstandardapp1.5, net462, dnxcore50, ...
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkCompatibilityProvider.IsCompatible(NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Ex: IsCompatible(net45, net40) -> true
            Ex: IsCompatible(net40, net45) -> false
            </summary>
            <param name="framework">Project target framework</param>
            <param name="other">Library framework that is going to be installed</param>
            <returns>True if framework supports other</returns>
        </member>
        <member name="T:NuGetClone.Frameworks.IFrameworkMappings">
            <summary>
            A raw list of framework mappings. These are indexed by the framework name provider and in most cases all
            mappings are
            mirrored so that the IFrameworkMappings implementation only needs to provide the minimum amount of
            mappings.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.IdentifierSynonyms">
            <summary>
            Synonym &#8210;&gt; Identifier
            Ex: NET Framework &#8210;&gt; .NET Framework
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.IdentifierShortNames">
            <summary>
            Ex: .NET Framework &#8210;&gt; net
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.ProfileShortNames">
            <summary>
            Ex: WindowsPhone &#8210;&gt; wp
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.EquivalentFrameworks">
            <summary>
            Equal frameworks. Used for legacy conversions.
            ex: Framework: Win8 &lt;&#8210;&gt; Framework: NetCore45 Platform: Win8
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.EquivalentProfiles">
            <summary>
            Framework, EquivalentProfile1, EquivalentProfile2
            Ex: Silverlight, WindowsPhone71, WindowsPhone
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.SubSetFrameworks">
            <summary>
            Frameworks which are subsets of others.
            Ex: .NETCore &#8210;&gt; .NET
            Everything in .NETCore maps to .NET and is one way compatible. Version numbers follow the same format.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.CompatibilityMappings">
            <summary>
            Additional framework compatibility rules beyond name and version matching.
            Ex: .NETFramework supports &#8210;&gt; Native
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.NonPackageBasedFrameworkPrecedence">
            <summary>
            Ordered list of framework identifiers. The first framework in the list will be preferred over other 
            framework identifiers. This is enable better tie breaking in scenarios where legacy frameworks are 
            equivalently compatible to a new framework.
            Example: UAP10.0 &#8210;&gt; win81, wpa81
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.PackageBasedFrameworkPrecedence">
            <summary>
            Same as <see cref="P:NuGetClone.Frameworks.IFrameworkMappings.NonPackageBasedFrameworkPrecedence"/> but is only referred to if all of the packages
            in consideration are package based (determined by <see cref="P:NuGetClone.Frameworks.NuGetFramework.IsPackageBased"/>).
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.EquivalentFrameworkPrecedence">
            <summary>
            Only used to choose between frameworks that are equivalent. This favors more human-readable target
            frameworks identifiers.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.ShortNameReplacements">
            <summary>
            Rewrite folder short names to the given value.
            Ex: dotnet50 &#8210;&gt; dotnet
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkMappings.FullNameReplacements">
            <summary>
            Rewrite full framework names to the given value.
            Ex: .NETPlatform,Version=v0.0 &#8210;&gt; .NETPlatform,Version=v5.0
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetIdentifier(System.String,System.String@)">
            <summary>
            Returns the official framework identifier for an alias or short name.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetShortIdentifier(System.String,System.String@)">
            <summary>
            Gives the short name used for folders in NuGet
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetProfile(System.String,System.String,System.String@)">
            <summary>
            Get the official profile name from the short name.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetShortProfile(System.String,System.String,System.String@)">
            <summary>
            Returns the shortened version of the profile name.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetVersion(System.String,System.Version@)">
            <summary>
            Parses a version string using single digit rules if no dots exist
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPlatformVersion(System.String,System.Version@)">
            <summary>
            Parses a version string. If no dots exist, all digits are treated
            as semver-major, instead of inserting dots.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.GetVersionString(System.String,System.Version)">
            <summary>
            Returns a shortened version. If all digits are single digits no dots will be used.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPortableProfileNumber(System.String,System.Int32@)">
            <summary>
            Tries to parse the portable profile number out of a profile.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPortableProfile(System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework},System.Int32@)">
            <summary>
            Looks up the portable profile number based on the framework list.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPortableFrameworks(System.Int32,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework}@)">
            <summary>
            Returns the frameworks based on a portable profile number.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPortableFrameworks(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework}@)">
            <summary>
            Returns the frameworks based on a portable profile number.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPortableFrameworks(System.String,System.Boolean,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework}@)">
            <summary>
            Returns the frameworks based on a profile string.
            Profile can be either the number in format: Profile=7, or the shortened NuGet version: net45+win8
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPortableFrameworks(System.String,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework}@)">
            <summary>
            Parses a shortened portable framework profile list.
            Ex: net45+win8
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetPortableCompatibilityMappings(System.Int32,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.FrameworkRange}@)">
            <summary>
            Returns ranges of frameworks that are known to be supported by the given portable profile number.
            Ex: Profile7 -> netstandard1.1
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetEquivalentFrameworks(NuGetClone.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework}@)">
            <summary>
            Returns a list of all possible substitutions where the framework name
            have equivalents.
            Ex: sl3 -> wp8
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetEquivalentFrameworks(NuGetClone.Frameworks.FrameworkRange,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework}@)">
            <summary>
            Gives all substitutions for a framework range.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetCompatibilityMappings(NuGetClone.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.FrameworkRange}@)">
            <summary>
            Returns ranges of frameworks that are known to be supported by the given framework.
            Ex: net45 -> native
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetSubSetFrameworks(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Returns all sub sets of the given framework.
            Ex: .NETFramework -> .NETCore
            These will have the same version, but a different framework
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.CompareFrameworks(NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            The ascending order of frameworks should be based on the following ordered groups:
            
            1. Non-package-based frameworks in <see cref="P:NuGetClone.Frameworks.IFrameworkMappings.NonPackageBasedFrameworkPrecedence"/>.
            2. Other non-package-based frameworks.
            3. Package-based frameworks in <see cref="P:NuGetClone.Frameworks.IFrameworkMappings.PackageBasedFrameworkPrecedence"/>.
            4. Other package-based frameworks.
            
            For group #1 and #3, the order within the group is based on the order of the respective precedence list.
            For group #2 and #4, the order is the original order in the incoming list. This should later be made
            consistent between different input orderings by using the <see cref="T:NuGetClone.Frameworks.NuGetFrameworkSorter"/>.
            </summary>
            <remarks>netcore50 is a special case since netcore451 is not packages based, but netcore50 is.
            This sort will treat all versions of netcore as non-packages based.</remarks>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.CompareEquivalentFrameworks(NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Used to pick between two equivalent frameworks. This is meant to favor the more human-readable
            framework. Note that this comparison does not validate that the provided frameworks are indeed
            equivalent (e.g. with
            <see cref="M:NuGetClone.Frameworks.IFrameworkNameProvider.TryGetEquivalentFrameworks(NuGetClone.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{NuGetClone.Frameworks.NuGetFramework}@)"/>).
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.GetShortNameReplacement(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Returns folder short names rewrites.
            Ex: dotnet50 -> dotnet
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.GetFullNameReplacement(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Returns full name rewrites.
            Ex: .NETPlatform,Version=v0.0 -> .NETPlatform,Version=v5.0
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.GetNetStandardVersions">
            <summary>
            Returns all versions of .NETStandard in ascending order.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.IFrameworkNameProvider.GetCompatibleCandidates">
            <summary>
            Returns a list of frameworks that could be compatible with .NETStandard.
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.IFrameworkSpecific">
            <summary>
            A group or object that is specific to a single target framework
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IFrameworkSpecific.TargetFramework">
            <summary>
            Target framework
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IPortableFrameworkMappings.ProfileFrameworks">
            <summary>
            Ex: 5 -> net4, win8
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IPortableFrameworkMappings.ProfileOptionalFrameworks">
            <summary>
            Additional optional frameworks supported in a portable profile.
            Ex: 5 -> MonoAndroid1+MonoTouch1
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.IPortableFrameworkMappings.CompatibilityMappings">
            <summary>
            Compatibility mapping for portable profiles. This is a separate compatibility from that in
            <see cref="P:NuGetClone.Frameworks.IFrameworkMappings.CompatibilityMappings"/>.
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.NuGetFramework">
            <summary>
            A portable implementation of the .NET FrameworkName type with added support for NuGet folder names.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.#ctor(System.String,System.Version,System.String)">
            <summary>
            Creates a new NuGetFramework instance, with an optional profile (only available for netframework)
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.#ctor(System.String,System.Version,System.String,System.Version)">
            <summary>
            Creates a new NuGetFramework instance, with an optional platform and platformVersion (only available for net5.0+)
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.Framework">
            <summary>
            Target framework
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.Version">
            <summary>
            Target framework version
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.Platform">
            <summary>
            Framework Platform (net5.0+)
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.PlatformVersion">
            <summary>
            Framework Platform Version (net5.0+)
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.HasPlatform">
            <summary>
            True if the platform is non-empty
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.HasProfile">
            <summary>
            True if the profile is non-empty
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.Profile">
            <summary>
            Target framework profile
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.DotNetFrameworkName">
            <summary>The TargetFrameworkMoniker identifier of the current NuGetFramework.</summary>
            <remarks>Formatted to a System.Versioning.FrameworkName</remarks>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.GetDotNetFrameworkName(NuGetClone.Frameworks.IFrameworkNameProvider)">
            <summary>The TargetFrameworkMoniker identifier of the current NuGetFramework.</summary>
            <remarks>Formatted to a System.Versioning.FrameworkName</remarks>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.DotNetPlatformName">
            <summary>The TargetPlatformMoniker identifier of the current NuGetFramework.</summary>
            <remarks>Similar to a System.Versioning.FrameworkName, but missing the v at the beginning of the version.</remarks>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.GetShortFolderName">
            <summary>
            Creates the shortened version of the framework using the default mappings.
            Ex: net45
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.GetFrameworkIdentifier">
            <summary>
            Helper that is .NET 5 Era aware to replace identifier when appropriate
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.GetShortFolderName(NuGetClone.Frameworks.IFrameworkNameProvider)">
            <summary>
            Creates the shortened version of the framework using the given mappings.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.IsPCL">
            <summary>
            Portable class library check
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.IsPackageBased">
            <summary>
            True if the framework is packages based.
            Ex: dotnet, dnxcore, netcoreapp, netstandard, uap, netcore50
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.AllFrameworkVersions">
            <summary>
            True if this framework matches for all versions.
            Ex: net
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.IsUnsupported">
            <summary>
            True if this framework was invalid or unknown. This framework is only compatible with Any and Agnostic.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.IsAgnostic">
            <summary>
            True if this framework is non-specific. Always compatible.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.IsAny">
            <summary>
            True if this is the any framework. Always compatible.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.IsSpecificFramework">
            <summary>
            True if this framework is real and not one of the special identifiers.
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.NuGetFramework.IsNet5Era">
            <summary>
            True if this framework is Net5 or later, until we invent something new.
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.NuGetFramework.Comparer">
            <summary>
            Full framework comparison of the identifier, version, profile, platform, and platform version
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.NuGetFramework.FrameworkNameComparer">
            <summary>
            Framework name only comparison.
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.NuGetFramework.PackagesBased">
            <summary>
            Frameworks that are packages based across all versions.
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.NuGetFramework.UnsupportedFramework">
            <summary>
            An unknown or invalid framework
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.NuGetFramework.AgnosticFramework">
            <summary>
            A framework with no specific target framework. This can be used for content only packages.
            </summary>
        </member>
        <member name="F:NuGetClone.Frameworks.NuGetFramework.AnyFramework">
            <summary>
            A wildcard matching all frameworks
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.Parse(System.String)">
            <summary>
            Creates a NuGetFramework from a folder name using the default mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.Parse(System.String,NuGetClone.Frameworks.IFrameworkNameProvider)">
            <summary>
            Creates a NuGetFramework from a folder name using the given mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.ParseComponents(System.String,System.String)">
            <summary>
            Creates a NuGetFramework from individual components
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.ParseComponents(System.String,System.String,NuGetClone.Frameworks.IFrameworkNameProvider)">
            <summary>
            Creates a NuGetFramework from individual components, using the given mappings.
            This method may have individual component preference, as described in the remarks.
            </summary>
            <remarks>
            Profiles and TargetPlatforms can't mix. As such the precedence order is profile over target platforms (TPI, TPV).
            .NETCoreApp,Version=v5.0 and later do not support profiles.
            Target Platforms are ignored for any frameworks not supporting them.
            This allows to handle the old project scenarios where the TargetPlatformIdentifier and TargetPlatformVersion may be set to Windows and v7.0 respectively.
            </remarks>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.ParseFrameworkName(System.String,NuGetClone.Frameworks.IFrameworkNameProvider)">
            <summary>
            Creates a NuGetFramework from a .NET FrameworkName
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.ParseFolder(System.String)">
            <summary>
            Creates a NuGetFramework from a folder name using the default mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.ParseFolder(System.String,NuGetClone.Frameworks.IFrameworkNameProvider)">
            <summary>
            Creates a NuGetFramework from a folder name using the given mappings.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.TryParseDeprecatedFramework(System.String,NuGetClone.Frameworks.NuGetFramework@)">
            <summary>
            Attempt to parse a common but deprecated framework using an exact string match
            Support for these should be dropped as soon as possible.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFramework.TryParseCommonFramework(System.String,NuGetClone.Frameworks.NuGetFramework@)">
            <summary>
            A set of special and common frameworks that can be returned from the list of constants without parsing
            Using the interned frameworks here optimizes comparisons since they can be checked by reference.
            This is designed to optimize
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.NuGetFrameworkFullComparer">
            <summary>
            A case insensitive compare of the framework, version, and profile
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.NuGetFrameworkNameComparer">
            <summary>
            A case insensitive compare of the framework name only
            </summary>
        </member>
        <member name="T:NuGetClone.Frameworks.NuGetFrameworkSorter">
            <summary>
            Sorts NuGet Frameworks in a consistent way for package readers.
            The order is not particularly useful here beyond making things deterministic
            since it compares completely different frameworks.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFrameworkUtility.GetNearest``1(System.Collections.Generic.IEnumerable{``0},NuGetClone.Frameworks.NuGetFramework,System.Func{``0,NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Find the most compatible group based on target framework
            </summary>
            <param name="items">framework specific groups or items</param>
            <param name="framework">project target framework</param>
            <param name="selector">retrieves the framework from the group</param>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFrameworkUtility.GetNearest``1(System.Collections.Generic.IEnumerable{``0},NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.IFrameworkNameProvider,NuGetClone.Frameworks.IFrameworkCompatibilityProvider,System.Func{``0,NuGetClone.Frameworks.NuGetFramework})">
            <summary>
            Find the most compatible group based on target framework
            </summary>
            <param name="items">framework specific groups or items</param>
            <param name="framework">project target framework</param>
            <param name="selector">retrieves the framework from the group</param>
            <param name="frameworkMappings">framework mappings</param>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFrameworkUtility.GetNearest``1(System.Collections.Generic.IEnumerable{``0},NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Find the most compatible group based on target framework
            </summary>
            <param name="items">framework specific groups or items</param>
            <param name="framework">project target framework</param>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFrameworkUtility.GetNearest``1(System.Collections.Generic.IEnumerable{``0},NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.IFrameworkNameProvider,NuGetClone.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Find the most compatible group based on target framework
            </summary>
            <param name="items">framework specific groups or items</param>
            <param name="framework">project target framework</param>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFrameworkUtility.IsCompatibleWithFallbackCheck(NuGetClone.Frameworks.NuGetFramework,NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            Check compatibility with additional checks for the fallback framework.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.NuGetFrameworkUtility.IsNetCore50AndUp(NuGetClone.Frameworks.NuGetFramework)">
            <summary>
            True if the framework is netcore50 or higher. This is where the framework
            becomes packages based.
            </summary>
        </member>
        <member name="M:NuGetClone.Frameworks.OneWayCompatibilityMappingEntry.#ctor(NuGetClone.Frameworks.FrameworkRange,NuGetClone.Frameworks.FrameworkRange)">
            <summary>
            Creates a one way compatibility mapping.
            Ex: net -supports-> native
            </summary>
            <param name="targetFramework">Project framework</param>
            <param name="supportedFramework">Framework that is supported by the project framework</param>
        </member>
        <member name="P:NuGetClone.Frameworks.OneWayCompatibilityMappingEntry.TargetFrameworkRange">
            <summary>
            Primary framework range or project target framework that supports the SuppportedFrameworkRange
            </summary>
        </member>
        <member name="P:NuGetClone.Frameworks.OneWayCompatibilityMappingEntry.SupportedFrameworkRange">
            <summary>
            Framework range that is supported by the TargetFrameworkRange
            </summary>
        </member>
        <member name="T:NuGetClone.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGetClone.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGetClone.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``1(System.Collections.Generic.IList{``0})">
             <summary>
             Avoids allocating an enumerator when enumerating an <see cref="T:System.Collections.Generic.IList`1"/>.
             </summary>
             <remarks>
             <para>
             Returns a struct-based enumerator that avoids heap allocation during enumeration.
             If the underlying type is <see cref="T:System.Collections.Generic.List`1"/> then this method will delegate to <see cref="T:System.Collections.Generic.List`1.Enumerator"/>,
             otherwise the collection's items are accessed by index via <see cref="T:System.Collections.Generic.IList`1"/>'s indexer directly.
             </para>
             <para>
             When using a struct-based enumerator, no heap allocation occurs during enumeration via <see langword="foreach" />.
             This is in contrast to the interface-based enumerator <see cref="T:System.Collections.Generic.IEnumerator`1"/> which will
             always be allocated on the heap.
             </para>
             </remarks>
             <example>
             <code>
             <![CDATA[IList<string> list = ...;
            
             foreach (string item in list.NoAllocEnumerate())
             {
                 // ...
             }]]>
             </code>
             </example>
        </member>
        <member name="T:NuGetClone.NoAllocEnumerateExtensions.OptimisticallyNonAllocatingListEnumerable`1">
            <summary>
            Provides a struct-based enumerator for use with <see cref="T:System.Collections.Generic.IList`1"/>.
            Do not use this type directly. Use <see cref="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``1(System.Collections.Generic.IList{``0})"/> instead.
            </summary>
        </member>
        <member name="T:NuGetClone.NoAllocEnumerateExtensions.OptimisticallyNonAllocatingListEnumerable`1.Enumerator">
            <summary>
            A struct-based enumerator for use with <see cref="T:System.Collections.Generic.IList`1"/>.
            Do not use this type directly. Use <see cref="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``1(System.Collections.Generic.IList{``0})"/> instead.
            </summary>
        </member>
        <member name="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Avoids allocating an enumerator when enumerating an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where the concrete type
             has a well known struct enumerator, such as for <see cref="T:System.Collections.Generic.List`1"/>, or when index-based access is possible via
             <see cref="T:System.Collections.Generic.IList`1"/>.
             </summary>
             <remarks>
             <para>
             Several collection types (e.g. <see cref="T:System.Collections.Generic.List`1"/>) provide a struct-based enumerator type
             (e.g. <see cref="T:System.Collections.Generic.List`1.Enumerator"/>) which the compiler can use in <see langword="foreach" /> statements.
             When using a struct-based enumerator, no heap allocation occurs during such enumeration.
             This is in contrast to the interface-based enumerator <see cref="T:System.Collections.Generic.IEnumerator`1"/> which will
             always be allocated on the heap.
             </para>
             <para>
             This method returns a custom struct enumerator that will avoid any heap allocation if <paramref name="source"/>
             (which is declared via interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>) is actually of known concrete type that
             provides its own struct enumerator. If so, it delegates to that type's enumerator without any boxing
             or other heap allocation.
             </para>
             <para>
             If <paramref name="source"/> is not of a known concrete type, the returned enumerator falls back to the
             interface-based enumerator, which will be allocated on the heap. Benchmarking shows the overhead in
             such cases is low enough to be within the measurement error, meaning this is an inexpensive optimization
             that won't regress behavior and with low downside for cases where it cannot apply an optimization.
             </para>
             </remarks>
             <example>
             <code>
             <![CDATA[IEnumerable<string> source = ...;
            
             foreach (string item in source.NoAllocEnumerate())
             {
                 // ...
             }]]>
             </code>
             </example>
        </member>
        <member name="T:NuGetClone.NoAllocEnumerateExtensions.OptimisticallyNonAllocatingEnumerable`1">
            <summary>
            Provides a struct-based enumerator for use with <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Do not use this type directly. Use <see cref="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``1(System.Collections.Generic.IEnumerable{``0})"/> instead.
            </summary>
        </member>
        <member name="T:NuGetClone.NoAllocEnumerateExtensions.OptimisticallyNonAllocatingEnumerable`1.Enumerator">
            <summary>
            A struct-based enumerator for use with <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Do not use this type directly. Use <see cref="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``1(System.Collections.Generic.IEnumerable{``0})"/> instead.
            </summary>
        </member>
        <member name="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``2(System.Collections.Generic.IDictionary{``0,``1})">
             <summary>
             Avoids allocating an enumerator when enumerating an <see cref="T:System.Collections.Generic.IDictionary`2"/> where the concrete type
             has a well known struct enumerator, such as for <see cref="T:System.Collections.Generic.Dictionary`2"/>.
             </summary>
             <remarks>
             <para>
             Several collection types (e.g. <see cref="T:System.Collections.Generic.Dictionary`2"/>) provide a struct-based enumerator type
             (e.g. <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/>) which the compiler can use in <see langword="foreach" /> statements.
             When using a struct-based enumerator, no heap allocation occurs during such enumeration.
             This is in contrast to the interface-based enumerator <see cref="T:System.Collections.Generic.IEnumerator`1"/> which will
             always be allocated on the heap.
             </para>
             <para>
             This method returns a custom struct enumerator that will avoid any heap allocation if <paramref name="dictionary"/>
             (which is declared via interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>) is actually of known concrete type that
             provides its own struct enumerator. If so, it delegates to that type's enumerator without any boxing
             or other heap allocation.
             </para>
             <para>
             If <paramref name="dictionary"/> is not of a known concrete type, the returned enumerator falls back to the
             interface-based enumerator, which will be allocated on the heap. Benchmarking shows the overhead in
             such cases is low enough to be within the measurement error, meaning this is an inexpensive optimization
             that won't regress behavior and with low downside for cases where it cannot apply an optimization.
             </para>
             </remarks>
             <example>
             <code>
             <![CDATA[IDictionary<string, string> dictionary = ...;
            
             foreach ((string key, string value) in dictionary.NoAllocEnumerate())
             {
                 // ...
             }]]>
             </code>
             </example>
        </member>
        <member name="T:NuGetClone.NoAllocEnumerateExtensions.OptimisticallyNonAllocatingDictionaryEnumerable`2">
            <summary>
            Provides a struct-based enumerator for use with <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Do not use this type directly. Use <see cref="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``2(System.Collections.Generic.IDictionary{``0,``1})"/> instead.
            </summary>
        </member>
        <member name="T:NuGetClone.NoAllocEnumerateExtensions.OptimisticallyNonAllocatingDictionaryEnumerable`2.Enumerator">
            <summary>
            A struct-based enumerator for use with <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Do not use this type directly. Use <see cref="M:NuGetClone.NoAllocEnumerateExtensions.NoAllocEnumerate``2(System.Collections.Generic.IDictionary{``0,``1})"/> instead.
            </summary>
        </member>
        <member name="T:NuGetClone.StringBuilderPool">
            <summary>
            Provides a resource pool that enables reusing instances of <see cref="T:System.Text.StringBuilder"/> instances.
            </summary>
            <remarks>
            <para>
            Renting and returning buffers with an <see cref="T:NuGetClone.StringBuilderPool"/> can increase performance
            in situations where <see cref="T:System.Text.StringBuilder"/> instances are created and destroyed frequently,
            resulting in significant memory pressure on the garbage collector.
            </para>
            <para>
            This class is thread-safe.  All members may be used by multiple threads concurrently.
            </para>
            </remarks>
        </member>
        <member name="F:NuGetClone.StringBuilderPool.Shared">
            <summary>
            Retrieves a shared <see cref="T:NuGetClone.StringBuilderPool"/> instance.
            </summary>
        </member>
        <member name="M:NuGetClone.StringBuilderPool.Rent(System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.Text.StringBuilder"/> that is at least the requested length.
            </summary>
            <param name="minimumCapacity">The minimum capacity of the <see cref="T:System.Text.StringBuilder"/> needed.</param>
            <returns>
            A <see cref="T:System.Text.StringBuilder"/> that is at least <paramref name="minimumCapacity"/> in length.
            </returns>
            <remarks>
            This buffer is loaned to the caller and should be returned to the same pool via
            <see cref="M:NuGetClone.StringBuilderPool.ToStringAndReturn(System.Text.StringBuilder)"/> so that it may be reused in subsequent usage of <see cref="M:NuGetClone.StringBuilderPool.Rent(System.Int32)"/>.
            It is not a fatal error to not return a rented string builder, but failure to do so may lead to
            decreased application performance, as the pool may need to create a new instance to replace
            the one lost.
            </remarks>
        </member>
        <member name="M:NuGetClone.StringBuilderPool.ToStringAndReturn(System.Text.StringBuilder)">
            <summary>
            Returns to the pool an array that was previously obtained via <see cref="M:NuGetClone.StringBuilderPool.Rent(System.Int32)"/> on the same
            <see cref="T:NuGetClone.StringBuilderPool"/> instance, returning the built string.
            </summary>
            <param name="builder">
            The <see cref="T:System.Text.StringBuilder"/> previously obtained from <see cref="M:NuGetClone.StringBuilderPool.Rent(System.Int32)"/> to return to the pool.
            </param>
            <remarks>
            Once a <see cref="T:System.Text.StringBuilder"/> has been returned to the pool, the caller gives up all ownership
            of the instance and must not use it. The reference returned from a given call to <see cref="M:NuGetClone.StringBuilderPool.Rent(System.Int32)"/>
            must only be returned via <see cref="M:NuGetClone.StringBuilderPool.ToStringAndReturn(System.Text.StringBuilder)"/> once.  The default <see cref="T:NuGetClone.StringBuilderPool"/>
            may hold onto the returned instance in order to rent it again, or it may release the returned instance
            if it's determined that the pool already has enough instances stored.
            </remarks>
            <returns>The string, built from <paramref name="builder"/>.</returns>
        </member>
    </members>
</doc>
