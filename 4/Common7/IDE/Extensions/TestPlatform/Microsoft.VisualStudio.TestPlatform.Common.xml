<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.TestPlatform.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformDefaults">
            <summary>
            Defines the defaults used across different components.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformDefaults.MaxNumberOfEventsLoggerEventQueueCanHold">
            <summary>
            string in the vstest.console.exe.config that specifies the bound on no of jobs in the job queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformDefaults.DefaultMaxNumberOfEventsLoggerEventQueueCanHold">
            <summary>
            Default bound on the job queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformDefaults.MaxBytesLoggerEventQueueCanHold">
            <summary>
            string in the vstest.console.exe.config that specifies the size bound on job queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformDefaults.EnableBoundsOnLoggerEventQueue">
            <summary>
            string in the rocksteady.exe.config that specifies whether or not we should try to keep memory usage by queue bounded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformDefaults.DefaultMaxBytesLoggerEventQueueCanHold">
            <summary>
            Default bound on the total size of all objects in the job queue. (25MB)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformDefaults.DefaultEnableBoundsOnLoggerEventQueue">
            <summary>
            Default value of the boolean that determines whether or not job queue should be bounded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformConstants">
            <summary>
            Defines the constants used across different components.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformConstants.TestAdapterEndsWithPattern">
            <summary>
            Pattern used to find the test adapters library using String.EndWith
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformConstants.TestLoggerEndsWithPattern">
            <summary>
            Pattern used to find the test loggers library using String.EndWith
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformConstants.DataCollectorEndsWithPattern">
            <summary>
            Pattern used to find the data collectors library using String.EndWith
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.TestPlatformConstants.RunTimeEndsWithPattern">
            <summary>
            Pattern used to find the run time providers library using String.EndWith
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.AfterTestRunEndResult">
            <summary>
            Payload object that is used to exchange data between datacollector process and runner process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.AfterTestRunEndResult.#ctor(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.AfterTestRunEndResult"/> class.
            </summary>
            <param name="attachmentSets">
            The collection of attachment sets.
            </param>
            <param name="metrics">
            The metrics.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.AfterTestRunEndResult.#ctor(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.AfterTestRunEndResult"/> class.
            </summary>
            <param name="attachmentSets">
            The collection of attachment sets.
            </param>
            <param name="invokedDataCollectors">
            The collection of the DataCollectors invoked during test session
            </param>
            <param name="metrics">
            The metrics.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.BeforeTestRunStartResult">
            <summary>
            Payload object that is used to exchange data between datacollector process and runner process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.BeforeTestRunStartResult.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.BeforeTestRunStartResult"/> class.
            </summary>
            <param name="environmentVariables">
            The environment variables.
            </param>
            <param name="dataCollectionEventsPort">
            The data Collection Events Port.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.BeforeTestRunStartResult.EnvironmentVariables">
            <summary>
            Gets the environment variable dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollection.BeforeTestRunStartResult.DataCollectionEventsPort">
            <summary>
            Gets the data collection events port.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager">
             <summary>
             Manages file transfer from data collector to test runner service.
            
             Events are handled sequentially so it's not possible have parallel AddAttachment/GetAttachments for the same DataCollectionContext.
             DataCollectionContext can be a session context(session start/end) or a test case context(test case start/end).
            
             We have two type of events that will fire a collection of files "session end" and "test case end".
             File are sent and copied/moved in parallel using async tasks, for these reason we need to use an async structure ConcurrentDictionary
             to be able to handle parallel test case start/end events(if host run tests in parallel).
            
             We could avoid to use ConcurrentDictionary for the list of the attachment sets of a specific DataCollectionContext, but
             we don't know how the user will implement the datacollector and they could send file out of events(wrong usage, no more expected sequential access AddAttachment->GetAttachments),
             so we prefer protect every collection. This not means that outcome will be "always correct"(file attached in a correct way) but at least we avoid exceptions.
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.DefaultOutputDirectoryName">
            <summary>
            Default results directory to be used when user didn't specify.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager._messageSink">
            <summary>
            Logger for data collection messages
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager._attachmentTasks">
            <summary>
            Attachment transfer tasks associated with a given datacollection context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager._cancellationTokenSource">
            <summary>
            Use to cancel attachment transfers if test run is canceled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager._fileHelper">
            <summary>
            File helper instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.#ctor(Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager"/> class.
            </summary>
            <param name="fileHelper">File helper instance.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.SessionOutputDirectory">
            <summary>
            Gets the session output directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.AttachmentSets">
            <summary>
            Gets the attachment sets for the given datacollection context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionId,System.String,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.GetAttachments(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.AddAttachment(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation,System.ComponentModel.AsyncCompletedEventHandler,System.Uri,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.Cancel">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.Validate(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation,System.String)">
            <summary>
            Sanity checks on CopyRequestData
            </summary>
            <param name="fileTransferInfo">
            The file Transfer Info.
            </param>
            <param name="localFilePath">
            The local File Path.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.AddNewFileTransfer(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation,System.ComponentModel.AsyncCompletedEventHandler,System.Uri,System.String)">
            <summary>
            Add a new file transfer (either copy/move) request.
            </summary>
            <param name="fileTransferInfo">
            The file Transfer Info.
            </param>
            <param name="sendFileCompletedCallback">
            The send File Completed Callback.
            </param>
            <param name="uri">
            The uri.
            </param>
            <param name="friendlyName">
            The friendly Name.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionAttachmentManager.LogError(System.String,System.Uri,System.String,System.Guid)">
            <summary>
            Logs an error message.
            </summary>
            <param name="errorMessage">
            The error message.
            </param>
            <param name="collectorUri">
            The collector uri.
            </param>
            <param name="collectorFriendlyName">
            The collector friendly name.
            </param>
            <param name="testCaseId">
            Id of testCase if available, null otherwise.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable">
            <summary>
            An environment variable requested to be set in the test execution environment by a data collector, including the
            friendly names of data collectors that requested it.
            This is needed to find list of environment variables needed for test run after eliminating the duplicate name and keys.
            For details check DataCollectionPluginManager.AddCollectorEnvironmentVariables() method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable._variable">
            <summary>
            Variable name and requested value
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable._dataCollectorsThatRequested">
            <summary>
            Friendly names of data collectors that requested this environment variable
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable"/> class.
            </summary>
            <param name="variable">
            Variable name and requested value.
            </param>
            <param name="requestingDataCollectorFriendlyName">
            Friendly name of the data collector requesting it.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable.Name">
            <summary>
            Gets variable name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable.Value">
            <summary>
            Gets requested value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable.FirstDataCollectorThatRequested">
            <summary>
            Gets friendly name of the first data collector that requested this environment variable
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable.AddRequestingDataCollector(System.String)">
            <summary>
            Adds the data collector to the list of data collectors that requested this variable.
            </summary>
            <param name="requestingDataCollectorFriendlyName">Friendly name of requesting data collector.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager">
            <summary>
            Manages data collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._isDataCollectionEnabled">
            <summary>
            Value indicating whether data collection is currently enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._dataCollectionEnvironmentContext">
            <summary>
            Data collection environment context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._attachmentManager">
            <summary>
            Attachment manager for performing file transfers for datacollectors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._messageSink">
            <summary>
            Message sink for sending data collection messages to client..
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._events">
            <summary>
            Events that can be subscribed by datacollectors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._telemetryReporter">
            <summary>
            Telemetry reporter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._isDisposed">
            <summary>
            Specifies whether the object is disposed or not.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._dataCollectorExtensionManager">
            <summary>
            Extension manager for data collectors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager._dataCollectionTelemetryManager">
            <summary>
            Request data
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.#ctor(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager"/> class.
            </summary>
            <param name="messageSink">
            The message Sink.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.#ctor(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionTelemetryManager,Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager"/> class.
            </summary>
            <param name="datacollectionAttachmentManager">
            The datacollection Attachment Manager.
            </param>
            <param name="messageSink">
            The message Sink.
            </param>
            <remarks>
            The constructor is not public because the factory method should be used to get instances of this class.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.Instance">
            <summary>
            Gets the instance of DataCollectionManager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.RunDataCollectors">
            <summary>
            Gets cache of data collectors associated with the run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.DataCollectorExtensionManager">
            <summary>
            Gets the data collector extension manager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.Create(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter)">
            <summary>
            Creates an instance of the TestLoggerExtensionManager.
            </summary>
            <param name="messageSink">
            The message sink.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.InitializeDataCollectors(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.SessionEnded(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.GetInvokedDataCollectors">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.TestHostLaunched(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.SessionStarted(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.TestCaseStarted(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.TestCaseEnded(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.TryGetUriFromFriendlyName(System.String,System.String@)">
            <summary>
            Tries to get uri of the data collector corresponding to the friendly name. If no such data collector exists return null.
            </summary>
            <param name="friendlyName">The friendly Name.</param>
            <param name="dataCollectorUri">The data collector Uri.</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.TryGetDataCollectorConfig(System.String)">
            <summary>
            Gets the DataCollectorConfig using uri.
            </summary>
            <param name="extensionUri">
            The extension uri.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.TryGetTestExtension(System.String)">
            <summary>
            Gets the extension using uri.
            </summary>
            <param name="extensionUri">
            The extension uri.
            </param>
            <returns>
            The <see cref="N:Microsoft.VisualStudio.TestPlatform.Common.DataCollector"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.LoadAndInitialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings,System.String)">
            <summary>
            Loads and initializes data collector using data collector settings.
            </summary>
            <param name="dataCollectorSettings">
            The data collector settings.
            </param>
            <param name="settingsXml"> runsettings Xml</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.GetDataCollectorsEnabledForRun(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings)">
            <summary>
            Finds data collector enabled for the run in data collection settings.
            </summary>
            <param name="dataCollectionSettings">data collection settings</param>
            <returns>List of enabled data collectors</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.LogWarning(System.String)">
            <summary>
            Sends a warning message against the session which is not associated with a data collector.
            </summary>
            <remarks>
            This should only be used when we do not have the data collector info yet.  After we have the data
            collector info we can use the data collectors logger for errors.
            </remarks>
            <param name="warningMessage">The message to be logged.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.SendEvent(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs)">
            <summary>
            Sends the event to all data collectors and fires a callback on the sender, letting it
            know when all plugins have completed processing the event
            </summary>
            <param name="args">The context information for the event</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.GetEnvironmentVariables(System.Boolean@)">
            <summary>
            The get environment variables.
            </summary>
            <param name="unloadedAnyCollector">
            The unloaded any collector.
            </param>
            <returns>
            Dictionary of variable name as key and collector requested environment variable as value.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.AddCollectorEnvironmentVariables(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation,System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionEnvironmentVariable})">
            <summary>
            Collects environment variable to be set in test process by avoiding duplicates
            and detecting override of variable value by multiple adapters.
            </summary>
            <param name="dataCollectionWrapper">
            The data Collection Wrapper.
            </param>
            <param name="dataCollectorEnvironmentVariables">
            Environment variables required for already loaded plugin.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionManager.RemoveDataCollectors(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation})">
            <summary>
            The remove data collectors.
            </summary>
            <param name="dataCollectorsToRemove">
            The data collectors to remove.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionTelemetryManager">
            <summary>
            Stores and provides telemetry information for data collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionTelemetryManager.RecordEnvironmentVariableAddition(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectionTelemetryManager.RecordEnvironmentVariableConflict(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig">
            <summary>
            The data collector config.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig"/> class.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.DataCollectorType">
            <summary>
            Gets the data collector type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.TypeUri">
            <summary>
            Gets the type uri.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.FriendlyName">
            <summary>
            Gets the friendly name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.IdentifierData">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.Metadata">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.AttachmentsProcessorType">
            <summary>
            Gets attachments processor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.HasAttachmentsProcessor">
            <summary>
            Check if collector registers an attachment processor.
            </summary>
            <returns>True if collector registers an attachment processor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.GetTypeUri(System.Type)">
            <summary>
            Gets the Type Uri for the data collector.
            </summary>
            <param name="dataCollectorType">The data collector to get the Type URI for.</param>
            <returns>Type Uri of the data collector.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.GetAttachmentsProcessors(System.Type)">
            <summary>
            Gets the attachment processor for the data collector.
            </summary>
            <param name="dataCollectorType">The data collector to get the attachment processor for.</param>
            <returns>Type of the attachment processor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.GetFriendlyName(System.Type)">
            <summary>
            Gets the friendly name for the data collector.
            </summary>
            <param name="dataCollectorType">The data collector to get the Type URI for.</param>
            <returns>Friendly name of the data collector.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig.GetAttributes(System.Type,System.Type)">
            <summary>
            Gets the attributes of the specified type from the data collector type.
            </summary>
            <param name="dataCollectorType">
            Data collector type to get attribute from.
            </param>
            <param name="attributeType">
            The type of attribute to look for.
            </param>
            <returns>
            Array of attributes matching the type provided.  Will be an empty array if none were found.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation">
            <summary>
            Encapsulates datacollector object and other objects required to facilitate datacollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector,System.Xml.XmlElement,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig,Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation"/> class.
            </summary>
            <param name="dataCollector">
            The data collector.
            </param>
            <param name="configurationElement">
            The configuration element.
            </param>
            <param name="dataCollectorConfig">
            The data collector config.
            </param>
            <param name="environmentContext">
            The environment Context.
            </param>
            <param name="attachmentManager">
            The attachment Manager.
            </param>
            <param name="events">
            The events.
            </param>
            <param name="messageSink">
            The message Sink.
            </param>
            <param name="settingsXml"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.DataCollector">
            <summary>
            Gets or sets the data collector.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.ConfigurationElement">
            <summary>
            Gets or sets the configuration element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.DataCollectorConfig">
            <summary>
            Gets or sets the data collector config.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.Events">
            <summary>
            Gets the events object on which the collector registers for events
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.DataCollectionSink">
            <summary>
            Gets the datacollection sink.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.EnvironmentContext">
            <summary>
            Gets the data collection environment context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.Logger">
            <summary>
            Gets the data collection logger
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.SettingsXml">
            <summary>
            Gets the data collection logger
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.TestExecutionEnvironmentVariables">
            <summary>
            Gets or sets environment variables supplied by the data collector.
            These are available after the collector has been initialized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.InitializeDataCollector(Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter)">
            <summary>
            Initializes datacollectors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.DisposeDataCollector">
            <summary>
            Disposes datacollector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation.SetTestExecutionEnvironmentVariables">
            <summary>
            The get test execution environment variables sync.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager">
            <summary>
            The DataCollectionAttachmentManager Interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionId,System.String,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink)">
            <summary>
            Initializes session, output directory and data collection log.
            </summary>
            <param name="id">
            The id.
            </param>
            <param name="outputDirectory">
            The output directory.
            </param>
            <param name="messageSink">
            The message Sink.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager.GetAttachments(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext)">
            <summary>
            Gets attachment sets associated with given collection context.
            </summary>
            <param name="dataCollectionContext">
            The data collection context.
            </param>
            <returns>
            The <see cref="!:List"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager.AddAttachment(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation,System.ComponentModel.AsyncCompletedEventHandler,System.Uri,System.String)">
            <summary>
            Adds new attachment to current context
            </summary>
            <param name="fileTransferInfo">
            The file Transfer Info.
            </param>
            <param name="sendFileCompletedCallback">
            The send File Completed Callback.
            </param>
            <param name="dataCollectorUri">
            Uri of the data collector.
            </param>
            <param name="friendlyName">
            The friendly Name.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager.Cancel">
            <summary>
            Stops processing further transfer requests as test run is canceled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager">
            <summary>
            Defines the Data Collection Manager for Data Collectors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager.InitializeDataCollectors(System.String)">
            <summary>
            Loads and initializes data collector plugins.
            </summary>
            <param name="settingsXml">Run Settings which has DataCollector configuration.</param>
            <returns>Environment variables.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager.TestCaseStarted(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs)">
            <summary>
            Raises TestCaseStart event to all data collectors configured for run.
            </summary>
            <param name="testCaseStartEventArgs">TestCaseStart event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager.TestCaseEnded(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs)">
            <summary>
            Raises TestCaseEnd event to all data collectors configured for run.
            </summary>
            <param name="testCaseEndEventArgs">
            The test Case End Event Args.
            </param>
            <returns>
            Collection of  testCase attachmentSet.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager.TestHostLaunched(System.Int32)">
            <summary>
            Raises TestHostLaunched event to all data collectors configured for run.
            </summary>
            <param name="processId">
            Process ID of test host.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager.SessionStarted(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs)">
            <summary>
            Raises SessionStart event to all data collectors configured for run.
            </summary>
            <param name="sessionStartEventArgs">
            The session start Event Args.
            </param>
            <returns>boolean value specifying whether test case events are subscribed by datacollectors. Based on this execution process will decide whether to send TestCaseStart and TestCaseEnd events to dataCollector process.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager.SessionEnded(System.Boolean)">
            <summary>
            Raises SessionEnd event to all data collectors configured for run.
            </summary>
            <param name="isCancelled">
            Boolean to specify is the test run is canceled or not.
            </param>
            <returns>
            Collection of session attachmentSet.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionManager.GetInvokedDataCollectors">
            <summary>
            Return a collections of the invoked data collectors
            </summary>
            <returns>Collection of data collectors.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionTelemetryManager">
            <summary>
            The IDataCollectionTelemetryManager Interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionTelemetryManager.RecordEnvironmentVariableAddition(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation,System.String,System.String)">
            <summary>
            Record telemetry regarding environment variable added.
            </summary>
            <param name="dataCollectorInformation">
            Data collector information which requested environment variable.
            </param>
            <param name="name">
            Environment variable name.
            </param>
            <param name="value">
            Environment variable value.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionTelemetryManager.RecordEnvironmentVariableConflict(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorInformation,System.String,System.String,System.String)">
            <summary>
            Record telemetry regarding environment variable is conflicting.
            </summary>
            <param name="dataCollectorInformation">
            Data collector information which requested environment variable.
            </param>
            <param name="name">
            Environment variable name.
            </param>
            <param name="value">
            Environment variable value.
            </param>
            <param name="existingValue">
            Environment variable value that was requested previously.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink">
            <summary>
            Expose methods to be used by data collection process to send messages to Test Platform Client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink.SendMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs)">
            <summary>
            Data collection message as sent by DataCollectionLogger.
            </summary>
            <param name="args">Data collection message event args.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents">
            <summary>
            The test platform data collection events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents._eventArgsToEventInvokerMap">
            <summary>
            Maps the type of event args to the multi cast delegate for that event
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents"/> class by mapping the types of expected event args to the multi cast
            delegate that invokes the event on registered targets
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.EventInvoker">
            <summary>
            Delegate for the event invoker methods (OnSessionStart, OnTestCaseResume, etc.)
            </summary>
            <param name="e">
            Contains the event data
            </param>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.TestHostLaunched">
            <summary>
            Raised when test host process has initialized
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.SessionStart">
            <summary>
            Raised when a session is starting
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.SessionEnd">
            <summary>
            Raised when a session is ending
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.TestCaseStart">
            <summary>
            Raised when a test case is starting
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.TestCaseEnd">
            <summary>
            Raised when a test case is ending
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.RaiseEvent(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs)">
            <summary>
            Raises the event corresponding to the event arguments to all registered handlers
            </summary>
            <param name="e">
            Contains the event data
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.AreTestCaseEventsSubscribed">
            <summary>
            Checks whether any data collector has subscribed for test case events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.OnTestHostLaunched(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs)">
            <summary>
            Raises the TestHostLaunched event
            </summary>
            <param name="e">
            Contains the event data
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.OnSessionStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs)">
            <summary>
            Raises the SessionStart event
            </summary>
            <param name="e">
            Contains the event data
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.OnSessionEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs)">
            <summary>
            Raises the SessionEnd event
            </summary>
            <param name="e">
            Contains the event data
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.OnTestCaseStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs)">
            <summary>
            Raises the TestCaseStart event
            </summary>
            <param name="e">
            Contains the event data
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionEvents.OnTestCaseEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs)">
            <summary>
            Raises the TestCaseEnd event
            </summary>
            <param name="e">
            Contains the event data
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger">
            <summary>
            Class used by data collectors to send messages to the client
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger._dataCollectorConfig">
            <summary>
            DataCollector's config info.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger._sink">
            <summary>
            Message sink.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger.#ctor(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IMessageSink,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger"/> class.
            </summary>
            <param name="sink">
            The underlying raw IMessageSink.  Cannot be null.
            </param>
            <param name="dataCollectorConfig">
            The data Collector Information.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger.LogError(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger.LogError(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger.LogWarning(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionLogger.SendTextMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel)">
            <summary>
            Sends text to message sink.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="text">
            The text.
            </param>
            <param name="level">
            The level.
            </param>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionSink">
            <summary>
            The test platform data collection sink.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionSink.#ctor(Microsoft.VisualStudio.TestPlatform.Common.DataCollector.Interfaces.IDataCollectionAttachmentManager,Microsoft.VisualStudio.TestPlatform.Common.DataCollector.DataCollectorConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionSink"/> class.
            Creates a data collector sink for data transfer.
            </summary>
            <param name="attachmentManager">
            The attachment Manager.
            </param>
            <param name="dataCollectorConfig">
            Data collector info.
            </param>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionSink.SendFileCompleted">
            <summary>
            Event handler for handling file transfer completed event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionSink.AttachmentManager">
            <summary>
            Gets or sets message sink to transfer collection message.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionSink.DataCollectorConfig">
            <summary>
            Gets or sets dataCollector with which this data sink is associated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.DataCollector.TestPlatformDataCollectionSink.SendFileAsync(Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation)">
            <summary>
            Sends a file asynchronously.
            </summary>
            <param name="fileTransferInformation">Information about the file being transferred.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Exceptions.InvalidLoggerException.#ctor(System.String)">
            <summary>
            Initializes with the message.
            </summary>
            <param name="message">Message for the exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Exceptions.InvalidLoggerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes with message and inner exception.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorExtensionManager">
            <summary>
            Manages loading and provides access to data collector extensions implementing the
            DataCollector interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorExtensionManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector,System.Collections.Generic.Dictionary{System.String,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IDataCollectorCapabilities}},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Default constructor.
            </summary>
            <param name="unfilteredTestExtensions">
            The unfiltered Test Extensions.
            </param>
            <param name="testExtensions">
            The test Extensions.
            </param>
            <param name="logger">
            The logger.
            </param>
            <remarks>
            The constructor is not public because the factory method should be used to get instances of this class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorExtensionManager.Create(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Gets an instance of the DataCollectorExtensionManager.
            </summary>
            <param name="messageLogger">
            The message Logger.
            </param>
            <returns>
            The DataCollectorExtensionManager.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorExtensionManager.Create(System.String,System.Boolean,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Gets an instance of the DataCollectorExtensionManager.
            </summary>
            <param name="extensionAssemblyFilePath">
            File path that contains data collectors to load.
            </param>
            <param name="skipCache">
            Skip the extensions cache.
            </param>
            <param name="messageLogger">
            The message Logger.
            </param>
            <returns>
            The DataCollectorExtensionManager.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorMetadata">
            <summary>
            Hold data about the Data Collector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorMetadata.#ctor(System.String,System.String)">
            <summary>
            Constructor for DataCollectorMetadata
            </summary>
            <param name="extension">
            Uri identifying the data collector.
            </param>
            <param name="friendlyName">
            The friendly Name.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorMetadata.#ctor(System.String,System.String,System.Boolean)" -->
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorMetadata.ExtensionUri">
            <summary>
            Gets Uri identifying the data collector.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorMetadata.FriendlyName">
            <summary>
            Gets Friendly Name identifying the data collector.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.DataCollectorMetadata.HasAttachmentProcessor">
            <summary>
            Check if the data collector has got attachment processor registered
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager">
            <summary>
            Responsible for managing the Test Discoverer extensions which are available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscovererCapabilities}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer,System.Collections.Generic.Dictionary{System.String,System.Object}}})">
            <summary>
            Default constructor.
            </summary>
            <remarks>The factory should be used for getting instances of this type so the constructor is not public.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager.UnfilteredDiscoverers">
            <summary>
            Gets the unfiltered list of test discoverers which are available.
            </summary>
            <remarks>
            Used in the /ListDiscoverers command line argument processor to generically list out extensions.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager.Discoverers">
            <summary>
            Gets the discoverers which are available for discovering tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager.Create">
            <summary>
            Gets an instance of the Test Discovery Extension Manager.
            </summary>
            <returns>
            Instance of the Test Discovery Extension Manager
            </returns>
            <remarks>
            This would provide a discovery extension manager where extensions in
            all the extension assemblies are discovered. This is cached.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager.GetDiscoveryExtensionManager(System.String)">
            <summary>
            Gets an instance of the Test Discovery Extension Manager for the extension.
            </summary>
            <param name="extensionAssembly"> The extension assembly. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager"/> instance. </returns>
            <remarks>
            This would provide a discovery extension manager where extensions in
            only the extension assembly provided are discovered. This is not cached
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager.LoadAndInitializeAllExtensions(System.Boolean)">
            <summary>
            Loads and Initializes all the extensions.
            </summary>
            <param name="throwOnError"> The throw On Error. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscoveryExtensionManager.Destroy">
            <summary>
            Destroys the cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscovererMetadata">
            <summary>
            Hold data about the Test discoverer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscovererMetadata.#ctor(System.Collections.Generic.IReadOnlyCollection{System.String},System.String,Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyType,System.Boolean)">
            <summary>
            The default constructor.
            </summary>
            <param name="fileExtensions"> The file Extensions. </param>
            <param name="defaultExecutorUri"> The default Executor Uri. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscovererMetadata.FileExtension">
            <summary>
            Gets file extensions supported by the discoverer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscovererMetadata.DefaultExecutorUri">
            <summary>
            Gets the default executor Uri for this discoverer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscovererMetadata.AssemblyType">
            <summary>
            Gets assembly type supported by the discoverer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestDiscovererMetadata.IsDirectoryBased">
            <summary>
            <see langword="true"/> if the discoverer plugin is decorated with <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute"/>,
            <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager">
            <summary>
            Manages the Test Executor extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor,System.Collections.Generic.Dictionary{System.String,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExecutorCapabilities}},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Default constructor.
            </summary>
            <param name="unfilteredTestExtensions"> The unfiltered Test Extensions. </param>
            <param name="testExtensions"> The test Extensions. </param>
            <param name="logger"> The logger. </param>
            <remarks>
            This constructor is not public because instances should be retrieved using the
            factory method.  The constructor is protected for testing purposes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager.MergeTestExtensionLists``3(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``0,``2}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``1,``2}})">
             <summary>
             Merges two test extension lists.
             </summary>
            
             <typeparam name="TExecutor1">Type of first test extension.</typeparam>
             <typeparam name="TExecutor2">Type of second test extension.</typeparam>
             <typeparam name="TValue">Type of the value used in the lazy extension expression.</typeparam>
            
             <param name="testExtensions1">First test extension list.</param>
             <param name="testExtensions2">Second test extension list.</param>
            
             <returns>A merged list of test extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager.Create">
            <summary>
            Creates the TestExecutorExtensionManager.
            </summary>
            <returns>Instance of the TestExecutorExtensionManager</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager.GetExecutionExtensionManager(System.String)">
            <summary>
            Gets an instance of the Test Execution Extension Manager for the extension.
            </summary>
            <param name="extensionAssembly"> The extension assembly. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager"/>. </returns>
            <remarks>
            This would provide an execution extension manager where extensions in
            only the extension assembly provided are discovered. This is not cached.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager.Destroy">
            <summary>
            Destroy the TestExecutorExtensionManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorExtensionManager.LoadAndInitializeAllExtensions(System.Boolean)">
            <summary>
            Load all the executors and fail on error
            </summary>
            <param name="shouldThrowOnError"> Indicates whether this method should throw on error. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorMetadata">
            <summary>
            Holds data about the Test executor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorMetadata.#ctor(System.String)">
            <summary>
            The constructor
            </summary>
            <param name="extensionUri">Uri identifying the executor</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExecutorMetadata.ExtensionUri">
            <summary>
            Gets Uri identifying the executor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2">
            <summary>
            Generic base class for managing extensions and looking them up by their URI.
            </summary>
            <typeparam name="TExtension">The type of the extension.</typeparam>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2._logger">
            <summary>
            Used for logging errors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{`0,System.Collections.Generic.Dictionary{System.String,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{`0,`1}},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Default constructor.
            </summary>
            <param name="unfilteredTestExtensions">
            The unfiltered Test Extensions.
            </param>
            <param name="testExtensions">
            The test Extensions.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2.UnfilteredTestExtensions">
            <summary>
            Gets unfiltered list of test extensions which are available.
            </summary>
            <remarks>
            When we populate the "TestExtensions" property it
            will filter out extensions which are missing required pieces of metadata such
            as the "ExtensionUri".  This field is here so we can report on extensions which
            are missing metadata.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2.TestExtensions">
            <summary>
            Gets filtered list of test extensions which are available.
            </summary>
            <remarks>
            When we populate the "TestExtensions" property it
            will filter out extensions which are missing required pieces of metadata such
            as the "ExtensionUri".  This field is here so we can report on extensions which
            are missing metadata.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2.TestExtensionByUri">
            <summary>
            Gets mapping between test extension URI and test extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2.TryGetTestExtension(System.Uri)">
            <summary>
            Looks up the test extension by its URI.
            </summary>
            <param name="extensionUri">The URI of the test extension to be looked up.</param>
            <returns>The test extension or null if one was not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2.TryGetTestExtension(System.String)">
            <summary>
            Looks up the test extension by its URI (passed as a string).
            </summary>
            <param name="extensionUri">The URI of the test extension to be looked up.</param>
            <returns>The test extension or null if one was not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestExtensionManager`2.PopulateMap">
            <summary>
            Populate the extension map.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerExtensionManager">
            <summary>
            Manages loading and provides access to logging extensions implementing the
            ITestLogger interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerExtensionManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLogger,System.Collections.Generic.Dictionary{System.String,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLogger,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestLoggerCapabilities}},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerExtensionManager"/> class.
            </summary>
            <param name="unfilteredTestExtensions">
            The unfiltered Test Extensions.
            </param>
            <param name="testExtensions">
            The test Extensions.
            </param>
            <param name="logger">
            The logger.
            </param>
            <remarks>
            The constructor is not public because the factory method should be used to get instances of this class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerExtensionManager.Create(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Gets an instance of the TestLoggerExtensionManager.
            </summary>
            <param name="messageLogger">
            The message Logger.
            </param>
            <returns>
            The TestLoggerExtensionManager.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerMetadata">
            <summary>
            Hold data about the Test logger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerMetadata.#ctor(System.String,System.String)">
            <summary>
            Constructor for TestLoggerMetadata
            </summary>
            <param name="extension">
            Uri identifying the logger.
            </param>
            <param name="friendlyName">
            The friendly Name.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerMetadata.ExtensionUri">
            <summary>
            Gets Uri identifying the logger.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestLoggerMetadata.FriendlyName">
            <summary>
            Gets Friendly Name identifying the logger.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache">
            <summary>
            The test plugin cache.
            </summary>
            <remarks>Making this a singleton to offer better unit testing.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache._assemblyResolver">
            <summary>
            Assembly resolver used to resolve the additional extensions
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache._lockForExtensionsUpdate">
            <summary>
            Lock for extensions update
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.TestExtensions">
            <summary>
            Gets the test extensions discovered by the cache until now.
            </summary>
            <remarks>Returns null if discovery of extensions is not done.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.GetExtensionPaths(System.String,System.Boolean)">
            <summary>
            Gets a list of all extension paths filtered by input string.
            </summary>
            <param name="endsWithPattern">Pattern to filter extension paths.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.DiscoverTestExtensions``2(System.String)">
            <summary>
            Performs discovery of specific type of test extensions in files ending with the specified pattern.
            </summary>
            <typeparam name="TPluginInfo">
            Type of Plugin info.
            </typeparam>
            <typeparam name="TExtension">
            Type of extension.
            </typeparam>
            <param name="endsWithPattern">
            Pattern used to select files using String.EndsWith
            </param>
            <returns>
            The <see cref="!:Dictionary"/>. of test plugin info.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.UpdateExtensions(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Use the parameter path to extensions
            </summary>
            <param name="additionalExtensionsPath">List of extension paths</param>
            <param name="skipExtensionFilters">Skip extension name filtering (if true)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.ClearExtensions">
            <summary>
            Clear the previously cached extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.AddResolverSearchDirectories(System.String[])">
            <summary>
            Add search directories to assembly resolver
            </summary>
            <param name="directories"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.GetTestExtensions``2(System.String,System.Boolean)">
            <summary>
            The get test extensions.
            </summary>
            <param name="extensionAssembly">
            The extension assembly.
            </param>
            <param name="skipCache">
            Skip the extensions cache.
            </param>
            <typeparam name="TPluginInfo">
            Type of Test plugin info.
            </typeparam>
            <typeparam name="TExtension">
            Type of extension.
            </typeparam>
            <returns>
            The <see cref="!:Dictionary"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.GetResolutionPaths(System.String)">
            <summary>
            Gets the resolution paths for the extension assembly to facilitate assembly resolution.
            </summary>
            <param name="extensionAssembly">The extension assembly.</param>
            <returns>Resolution paths for the assembly.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.GetDefaultResolutionPaths">
            <summary>
            Gets the default set of resolution paths for the assembly resolution
            </summary>
            <returns>List of paths.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.GetFilteredExtensions(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get the files which match the regex pattern
            </summary>
            <param name="extensions">
            The extensions.
            </param>
            <param name="endsWithPattern">
            Pattern used to select files using String.EndsWith
            </param>
            <returns>
            The list of files which match the regex pattern
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.GetTestExtensions``2(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the test extensions defined in the extension assembly list.
            </summary>
            <typeparam name="TPluginInfo">
            Type of PluginInfo.
            </typeparam>
            <typeparam name="TExtension">
            Type of Extension.
            </typeparam>
            <param name="extensionPaths">
            Extension assembly paths.
            </param>
            <returns>
            List of extensions.
            </returns>
            <remarks>
            Added to mock out dependency from the actual test plugin discovery as such.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginCache.LogExtensions">
            <summary>
            Log the extensions
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginDiscoverer">
            <summary>
            Discovers test extensions in a directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginDiscoverer.GetTestExtensionsInformation``2(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about each of the test extensions available.
            </summary>
            <param name="extensionPaths">
                The path to the extensions.
            </param>
            <returns>
            A dictionary of assembly qualified name and test plugin information.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginDiscoverer.GetTestExtensionsFromFiles``2(System.String[],System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Gets test extension information from the given collection of files.
            </summary>
            <typeparam name="TPluginInfo">
            Type of Test Plugin Information.
            </typeparam>
            <typeparam name="TExtension">
            Type of extension.
            </typeparam>
            <param name="files">
            List of dll's to check for test extension availability
            </param>
            <param name="pluginInfos">
            Test plugins collection to add to.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginDiscoverer.GetTestExtensionsFromAssembly``2(System.Reflection.Assembly,System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            Gets test extensions from a given assembly.
            </summary>
            <param name="assembly">Assembly to check for test extension availability</param>
            <param name="pluginInfos">Test extensions collection to add to.</param>
            <typeparam name="TPluginInfo">
            Type of Test Plugin Information.
            </typeparam>
            <typeparam name="TExtension">
            Type of Extensions.
            </typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginDiscoverer.GetTestExtensionFromType``1(System.Type,System.Type,System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            Attempts to find a test extension from given type.
            </summary>
            <typeparam name="TPluginInfo">
            Type of the test plugin information
            </typeparam>
            <param name="type">
            Type to inspect for being test extension
            </param>
            <param name="extensionType">
            Test extension type to look for.
            </param>
            <param name="extensionCollection">
            Test extensions collection to add to.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager">
            <summary>
            Manages test plugins information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager.Instance">
            <summary>
            Gets the singleton instance of TestPluginManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager.GetTestExtensionType(System.String)">
            <summary>
            Gets data type of test extension with given assembly qualified name.
            </summary>
            <param name="extensionTypeName">Assembly qualified name of the test extension</param>
            <returns>Data type of the test extension</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager.CreateTestExtension``1(System.Type)">
            <summary>
            Instantiates a given data type.
            </summary>
            <typeparam name="T">Return type of the test extension</typeparam>
            <param name="extensionType">Data type of the extension to be instantiated</param>
            <returns>Test extension instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager.GetSpecificTestExtensions``4(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``1,System.Collections.Generic.Dictionary{System.String,System.Object}}}@,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``1,``2}}@)">
            <summary>
            Retrieves the test extension collections of given extension type.
            </summary>
            <typeparam name="TPluginInfo">
            </typeparam>
            <typeparam name="TExtension">
            Type of the required extensions
            </typeparam>
            <typeparam name="IMetadata">
            Type of metadata of required extensions
            </typeparam>
            <typeparam name="TMetadata">
            Concrete type of metadata
            </typeparam>
            <param name="endsWithPattern">
            Pattern used to select files using String.EndsWith
            </param>
            <param name="unfiltered">
            Receives unfiltered list of test extensions
            </param>
            <param name="filtered">
            Receives test extensions filtered by Identifier data
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager.GetTestExtensions``4(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``1,System.Collections.Generic.Dictionary{System.String,System.Object}}}@,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``1,``2}}@,System.Boolean)">
            <summary>
            Retrieves the test extension collections of given extension type for the provided extension assembly.
            </summary>
            <param name="extensionAssembly">
            The extension assembly.
            </param>
            <typeparam name="TPluginInfo">
            </typeparam>
            <typeparam name="TExtension">
            Type of the required extensions
            </typeparam>
            <typeparam name="IMetadata">
            Type of metadata of required extensions
            </typeparam>
            <typeparam name="TMetadata">
            Concrete type of metadata
            </typeparam>
            <param name="unfiltered">
            Receives unfiltered list of test extensions
            </param>
            <param name="filtered">
            Receives test extensions filtered by Identifier data
            </param>
            <param name="skipCache">
            Skip the extensions cache.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager.GetValuesFromDictionary``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Prepares a List of TestPluginInformation&gt;
            </summary>
            <typeparam name="T"> Type of TestPluginIInformation. </typeparam>
            <param name="dictionary"> The dictionary containing plugin identifier data and its info. </param>
            <returns> Collection of test plugins information </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.TestPluginManager.GetExtensions``4(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``1,System.Collections.Generic.Dictionary{System.String,System.Object}}}@,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{``1,``2}}@)">
            <summary>
            Gets unfiltered and filtered extensions from the provided test extension collection.
            </summary>
            <typeparam name="TPluginInfo">
            </typeparam>
            <typeparam name="TExtension">
            Type of the required extensions
            </typeparam>
            <typeparam name="IMetadata">
            Type of metadata of required extensions
            </typeparam>
            <typeparam name="TMetadata">
            Concrete type of metadata
            </typeparam>
            <param name="testPluginInfo">
            The test extension dictionary.
            </param>
            <param name="unfiltered">
            Receives unfiltered list of test extensions
            </param>
            <param name="filtered">
            Receives test extensions filtered by Identifier data
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2">
            <summary>
            Class to hold a test extension type
            </summary>
            <typeparam name="TExtension">Test extension type</typeparam>
            <typeparam name="TMetadata">Test extension metadata</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2.#ctor(`0,`1)">
            <summary>
            The constructor.
            </summary>
            <param name="instance">Test extension Instance</param>
            <param name="metadata">test extension metadata</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2.#ctor(Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestPluginInformation,System.Type)">
            <summary>
            The constructor.
            </summary>
            <param name="pluginInfo">Test plugin to instantiated on demand.</param>
            <param name="metadataType">Metadata type to instantiate on demand</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2.#ctor(Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestPluginInformation,`1)">
            <summary>
            The constructor.
            </summary>
            <param name="pluginInfo">Test plugin to instantiated on demand</param>
            <param name="metadata">Test extension metadata</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2.#ctor(System.Func{`0},`1)">
            <summary>
            Delegate Constructor
            </summary>
            <param name="creator">Test extension creator delegate</param>
            <param name="metadata">test extension metadata</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2.IsExtensionCreated">
            <summary>
            Gets a value indicating whether is extension created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2.Value">
            <summary>
            Gets the test extension instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2.Metadata">
            <summary>
            Gets the test extension metadata
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation">
            <summary>
            The test discoverer plugin information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="testDiscovererType">Data type of the test discoverer</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.Metadata">
            <summary>
            Metadata for the test plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.FileExtensions">
            <summary>
            Gets collection of file extensions supported by discoverer plugin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.DefaultExecutorUri">
            <summary>
            Gets the Uri identifying the executor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.AssemblyType">
            <summary>
            Gets the assembly type supported by discoverer plugin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.IsDirectoryBased">
            <summary>
            <see langword="true"/> if the discoverer plugin is decorated with <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute"/>,
            <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.GetFileExtensions(System.Type)">
            <summary>
            Helper to get file extensions from the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute"/> on the discover plugin.
            </summary>
            <param name="testDiscovererType">Data type of the test discoverer</param>
            <returns>List of file extensions</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.GetDefaultExecutorUri(System.Type)">
            <summary>
            Returns the value of default executor Uri on this type. <see langword="null"/> if not present.
            </summary>
            <param name="testDiscovererType"> The test discoverer Type. </param>
            <returns> The default executor URI. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.GetAssemblyType(System.Type)">
            <summary>
            Helper to get the supported assembly type from the <see cref="T:System.ComponentModel.CategoryAttribute"/> on the discover plugin.
            </summary>
            <param name="testDiscovererType"> The test discoverer Type. </param>
            <returns> Supported assembly type. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestDiscovererPluginInformation.GetIsDirectoryBased(System.Type)">
            <summary>
            Returns <see langword="true"/> if the discoverer plugin is decorated with
            <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute"/>, <see langword="false"/> otherwise.
            </summary>
            <param name="testDiscovererType">Data type of the test discoverer</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExecutorPluginInformation">
            <summary>
            The test executor plugin information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExecutorPluginInformation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="testExecutorType"> The test Executor Type. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExecutorPluginInformation2">
            <summary>
            The test executor 2 plugin information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExecutorPluginInformation2.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="testExecutorType"> The test Executor Type. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensionPluginInformation">
            <summary>
            The test extension plugin information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensionPluginInformation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="type"> The test Logger Type. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensionPluginInformation.IdentifierData">
            <summary>
            Gets data value identifying the test plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensionPluginInformation.Metadata">
            <summary>
            Metadata for the test plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensionPluginInformation.ExtensionUri">
            <summary>
            Gets the Uri identifying the test extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensionPluginInformation.GetExtensionUri(System.Type)">
            <summary>
            Helper to get the Uri from the ExtensionUriAttribute on logger plugin.
            </summary>
            <param name="testLoggerType">Data type of the test logger</param>
            <returns>Uri identifying the test logger</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions">
            <summary>
            The test extension information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.TestDiscoverers">
            <summary>
            Gets or sets test discoverer extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreTestDiscoverersCached">
            <summary>
            Gets or sets a value indicating whether are test discoverers cached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.TestExecutors">
            <summary>
            Gets or sets test executor extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreTestExecutorsCached">
            <summary>
            Gets or sets a value indicating whether are test executors cached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.TestExecutors2">
            <summary>
            Gets or sets test executor 2 extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreTestExecutors2Cached">
            <summary>
            Gets or sets a value indicating whether are test executors 2 cached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.TestSettingsProviders">
            <summary>
            Gets or sets test setting provider extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreTestSettingsProvidersCached">
            <summary>
            Gets or sets a value indicating whether are test settings providers cached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.TestLoggers">
            <summary>
            Gets or sets test logger extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreTestLoggersCached">
            <summary>
            Gets or sets a value indicating whether are test loggers cached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.TestHosts">
            <summary>
            Gets or sets test logger extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreTestHostsCached">
            <summary>
            Gets or sets a value indicating whether are test hosts cached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.DataCollectors">
            <summary>
            Gets or sets data collectors extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreDataCollectorsCached">
            <summary>
            Gets or sets a value indicating whether are test hosts cached.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.CreateMergedDictionary(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}})">
             <summary>
             Merge two extension dictionaries.
             </summary>
            
             <param name="first">First extension dictionary.</param>
             <param name="second">Second extension dictionary.</param>
            
             <returns>
             A dictionary representing the merger between the two input dictionaries.
             </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AddExtensionTelemetry(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}})">
             <summary>
             Add extension-related telemetry.
             </summary>
            
             <param name="metrics">A collection representing the telemetry data.</param>
             <param name="extensions">The input extension collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AddExtension``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Adds the extensions specified to the current set of extensions.
            </summary>
            <typeparam name="TPluginInfo">
            Type of plugin info.
            </typeparam>
            <param name="newExtensions">
            The info about new extensions discovered
            </param>
            <returns>
            The <see cref="!:Dictionary"/> of extensions discovered
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.GetExtensionsDiscoveredFromAssembly(System.String)">
            <summary>
            Gets the extensions already discovered that are defined in the specified assembly.
            </summary>
            <param name="extensionAssembly"> The extension assembly.</param>
            <returns> The test extensions defined the extension assembly if it is already discovered. null if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.AreTestExtensionsCached``1">
            <summary>
            The are test extensions cached.
            </summary>
            <typeparam name="TPluginInfo">
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.SetTestExtensionsCacheStatusToTrue``1">
            <summary>
            The set test extensions cache status.
            </summary>
            <typeparam name="TPluginInfo">
            </typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.GetCachedExtensions">
             <summary>
             Gets the cached extensions for the current process.
             </summary>
            
             <returns>A dictionary representing the cached extensions for the current process.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.InvalidateCache">
            <summary>
            The invalidate cache of plugin infos.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestExtensions.GetExtensionsDiscoveredFromAssembly``1(System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            Gets extensions discovered from assembly.
            </summary>
            <param name="extensionCollection">
            The extension collection.
            </param>
            <param name="extensionAssembly">
            The extension assembly.
            </param>
            <typeparam name="TPluginInfo">
            </typeparam>
            <returns>
            The <see cref="!:Dictionary"/>. of extensions discovered in assembly
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestLoggerPluginInformation">
            <summary>
            The test logger plugin information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestLoggerPluginInformation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="testLoggerType"> The test Logger Type. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestLoggerPluginInformation.FriendlyName">
            <summary>
            Gets the Friendly Name identifying the logger
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestLoggerPluginInformation.Metadata">
            <summary>
            Metadata for the test plugin
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestLoggerPluginInformation.GetFriendlyName(System.Type)">
            <summary>
            Helper to get the FriendlyName from the FriendlyNameAttribute on logger plugin.
            </summary>
            <param name="testLoggerType">Data type of the test logger</param>
            <returns>FriendlyName identifying the test logger</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestPluginInformation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="testExtensionType">Data type of the test plugin</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestPluginInformation.IdentifierData">
            <summary>
            Gets data value identifying the test plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestPluginInformation.Metadata">
            <summary>
            Metadata for the test plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestPluginInformation.AssemblyQualifiedName">
            <summary>
            Gets the Assembly qualified name of the plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestPluginInformation.FilePath">
            <summary>
            Gets the file path of the plugin
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestRuntimePluginInformation">
            <summary>
            The test host plugin information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestRuntimePluginInformation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="testHostType"> The testhost Type. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestRuntimePluginInformation.FriendlyName">
            <summary>
            Gets the Friendly Name identifying the testhost
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestRuntimePluginInformation.Metadata">
            <summary>
            Metadata for the testhost plugin
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestRuntimePluginInformation.GetFriendlyName(System.Type)">
            <summary>
            Helper to get the FriendlyName from the FriendlyNameAttribute on testhost plugin.
            </summary>
            <param name="testHostType">Data type of the testhost</param>
            <returns>FriendlyName identifying the testhost</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestSettingsProviderPluginInformation">
            <summary>
            The test settings provider plugin information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestSettingsProviderPluginInformation.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="testSettingsProviderType"> The test Settings Provider Type. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestSettingsProviderPluginInformation.IdentifierData">
            <summary>
            Gets data value identifying the test plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestSettingsProviderPluginInformation.Metadata">
            <summary>
            Metadata for the test plugin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestSettingsProviderPluginInformation.SettingsName">
            <summary>
            Gets name of test settings supported by plugin.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.TestSettingsProviderPluginInformation.GetTestSettingsName(System.Type)">
            <summary>
            Helper to get the test settings name from SettingsNameAttribute on test setting provider plugin.
            </summary>
            <param name="testSettingsProviderType">Data type of test setting provider</param>
            <returns>Test settings name supported by plugin</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager">
            <summary>
            Manager for VisualStudio based extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager.#ctor">
            <summary>
            Default constructor for manager for Visual Studio based extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager.GetUnitTestExtensions">
            <summary>
            Get the available unit test extensions installed.
            If no extensions are installed then it returns an empty list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager.GetTestExtensionsInternal(System.String)">
            <summary>
            Get the unit tests extensions
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager.ExtensionManagerDefAssembly">
            <summary>
            Used to explicitly load Microsoft.VisualStudio.ExtensionManager.dll
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager.ExtensionManagerImplAssembly">
            <summary>
            Used to explicitly load Microsoft.VisualStudio.ExtensionManager.Implementation.dll
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager.ExtensionManagerServiceType">
            <summary>
            Returns the Type of ExtensionManagerService.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.VSExtensionManager.SettingsManagerAssembly">
            <summary>
            Used to explicitly load Microsoft.VisualStudio.Settings.15.0.dll
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Operator">
            <summary>
            Operator in order of precedence.
            Precedence(And) > Precedence(Or)
            Precedence of OpenBrace and CloseBrace operators is not used, instead parsing code takes care of same.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition">
            <summary>
            Represents a condition in filter expression.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.DefaultPropertyName">
            <summary>
             Default property name which will be used when filter has only property value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.DefaultOperation">
            <summary>
             Default operation which will be used when filter has only property value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.Name">
            <summary>
            Name of the property used in condition.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.Value">
            <summary>
            Value for the property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.Operation">
            <summary>
            Operation to be performed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.Evaluate(System.Func{System.String,System.Object})">
            <summary>
            Evaluate this condition for testObject.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.Parse(System.String)" -->
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.ValidForProperties(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty})">
            <summary>
            Check if condition validates any property in properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.GetOperator(System.String)">
            <summary>
            Return Operation corresponding to the operationString
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.Condition.GetPropertyValue(System.Func{System.String,System.Object})">
            <summary>
            Returns property value for Property using propertValueProvider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FastFilter.ApplyRegex(System.String)">
            <summary>
            Apply regex matching or replacement to given value.
            </summary>
            <returns>For matching, returns the result of matching, null if no match found. For replacement, returns the result of replacement.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FastFilter.TryGetPropertyValue(System.String,System.Func{System.String,System.Object},System.String@,System.String[]@)">
            <summary>
            Returns property value for Property using propertValueProvider.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression" -->
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression._condition">
            <summary>
            Condition, if expression is conditional expression.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression._left">
            <summary>
            Left operand, when expression is logical expression.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression._right">
            <summary>
            Right operand, when expression is logical expression.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression._areJoinedByAnd" -->
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression.And(Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression)">
            <summary>
            Create a new filter expression 'And'ing 'this' with 'filter'.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression.Or(Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression)">
            <summary>
            Create a new filter expression 'Or'ing 'this' with 'filter'.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression.ProcessOperator(System.Collections.Generic.Stack{Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression},Microsoft.VisualStudio.TestPlatform.Common.Filtering.Operator)">
            <summary>
            Process the given operator from the filterStack.
            Puts back the result of operation back to filterStack.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression.ValidForProperties(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty})">
            <summary>
            True, if filter is valid for given set of properties.
            When False, invalidProperties would contain properties making filter invalid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression.Parse(System.String,Microsoft.VisualStudio.TestPlatform.Common.Filtering.FastFilter@)">
            <summary>
            Return FilterExpression after parsing the given filter expression, and a FastFilter when possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpression.Evaluate(System.Func{System.String,System.Object})">
            <summary>
            Evaluate filterExpression with given propertyValueProvider.
            </summary>
            <param name="propertyValueProvider"> The property Value Provider.</param>
            <returns> True if evaluation is successful. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper">
            <summary>
            Class holds information related to filtering criteria.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper._filterExpression">
            <summary>
            FilterExpression corresponding to filter criteria
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.FastFilter">
            <remarks>
            Exposed for testing purpose.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.#ctor(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions)">
            <summary>
            Initializes FilterExpressionWrapper with given filterString and options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.#ctor(System.String)">
            <summary>
            Initializes FilterExpressionWrapper with given filterString.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.FilterString">
            <summary>
            User specified filter criteria.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.FilterOptions">
            <summary>
            User specified additional filter options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.ParseError">
            <summary>
            Parsing error (if any), when parsing 'FilterString' with built-in parser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.ValidForProperties(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty})">
            <summary>
            Validate if underlying filter expression is valid for given set of supported properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper.Evaluate(System.Func{System.String,System.Object})">
            <summary>
            Evaluate filterExpression with given propertyValueProvider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Filtering.TestCaseFilterExpression">
            <summary>
            Implements ITestCaseFilterExpression, providing test case filtering functionality.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Filtering.TestCaseFilterExpression._validForMatch">
            <summary>
            If filter Expression is valid for performing TestCase matching
            (has only supported properties, syntax etc)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.TestCaseFilterExpression.#ctor(Microsoft.VisualStudio.TestPlatform.Common.Filtering.FilterExpressionWrapper)">
            <summary>
            Adapter specific filter expression.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Filtering.TestCaseFilterExpression.TestCaseFilterValue">
            <summary>
            User specified filter criteria.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.TestCaseFilterExpression.ValidForProperties(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty})">
            <summary>
            Validate if underlying filter expression is valid for given set of supported properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Filtering.TestCaseFilterExpression.MatchTestCase(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.Func{System.String,System.Object})">
            <summary>
            Match test case with filter criteria.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeExtensionManager">
            <summary>
            Manages loading and provides access to testhost extensions implementing the
            ITestRuntimeProvider interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeExtensionManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,System.Collections.Generic.Dictionary{System.String,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestRuntimeCapabilities}},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeExtensionManager"/> class.
            Default constructor.
            </summary>
            <param name="unfilteredTestExtensions">
            The unfiltered Test Extensions.
            </param>
            <param name="testExtensions">
            The test Extensions.
            </param>
            <param name="logger">
            The logger.
            </param>
            <remarks>
            The constructor is not public because the factory method should be used to get instances of this class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeExtensionManager.Create(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Gets an instance of the TestLoggerExtensionManager.
            </summary>
            <param name="messageLogger">
            The message Logger.
            </param>
            <returns>
            The TestLoggerExtensionManager.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeMetadata">
            <summary>
            Hold data about the Test Host.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeMetadata.#ctor(System.String,System.String)">
            <summary>
            Constructor for TestRuntimeMetadata
            </summary>
            <param name="extension">
            Uri identifying the testhost.
            </param>
            <param name="friendlyName">
            The friendly Name.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeMetadata.ExtensionUri">
            <summary>
            Gets Uri identifying the testhost.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeMetadata.FriendlyName">
            <summary>
            Gets Friendly Name identifying the testhost.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeProviderManager">
            <summary>
            Responsible for managing TestRuntimeProviderManager extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeProviderManager.#ctor(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeProviderManager"/> class.
            Default constructor.
            </summary>
            <param name="sessionLogger">
            The session Logger.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeProviderManager.Instance">
            <summary>
            Gets the instance of TestRuntimeProviderManager
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IAssemblyProperties">
            <summary>
            Metadata that is available for input test source, e.g. Whether it is native or managed dll, etc..
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IAssemblyProperties.GetAssemblyType(System.String)">
            <summary>
            Determines assembly type from file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IBaseTestEventsRegistrar.LogWarning(System.String)">
            <summary>
            Log warning message before request is created.
            </summary>
            <param name="message">message string</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IDataCollectorCapabilities">
            <summary>
            Metadata that is available from data collectors.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IDataCollectorCapabilities.FriendlyName">
            <summary>
            Gets the friendly name corresponding to the data collector.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IDataCollectorCapabilities.HasAttachmentProcessor">
            <summary>
            Check if the data collector has got attachment processor registered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IRunSettingsProvider">
            <summary>
            Provides access to the active run settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IRunSettingsProvider.ActiveRunSettings">
            <summary>
            The active run settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IRunSettingsProvider.SetActiveRunSettings(Microsoft.VisualStudio.TestPlatform.Common.RunSettings)">
            <summary>
            Set the active run settings.
            </summary>
            <param name="runSettings">RunSettings to make the active Run Settings.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ISettingsProviderCapabilities">
            <summary>
            Metadata that is available from Settings Providers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ISettingsProviderCapabilities.SettingsName">
            <summary>
            Gets the name of the settings section.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscovererCapabilities">
            <summary>
            Metadata that is available from Test Discoverers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscovererCapabilities.FileExtension">
            <summary>
            List of file extensions that the test discoverer can process tests from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscovererCapabilities.DefaultExecutorUri">
            <summary>
            Default executor Uri for this discoverer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscovererCapabilities.AssemblyType">
            <summary>
            Assembly type that the test discoverer supports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscovererCapabilities.IsDirectoryBased">
            <summary>
            <see langword="true"/> if the discoverer plugin is decorated with <see cref="!:DirectoryBasedTestDiscovererAttribute"/>,
            <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscoveryEventsRegistrar.RegisterDiscoveryEvents(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest)">
            <summary>
            Registers to receive discovery events from discovery request.
            These events will then be broadcast to any registered loggers.
            </summary>
            <param name="discoveryRequest">The discovery request to register for events on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestDiscoveryEventsRegistrar.UnregisterDiscoveryEvents(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest)">
            <summary>
            Unregister the events from the discovery request.
            </summary>
            <param name="discoveryRequest">The discovery request from which events should be unregistered.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExecutorCapabilities">
            <summary>
            Metadata that is available from Test Executors.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExtensionCapabilities">
            <summary>
            Basic metadata for extensions which are identified by a URI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExtensionCapabilities.ExtensionUri">
            <summary>
            Gets the URI of the test extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestLoggerCapabilities">
            <summary>
            Metadata that is available from Test Loggers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestLoggerCapabilities.FriendlyName">
            specifies the friendly name corresponding to the logger.
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestRunEventsRegistrar.RegisterTestRunEvents(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest)">
            <summary>
            Registers to receive events from the provided test run request.
            These events will then be broadcast to any registered loggers.
            </summary>
            <param name="testRunRequest">The run request to register for events on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestRunEventsRegistrar.UnregisterTestRunEvents(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest)">
            <summary>
            Unregisters the events from the test run request.
            </summary>
            <param name="testRunRequest">The run request from which events should be unregistered.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestRuntimeCapabilities">
            <summary>
            Metadata that is available from Test Host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestRuntimeCapabilities.FriendlyName">
            specifies the friendly name corresponding to the TestHost.
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IVSExtensionManager.GetUnitTestExtensions">
            <summary>
            Get the unit test extensions installed via vsix.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents">
            <summary>
            Exposes events that Test Loggers can register for and allows for them
            to be raised through the IRunMessageLogger interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents._loggerEventQueue">
            <summary>
            Queue used for events which are to be sent to the loggers.
            </summary>
            <remarks>
            Using the queue accomplishes two things.
            1. Loggers do not need to be written to be thread safe because
               we will only be raising one event to them at a time.
            2. Allows all events to go to all loggers even during initialization
               because we queue up all events sent until raising of events to the
               loggers is enabled
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents._isDisposed">
            <summary>
            Keeps track if we are disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents._isBoundsOnLoggerEventQueueEnabled">
            <summary>
            Specifies whether logger event queue is bounded or not
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.#ctor(Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.TestRunMessage">
            <summary>
            Raised when a test message is received.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.TestRunStart">
            <summary>
            Raised when a test run starts.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.TestResult">
            <summary>
            Raised when a test result is received.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.TestRunComplete">
            <summary>
            Raised when a test run is complete.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.DiscoveryStart">
            <summary>
            Raised when test discovery starts.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.DiscoveryMessage">
            <summary>
            Raised when a discovery message is received.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.DiscoveredTests">
            <summary>
            Raised when discovered tests are received
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.DiscoveryComplete">
            <summary>
            Raised when test discovery is complete
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.Dispose">
            <summary>
            Waits for all pending messages to be processed by the loggers cleans up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.EnableEvents">
            <summary>
            Enables sending of events to the loggers which are registered and flushes the queue.
            </summary>
            <remarks>
            By default events are disabled and will not be raised until this method is called.
            This is done because during logger initialization, errors could be sent and we do not
            want them broadcast out to the loggers until all loggers have been enabled.  Without this
            all loggers would not receive the errors which were sent prior to initialization finishing.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseTestRunMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)">
            <summary>
            Raises a test run message event to the enabled loggers.
            </summary>
            <param name="args">Arguments to be raised.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseTestResult(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs)">
            <summary>
            Raises a test result event to the enabled loggers.
            </summary>
            <param name="args">Arguments to be raised.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseTestRunStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs)">
            <summary>
            Raises the test run start event to enabled loggers.
            </summary>
            <param name="args">Arguments to be raised.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseDiscoveryStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryStartEventArgs)">
            <summary>
            Raises a discovery start event to the enabled loggers.
            </summary>
            <param name="args">Arguments to be raised.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseDiscoveryMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)">
            <summary>
            Raises a discovery message event to the enabled loggers.
            </summary>
            <param name="args">Arguments to be raised.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseDiscoveredTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveredTestsEventArgs)">
            <summary>
            Raises discovered tests event to the enabled loggers.
            </summary>
            <param name="args"> Arguments to be raised. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs)">
            <summary>
            Raises discovery complete event to the enabled loggers.
            </summary>
            <param name="args"> Arguments to be raised. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.RaiseTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs)">
            <summary>
            Raises test run complete to the enabled loggers
            </summary>
            <param name="args"> Arguments to be raised </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.CompleteTestRun(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics,System.Boolean,System.Boolean,System.Exception,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},System.TimeSpan)">
            <summary>
            Raise the test run complete event to test loggers and waits
            for the events to be processed.
            </summary>
            <param name="stats">Specifies the stats of the test run.</param>
            <param name="isCanceled">Specifies whether the test run is canceled.</param>
            <param name="isAborted">Specifies whether the test run is aborted.</param>
            <param name="error">Specifies the error that occurs during the test run.</param>
            <param name="attachmentSet">Run level attachment sets</param>
            <param name="invokedDataCollectors">Invoked data collectors</param>
            <param name="elapsedTime">Time elapsed in just running the tests.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.TestRunMessageHandler(System.Object,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)">
            <summary>
            Called when a test run message is sent through the ITestRunMessageLogger which is exported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.SafeInvokeAsync(System.Func{System.MulticastDelegate},System.EventArgs,System.Int32,System.String)">
            <summary>
            Invokes each of the subscribers of the event and handles exceptions which are thrown
            ensuring that each handler is invoked even if one throws.
            The actual calling of the subscribers is done on a background thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.ProcessQueuedJob(System.Action)">
            <summary>
            Method called to process a job which is coming from the logger event queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.CheckDisposed">
            <summary>
            Throws if we are disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.GetMaxNumberOfJobsInQueue">
            <summary>
            The method parses the config file of vstest.console.exe to see if the Max Job Queue Length is defined.
            Return the Max Queue Length so defined or a default value specified by TestPlatformDefaults.DefaultMaxLoggerEventsToCache
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.GetMaxBytesQueueCanHold">
            <summary>
            The method parses the config file of vstest.console.exe to see if the Max Job Queue size is defined.
            Return the Max Queue size so defined or a default value specified by TestPlatformDefaults.DefaultMaxJobQueueSize
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.IsBoundsEnabledOnLoggerEventQueue">
            <summary>
            Returns whether flow control on logger events queue should be enabled or not. Default is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.FindTestResultSize(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs)">
            <summary>
            Returns the approximate size of a TestResult instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.InternalTestLoggerEvents.GetSetting(System.String,System.Int32)">
            <summary>
            Get the appsetting value for the parameter appSettingKey. Use the parameter defaultValue if
            value is not there or is invalid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger">
            <summary>
            The test session message logger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger"/> class.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger.TestRunMessage">
            <summary>
            Raised when a discovery message is received.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger.Instance">
            <summary>
            Gets the instance of the singleton.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger.TreatTestAdapterErrorsAsWarnings">
            <summary>
            Gets or sets a value indicating whether to treat test adapter errors as warnings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Logging.TestSessionMessageLogger.SendMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)">
            <summary>
            Sends a message to all listeners.
            </summary>
            <param name="testMessageLevel">Level of the message.</param>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.StringUtils.IsNullOrEmpty(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.StringUtils.IsNullOrWhiteSpace(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.TPDebug.Assert(System.Boolean)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.TPDebug.Assert(System.Boolean,System.String)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.RequestData">
            <inheritdoc />
            <summary>
            Provide common services and data for a discovery/run request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.RequestData._metricsCollection">
            <summary>
            The metrics collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.RequestData._protocolConfig">
            <summary>
            The protocol config.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RequestData.#ctor">
            <summary>
            The default constructor for request data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.RequestData.MetricsCollection">
            <summary>
            Gets or sets the metrics collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.RequestData.ProtocolConfig">
            <summary>
            Gets or sets the protocol config.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.RequestData.IsTelemetryOptedIn">
            <summary>
            Gets or sets a value indicating whether is telemetry opted in.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.AccessDenied">
            <summary>
              Looks up a localized string similar to {0} Access denied while trying to create &quot;TestResults&quot; folder in mentioned location. You are getting this exception because you are running vstest.console.exe from a folder which requires having write access. To solve the issue: please  run vstest.console.exe from a folder where you have write privileges. For more information, please look at the error message:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.CancellationRequested">
            <summary>
              Looks up a localized string similar to Cancelling the operation as requested..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DataCollectionMessageFormat">
            <summary>
              Looks up a localized string similar to Data collection : {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DataCollectorErrorOnGetVariable">
            <summary>
              Looks up a localized string similar to Data collector &apos;{0}&apos; failed to provide initialization information. Error: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DataCollectorInitializationError">
            <summary>
              Looks up a localized string similar to Data collector &apos;{0}&apos; threw an exception during type loading, construction, or initialization: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DataCollectorMessageFormat">
            <summary>
              Looks up a localized string similar to Data collector &apos;{0}&apos; message: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DataCollectorNotFound">
            <summary>
              Looks up a localized string similar to Could not find data collector &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DataCollectorRequestedDuplicateEnvironmentVariable">
            <summary>
              Looks up a localized string similar to The data collector &apos;{0}&apos; requested environment variable &apos;{1}&apos; with value &apos;{2}&apos; to be set in test execution environment, but another data collector &apos;{3}&apos; has already requested same environment variable with different value &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DuplicateExtensionUri">
            <summary>
              Looks up a localized string similar to Duplicate test extension URI &apos;{0}&apos;.  Ignoring the duplicate extension..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DuplicateSettingsName">
            <summary>
              Looks up a localized string similar to Duplicate settings provider named &apos;{0}&apos;.  Ignoring the duplicate provider..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.DuplicateSettingsProvided">
            <summary>
              Looks up a localized string similar to Duplicate run settings section named &apos;{0}&apos; found.  Ignoring the duplicate settings..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.EmptyParenthesis">
            <summary>
              Looks up a localized string similar to Error: Empty parenthesis ( ).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.FailedToFindInstalledUnitTestExtensions">
            <summary>
              Looks up a localized string similar to Failed to find the list of installed unit test extensions. Reason: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.FailedToLoadAdapaterFile">
            <summary>
              Looks up a localized string similar to Failed to load extensions from file &apos;{0}&apos;. Please use /diag for more information..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.FastFilterException">
            <summary>
              Looks up a localized string similar to An error occurred while creating Fast filter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.IgnoredDuplicateConfiguration">
            <summary>
              Looks up a localized string similar to There are multiple configurations that have data collector FriendlyName as &apos;{0}&apos;. Duplicate configurations will be ignored in the test run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.InnerException">
            <summary>
              Looks up a localized string similar to Inner exception:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.InvalidCondition">
            <summary>
              Looks up a localized string similar to Error: Invalid Condition &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.InvalidExtensionUriFormat">
            <summary>
              Looks up a localized string similar to Test Extension has an invalid URI &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.InvalidOperator">
            <summary>
              Looks up a localized string similar to Error: Invalid operator &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.LoggerInitializationError">
            <summary>
              Looks up a localized string similar to Exception occurred while initializing logger with {0}: &apos;{1}&apos;.  The logger will not be used.  Exception: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.LoggerNotFound">
            <summary>
              Looks up a localized string similar to Could not find a test logger with AssemblyQualifiedName, URI or FriendlyName &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.LoggerUriInvalid">
            <summary>
              Looks up a localized string similar to The Test Logger URI &apos;{0}&apos; is not valid.  The Test Logger will be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.MissingCloseParenthesis">
            <summary>
              Looks up a localized string similar to Error: Missing &apos;)&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.MissingOpenParenthesis">
            <summary>
              Looks up a localized string similar to Error: Missing &apos;(&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.MissingOperand">
            <summary>
              Looks up a localized string similar to Error: Missing operand.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.MissingOperator">
            <summary>
              Looks up a localized string similar to Missing Operator &apos;|&apos; or &apos;&amp;&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.ReportDataCollectorException">
            <summary>
              Looks up a localized string similar to Data collector caught an exception of type &apos;{0}&apos;: &apos;{1}&apos;. More details: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.RunSettingsAlreadyLoaded">
            <summary>
              Looks up a localized string similar to The Run Settings have already been loaded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.RunSettingsParseError">
            <summary>
              Looks up a localized string similar to An error occurred while loading the run settings.  Error: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.SerialTestRunInvalidScenario">
            <summary>
              Looks up a localized string similar to &lt;ForceOneTestAtTimePerTestHost&gt;true&lt;/ForceOneTestAtTimePerTestHost&gt; is not supported for sources test run..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.SettingsNodeInvalidName">
            <summary>
              Looks up a localized string similar to Invalid settings node specified. The name property of the settings node must be non-empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.SettingsProviderInitializationError">
            <summary>
              Looks up a localized string similar to An error occurred while initializing the settings provider named &apos;{0}&apos;. Error: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.SettingsProviderNotFound">
            <summary>
              Looks up a localized string similar to Settings Provider named &apos;{0}&apos; was not found.  The settings can not be loaded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.StackTrace">
            <summary>
              Looks up a localized string similar to Stack trace:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.TestCaseFilterFormatException">
            <summary>
              Looks up a localized string similar to Incorrect format for TestCaseFilter {0}. Specify the correct format and try again. Note that the incorrect format can lead to no test getting executed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.UnableToFetchUriString">
            <summary>
              Looks up a localized string similar to Unable to find a datacollector with friendly name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.VSInstallationNotFound">
            <summary>
              Looks up a localized string similar to This option works only with vstest.console.exe installed as part of Visual Studio..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Resources.Resources.WrongDataCollectionContextType">
            <summary>
              Looks up a localized string similar to Types deriving from the data collection context cannot be used for sending data and messages.  The DataCollectionContext used for sending data and messages must come from one of the events raised to the data collector..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.RunSettings">
            <summary>
            Used for loading settings for a run.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.RunSettings._settings">
            <summary>
            Map of the settings names in the file to their associated settings provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.RunSettings._isSettingsLoaded">
            <summary>
            Used to keep track if settings have been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.RunSettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.SettingsXml">
            <summary>
            Gets the settings in the form of Xml string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.GetSettings(System.String)">
            <summary>
            Get the settings for the provided settings name.
            </summary>
            <param name="settingsName">Name of the settings section to get.</param>
            <returns>The settings provider for the settings or null if one was not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.LoadSettingsXml(System.String)">
            <summary>
            Load the settings from the provided xml string.
            </summary>
            <param name="settings">xml string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.InitializeSettingsProviders(System.String)">
            <summary>
            Initialize settings providers with the settings xml.
            </summary>
            <param name="settings"> The settings xml string. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.ValidateAndSaveSettings(System.Xml.XmlReader)">
            <summary>
            Validate the runsettings checking that it is well formed.
            This would throw XML exception on failure.
            </summary>
            <param name="reader">A xml reader instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.ReadRunSettings(System.Xml.XmlReader)">
            <summary>
            Reads test run settings from XmlReader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.LoadSection(System.Xml.XmlReader,Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager)">
            <summary>
            Loads the section for the current element of the reader.
            </summary>
            <param name="reader">Reader to load the section from.</param>
            <param name="settingsExtensionManager">Settings extension manager to get the provider from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettings.CreateLazyThrower(System.String,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ISettingsProviderCapabilities,System.Exception)">
            <summary>
            Creates a lazy instance which will throw a SettingsException when the value property is accessed.
            </summary>
            <param name="message">Message for the exception.</param>
            <param name="metadata">Metadata to use for the lazy instance.</param>
            <param name="innerException">Inner exception to include in the exception which is thrown.</param>
            <returns>Lazy instance setup to throw when the value property is accessed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.RunSettingsManager">
            <summary>
            Manages the active run settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettingsManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.RunSettingsManager.ActiveRunSettings">
            <summary>
            Gets the active run settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.RunSettingsManager.SetActiveRunSettings(Microsoft.VisualStudio.TestPlatform.Common.RunSettings)">
            <summary>
            Set the active run settings.
            </summary>
            <param name="runSettings">RunSettings to make the active Run Settings.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager">
            <summary>
            Manages the settings provider extensions.
            </summary>
            <remarks>
            This is a non-shared instance because we want different settings provider instances to
            be used for each run settings instance.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager._settingsProviders">
            <summary>
            The settings providers which are available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager._logger">
            <summary>
            Used for logging errors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ISettingsProvider,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ISettingsProviderCapabilities}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension{Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ISettingsProvider,System.Collections.Generic.Dictionary{System.String,System.Object}}},Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Initializes with the settings providers.
            </summary>
            <remarks>
            The settings providers are imported as non-shared because we need different settings provider
            instances to be used for each run settings.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager.UnfilteredSettingsProviders">
            <summary>
            Gets the Unfiltered list of settings providers.  Used for the /ListSettingsProviders command line argument.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager.SettingsProvidersMap">
            <summary>
            Gets the map of settings name to settings provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager.Create">
            <summary>
            Creates an instance of the settings provider.
            </summary>
            <returns>Instance of the settings provider.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager.Destroy">
            <summary>
            Destroy the extension manager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager.LoadAndInitializeAllExtensions(System.Boolean)">
            <summary>
            Load all the settings provider and fail on error
            </summary>
            <param name="shouldThrowOnError"> Indicates whether this method should throw on error. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.SettingsProviderExtensionManager.GetSettingsProvider(System.String)">
            <summary>
            Gets the settings with the provided name.
            </summary>
            <param name="settingsName">Name of the settings to get.</param>
            <returns>Settings provider with the provided name or null if one was not found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.TestSettingsProviderMetadata">
            <summary>
            Hold data about the Test settings provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.TestSettingsProviderMetadata.#ctor(System.String)">
            <summary>
            The constructor
            </summary>
            <param name="settingsName">Test settings name</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.SettingsProvider.TestSettingsProviderMetadata.SettingsName">
            <summary>
            Gets test settings name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.MetricsCollection">
            <inheritdoc />
            <summary>
            This Class will collect Metrics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.MetricsCollection.#ctor">
            <summary>
            The Metrics Collection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.MetricsCollection.Add(System.String,System.Object)">
            <summary>
            Add The Metrics
            </summary>
            <param name="metric"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.MetricsCollection.Metrics">
            <summary>
            Returns the Metrics
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.MetricsCollection.Clear">
            <summary>
            Clears the Metrics
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.NoOpMetricsCollection">
            <summary>
            If Telemetry is opted out, this class will be initialized and will do No operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.NoOpMetricsCollection.Add(System.String,System.Object)">
            <summary>
            Will do NO-OP
            </summary>
            <param name="message"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.NoOpMetricsCollection.Metrics">
            <summary>
            Will return empty list
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Telemetry.TelemetryDataConstants">
            <summary>
            The Telemetry data constants.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyProperties"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyProperties.#ctor(Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyProperties"/> class.
            </summary>
            <param name="fileHelper">File helper.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyProperties.GetAssemblyType(System.String)">
            <summary>
            Determines assembly type from file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver._searchDirectories">
            <summary>
            The directories to look for assemblies to resolve.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver._resolvedAssemblies">
            <summary>
            Dictionary of Assemblies discovered to date. Must be locked as it may
            be accessed in a multi-threaded context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver._isDisposed">
            <summary>
            Specifies whether the resolver is disposed or not
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver._platformAssemblyResolver">
            <summary>
            Assembly resolver for platform
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver"/> class.
            </summary>
            <param name="directories"> The search directories. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver.AddSearchDirectories(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the directories from which assemblies should be searched
            </summary>
            <param name="directories"> The search directories. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver.OnResolve(System.Object,Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.AssemblyResolveEventArgs)">
            <summary>
            Assembly Resolve event handler for App Domain - called when CLR loader cannot resolve assembly.
            </summary>
            <returns>
            The <see cref="T:System.Reflection.Assembly"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.AssemblyResolver.RequestedAssemblyNameMatchesFound(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Verifies that found assembly name matches requested to avoid security issues.
            Looks only at PublicKeyToken and Version, empty matches anything.
            VSWhidbey 415774.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.CancellationTokenExtensions.ThrowTestPlatformExceptionIfCancellationRequested(System.Threading.CancellationToken)">
            <summary>
            Extension method used to throw TestPlatformException in case operation is canceled.
            </summary>
            <param name="token">CancellationToken on which cancel is requested</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.ExceptionUtilities">
            <summary>
            Exception utilities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.ExceptionUtilities.GetExceptionMessage(System.Exception)">
            <summary>
            Returns an exception message with all inner exceptions messages.
            </summary>
            <param name="exception"> The exception. </param>
            <returns> The formatted string message of the exception. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities">
            <summary>
            Provides helper to configure run settings for Fakes. Works even when Fakes are not installed on the machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.GenerateFakesSettingsForRunConfiguration(System.String[],System.String)">
            <summary>
            Dynamically compute the Fakes data collector settings, given a set of test assemblies
            </summary>
            <param name="sources">test sources</param>
            <param name="runSettingsXml">runsettings</param>
            <returns>updated runsettings for fakes</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.GetFramework(System.String)">
            <summary>
            returns FrameworkVersion contained in the runsettingsXML
            </summary>
            <param name="runSettingsXml"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.TryAddFakesDataCollectorSettings(System.Xml.XmlDocument,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.FrameworkVersion)">
            <summary>
            Tries to embed the Fakes data collector settings for the given run settings.
            </summary>
            <param name="runSettings">runsettings</param>
            <param name="sources">test sources</param>
            <returns>true if runSettings was modified; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.EnsureSettingsNode(System.Xml.XmlDocument,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunSettings)">
            <summary>
            Ensures that an xml element corresponding to the test run settings exists in the setting document.
            </summary>
            <param name="settings">settings</param>
            <param name="settingsNode">settingsNode</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.CreateFakesDataCollectorSettings">
            <summary>
            Adds the Fakes data collector settings in the run settings document.
            </summary>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings"/>.
            </returns>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.FakesMetadata.FriendlyName">
            <summary>
            Friendly name of the data collector
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.FakesMetadata.DataCollectorUriV1">
            <summary>
            Gets the URI of the data collector
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.FakesMetadata.DataCollectorUriV2">
            <summary>
            Gets the URI of the data collector
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.FakesUtilities.FakesMetadata.DataCollectorAssemblyQualifiedName">
            <summary>
            Gets the assembly qualified name of the data collector type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions">
            <summary>
            Utilities to get the run settings from the provider and the command line options specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.ParameterString">
            <summary>
            Pattern used to find parameter node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.AttributeNameString">
            <summary>
            Pattern that indicates Attribute name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.AttributeValueString">
            <summary>
            Pattern that indicates  Attribute value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.NameString">
            <summary>
            Attribute name key for test run parameter node
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.ValueString">
            <summary>
            Attribute value key for test run parameter node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.GetTestRunParameterNodeMatch(Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IRunSettingsProvider,System.String)">
            <summary>
            Matches with test run parameter node pattern and returns that match.
            </summary>
            <param name="runSettingsProvider"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.UpdateTestRunParameterSettingsNode(Microsoft.VisualStudio.TestPlatform.Common.Interfaces.IRunSettingsProvider,System.Text.RegularExpressions.Match)">
            <summary>
            If test run parameter exists already it will override with new value otherwise this will add new test run parameter.
            </summary>
            <param name="runSettingsProvider"></param>
            <param name="match"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsProviderExtensions.AddDefaultRunSettings(System.String)">
            <summary>
            Gets the effective run settings adding the default run settings if not already present.
            </summary>
            <param name="runSettings"> The run settings XML. </param>
            <returns> Effective run settings. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities">
            <summary>
            Utility methods for RunSettings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.CreateAndInitializeRunSettings(System.String)">
            <summary>
            Create RunSettings object corresponding to settingsXml
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetTestResultsDirectory(Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration)">
            <summary>
            Gets the test results directory from the run configuration
            </summary>
            <param name="runConfiguration">Test run configuration</param>
            <returns>Test results directory</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetTargetFramework(Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration)">
            <summary>
            Gets the target framework from the run configuration
            </summary>
            <param name="runConfiguration">Test run configuration</param>
            <returns>Target Framework</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetSolutionDirectory(Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration)">
            <summary>
            Gets the solution directory from run configuration
            </summary>
            <param name="runConfiguration">Test run configuration</param>
            <returns>Solution directory</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetMaxCpuCount(System.String)">
            <summary>
            Gets the maximum CPU count from setting xml
            </summary>
            <param name="settingXml">setting xml</param>
            <returns>Maximum CPU Count</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetMaxCpuCount(Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration)">
            <summary>
            Gets the maximum CPU count from run configuration
            </summary>
            <param name="runConfiguration">Test run configuration</param>
            <returns>Maximum CPU Count</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetTreatNoTestsAsError(System.String)">
            <summary>
            Gets the value of TreatNoTestsAsError parameter from runsettings file
            </summary>
            <param name="runSettings">Runsetting string value</param>
            <returns>The value of TreatNoTestsAsError</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetTestAdaptersPaths(System.String)">
            <summary>
            Gets the test adapters path from the run configuration
            </summary>
            <param name="runSettings">Test run settings</param>
            <param name="returnNullIfNotSet">True to return null, if adapter paths is not set.</param>
            <returns>Test adapters paths</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.Common.Utilities.RunSettingsUtilities.GetLoadingStrategy(System.String)">
            <summary>
            Gets the test adapter loading strategy
            </summary>
            <param name="runSettings">Test run settings</param>
            <returns>Test adapter loading strategy</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ExternalAssemblyVersions.MicrosoftFakesAssemblyVersion">
            <summary>
            Refers to the versions of the assemblies retrieved from the
            Microsoft.QualityTools.Testing.Fakes.TestRunnerHarness package.
            The Package version can be found in "eng\Versions.props"
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DiscoveryStatus">
            <summary>
            Enums for indicating discovery status of source
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DiscoveryStatus.NotDiscovered">
            <summary>
            Indicates the sources which were not touched during discovery.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DiscoveryStatus.PartiallyDiscovered">
            <summary>
            Indicates that we started discovery of the source but something happened (cancel/abort) and we stopped processing it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DiscoveryStatus.FullyDiscovered">
            <summary>
            Indicates that source was fully discovered.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DiscoveryStatus.SkippedDiscovery">
            <summary>
            Indicates that source was skipped in discovery.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IParallelOperationManager">
            <summary>
            Interface defining the parallel operation manager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IParallelOperationManager.UpdateParallelLevel(System.Int32)">
            <summary>
            Update the parallelism level of the manager
            </summary>
            <param name="parallelLevel">Parallelism level</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IParallelProxyDiscoveryManager">
            <summary>
            Interface defining the parallel discovery manager
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IParallelProxyDiscoveryManager.IsAbortRequested">
            <summary>
            Indicates if user requested an abortion
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IParallelProxyDiscoveryManager.HandlePartialDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager,System.Int64,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.Boolean)">
            <summary>
            Handles Partial Discovery Complete event coming from a specific concurrent proxy discovery manager
            Each concurrent proxy discovery manager will signal the parallel discovery manager when its complete
            </summary>
            <param name="proxyDiscoveryManager">discovery manager instance</param>
            <param name="totalTests">Total Tests discovered for the concurrent discovery</param>
            <param name="lastChunk">LastChunk testcases for the concurrent discovery</param>
            <param name="isAborted">True if discovery is aborted</param>
            <returns>True if parallel discovery is complete</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IParallelProxyExecutionManager">
            <summary>
            Interface defining the parallel execution manager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IParallelProxyExecutionManager.HandlePartialRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs,System.Collections.Generic.ICollection{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Handles Partial Run Complete event coming from a specific concurrent proxy execution manager
            Each concurrent proxy execution manager will signal the parallel execution manager when its complete
            </summary>
            <param name="proxyExecutionManager">Concurrent Execution manager that completed the run</param>
            <param name="testRunCompleteArgs">RunCompleteArgs for the concurrent run</param>
            <param name="lastChunkArgs">LastChunk testresults for the concurrent run</param>
            <param name="runContextAttachments">RunAttachments for the concurrent run</param>
            <param name="executorUris">ExecutorURIs of the adapters involved in executing the tests</param>
            <returns>True if parallel run is complete</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager">
            <summary>
            Orchestrates discovery operations for the engine communicating with the client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager.Initialize(System.Boolean)">
            <summary>
            Initializes test discovery. Create the test host, setup channel and initialize extensions.
            <param name="skipDefaultAdapters">Skip default adapters flag.</param>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager.InitializeDiscovery(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2,System.Boolean)">
            <summary>
            Initializes test discovery. Create the test host, setup channel and initialize extensions.
            </summary>
            
            <param name="discoveryCriteria">Settings, parameters for the discovery request</param>
            <param name="eventHandler">EventHandler for handling discovery events from Engine</param>
            <param name="skipDefaultAdapters">Skip default adapters flag</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager.DiscoverTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Discovers tests
            </summary>
            <param name="discoveryCriteria">Settings, parameters for the discovery request</param>
            <param name="eventHandler">EventHandler for handling discovery events from Engine</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager.Abort">
            <summary>
            Aborts the test operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Aborts discovery operation with EventHandler.
            </summary>
            <param name="eventHandler">EventHandler for handling discovery events from Engine</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager.Close">
            <summary>
            Closes the current test operation.
            Send a EndSession message to close the test host and channel gracefully.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager">
            <summary>
            Orchestrates test execution related functionality for the engine communicating with the client.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager.IsInitialized">
            <summary>
            Gets whether current Execution Manager is initialized or not
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager.Initialize(System.Boolean)">
            <summary>
            Initializes test execution. Create the test host, setup channel and initialize extensions.
            <param name="skipDefaultAdapters">Skip default adapters flag.</param>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager.InitializeTestRun(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Initializes test execution. Create the test host, setup channel and initialize extensions.
            </summary>
            
            <param name="testRunCriteria">The settings/options for the test run.</param>
            <param name="eventHandler">EventHandler for handling execution events from Engine.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager.StartTestRun(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Starts the test run.
            </summary>
            <param name="testRunCriteria">The settings/options for the test run.</param>
            <param name="eventHandler">EventHandler for handling execution events from Engine.</param>
            <returns>The process id of the runner executing tests.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager.Cancel(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Cancels the test run. On the test host, this will send a message to adapters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Aborts the test operation. This will forcefully terminate the test host.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager.Close">
            <summary>
            Closes the current test operation by sending a end session message.
            Terminates the test host.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyTestSessionManager">
            <summary>
            Orchestrates test session related functionality for the engine communicating with the
            client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyTestSessionManager.StartSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
             <summary>
             Starts the test session based on the test session criteria.
             </summary>
            
             <param name="eventsHandler">
             Event handler for handling events fired during test session management operations.
             </param>
             <param name="requestData">The request data.</param>
            
             <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyTestSessionManager.StopSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
             <summary>
             Stops the test session.
             </summary>
            
             <param name="requestData">The request data.</param>
            
             <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestEngine">
            <summary>
            Defines the functionality of a test engine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestEngine.GetDiscoveryManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
             <summary>
             Fetches the DiscoveryManager for this engine. This manager would provide all
             functionality required for discovery.
             </summary>
            
             <param name="requestData">
             The request data for providing discovery services and data.
             </param>
             <param name="testHostManager">Test host manager for the current test discovery.</param>
             <param name="discoveryCriteria">The discovery criteria.</param>
            
             <returns>An IProxyDiscoveryManager object that can do discovery.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestEngine.GetExecutionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
             <summary>
             Fetches the ExecutionManager for this engine. This manager would provide all
             functionality required for execution.
             </summary>
            
             <param name="requestData">
             The request data for providing common execution services and data.
             </param>
             <param name="testHostManager">Test host manager for the current test run.</param>
             <param name="testRunCriteria">Test run criteria of the current test run.</param>
            
             <returns>An IProxyExecutionManager object that can do execution.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestEngine.GetTestSessionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger)">
             <summary>
             Fetches the TestSessionManager for this engine. This manager would provide all
             functionality required for test session management.
             </summary>
            
             <param name="requestData">
             The request data for providing test session services and data.
             </param>
             <param name="testSessionCriteria">
             Test session criteria of the current test session.
             </param>
            
             <returns>An IProxyTestSessionManager object that can manage test sessions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestEngine.GetExtensionManager">
             <summary>
             Fetches the extension manager for this engine. This manager would provide extensibility
             features that this engine supports.
             </summary>
            
             <returns>An ITestExtensionManager object that helps with extensibility.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestEngine.GetLoggerManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData)">
             <summary>
             Fetches the logger manager for this engine. This manager will provide logger
             extensibility features that this engine supports.
             </summary>
            
             <param name="requestData">
             The request data for providing common execution services and data.
             </param>
            
             <returns>An ITestLoggerManager object that helps with logger extensibility.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestExtensionManager">
            <summary>
            Orchestrates extensions for this engine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestExtensionManager.UseAdditionalExtensions(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Update the extensions data
            </summary>
            <param name="pathToAdditionalExtensions">List of extension paths</param>
            <param name="skipExtensionFilters">Skips filtering of extensions (if true)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestExtensionManager.ClearExtensions">
            <summary>
            Clear the extensions data
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager">
            <summary>
            Orchestrates logger operations for this engine.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.LoggersInitialized">
            <summary>
            Loggers initialized flag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.Initialize(System.String)">
            <summary>
            Initialize loggers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleTestRunMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)">
            <summary>
            Handles test run message.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleTestRunStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs)">
            <summary>
            Handles test run start.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleTestRunStatsChange(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs)">
            <summary>
            Handles test run stats change.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleTestRunComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs)">
            <summary>
            Handles test run complete.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleDiscoveryMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)">
            <summary>
            Handles discovery message.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleDiscoveryStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryStartEventArgs)">
            <summary>
            Handles discovery start.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleDiscoveredTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveredTestsEventArgs)">
            <summary>
            Handles discovered tests.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager.HandleDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs)">
            <summary>
            Handles discovery complete.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext">
            <summary>
            Stores information about test execution context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext"/> class.
            </summary>
            <remarks>This constructor doesn't perform any parameter validation, it is meant to be used for serialization."/></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.#ctor(System.Int64,System.TimeSpan,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext"/> class.
            </summary>
            <param name="frequencyOfRunStatsChangeEvent">Frequency of run stats event.</param>
            <param name="runStatsChangeEventTimeout">Timeout that triggers sending results regardless of cache size.</param>
            <param name="inIsolation">Whether execution is out of process</param>
            <param name="keepAlive">Whether executor process should be kept running after test run completion</param>
            <param name="isDataCollectionEnabled">Whether data collection is enabled or not.</param>
            <param name="areTestCaseLevelEventsRequired">Indicates whether test case level events are required.</param>
            <param name="hasTestRun">True if ExecutionContext is associated with Test run, false otherwise.</param>
            <param name="isDebug">True if ExecutionContext needs debugger, false otherwise.</param>
            <param name="testCaseFilter">Filter criteria string for filtering tests.</param>
            <param name="filterOptions">Additional options for test case filter.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.FrequencyOfRunStatsChangeEvent">
            <summary>
            Gets or sets the frequency of run stats event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.RunStatsChangeEventTimeout">
            <summary>
            Gets or sets the timeout that triggers sending results regardless of cache size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.InIsolation">
            <summary>
            Gets or sets a value indicating whether execution is out of process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.KeepAlive">
            <summary>
            Gets or sets a value indicating whether executor process should be kept running after test run completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.AreTestCaseLevelEventsRequired">
            <summary>
            Gets or sets a value indicating whether test case level events need to be sent or not
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.IsDebug">
            <summary>
            Gets or sets a value indicating whether execution is in debug mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.TestCaseFilter">
            <summary>
            Gets or sets the filter criteria for run with sources to filter test cases.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.FilterOptions">
            <summary>
            Gets or sets additional options for filtering.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.IsDataCollectionEnabled">
            <summary>
            Gets or sets a value indicating whether data collection is enabled or not.
            </summary>
            <remarks>This does not need to be serialized over to the test host process.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.HasTestRun">
            <summary>
            Gets or sets a value indicating whether execution context is associated with a test run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext.TestRunConfiguration">
            <summary>
            Gets or sets a configuration associated with this run.
            </summary>
            <remarks>It is not serialized over <c>wcf </c> as the information is available in the run settings</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IDataCollectorAttachmentsProcessorsFactory">
            <summary>
            Creates and return a list of available attachments processor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IDataCollectorAttachmentsProcessorsFactory.Create(Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector[],Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)">
            <summary>
            Creates and return a list of available attachments processor
            </summary>
            <param name="invokedDataCollector">List of invoked data collectors</param>
            <param name="logger">Message logger</param>
            <returns>List of attachments processors</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DataCollectorAttachmentProcessor">
            <summary>
            Registered data collector attachment processor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DataCollectorAttachmentProcessor.FriendlyName">
            <summary>
            Data collector FriendlyName
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.DataCollectorAttachmentProcessor.DataCollectorAttachmentProcessorInstance">
            <summary>
            Data collector attachment processor instance
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler">
            <summary>
            The Test Case level events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler.SendTestCaseStart(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)">
            <summary>
             Report start of executing a test case.
            </summary>
            <param name="testCase">Details of the test case whose execution is just started.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler.SendTestCaseEnd(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)">
            <summary>
            Report end of executing a test case.
            </summary>
            <param name="testCase">Details of the test case.</param>
            <param name="outcome">Result of the test case executed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler.SendTestResult(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)">
            <summary>
            Sends the test result
            </summary>
            <param name="result"> The result. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler.SendSessionStart(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Send session start event.
            The purpose of this is to perform any initialization before the test case level events are sent.
            </summary>
            <param name="properties"> The session start properties. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler.SendSessionEnd">
            <summary>
            Sends session end event.
            The purpose of this is to perform any cleanup after the test case level events are sent.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestRunAttachmentsProcessingManager">
            <summary>
            Orchestrates test run attachments processing operations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestRunAttachmentsProcessingManager.ProcessTestRunAttachmentsAsync(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunAttachmentsProcessingEventsHandler,System.Threading.CancellationToken)">
            <summary>
            Processes attachments and provides results through handler
            </summary>
            <param name="runSettingsXml">RunSettings</param>
            <param name="attachments">Collection of attachments</param>
            <param name="invokedDataCollector">Collection of invoked data collectors</param>
            <param name="eventHandler">EventHandler for handling test run attachments processing event</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestRunAttachmentsProcessingManager.ProcessTestRunAttachmentsAsync(System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector},System.Threading.CancellationToken)">
            <summary>
            Processes attachments
            </summary>
            <param name="runSettingsXml">RunSettings</param>
            <param name="attachments">Collection of attachments</param>
            <param name="invokedDataCollector">Collection of invoked data collectors</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of attachments.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IDiscoveryManager">
            <summary>
            Orchestrates discovery operations for the engine communicating with the test host process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IDiscoveryManager.Initialize(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Initializes the discovery manager.
            </summary>
            <param name="pathToAdditionalExtensions"> The path to additional extensions. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IDiscoveryManager.DiscoverTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Discovers tests
            </summary>
            <param name="discoveryCriteria">Settings, parameters for the discovery request</param>
            <param name="eventHandler">EventHandler for handling discovery events from Engine</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IDiscoveryManager.Abort">
            <summary>
            Aborts the test discovery.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IDiscoveryManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2)">
            <summary>
            Aborts the test discovery with eventHandler.
            </summary>
            <param name="eventHandler">EventHandler for handling discovery events from Engine</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IExecutionManager">
            <summary>
            Orchestrates test execution related functionality for the engine communicating with the test host process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IExecutionManager.Initialize(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler)">
            <summary>
            Initializes the execution manager.
            </summary>
            <param name="pathToAdditionalExtensions"> The path to additional extensions. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IExecutionManager.StartTestRun(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Starts the test run with sources.
            </summary>
            <param name="adapterSourceMap"> The adapter Source Map.  </param>
            <param name="package"> The packages which actually contain sources. A testhost can at max execute for one package at time
            Package can be null if test source, and package are same
            </param>
            <param name="runSettings"> The run Settings.  </param>
            <param name="testExecutionContext"> The test Execution Context. </param>
            <param name="testCaseEvents"> EventHandler for handling test cases level events from Engine. </param>
            <param name="eventHandler"> EventHandler for handling execution events from Engine. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IExecutionManager.StartTestRun(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase},System.String,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Starts the test run with tests.
            </summary>
            <param name="tests"> The test list. </param>
            <param name="package"> The packages which actually contain sources. A testhost can at max execute for one package at time
            Package can be null if test source, and package are same
            </param>
            <param name="runSettings"> The run Settings.  </param>
            <param name="testExecutionContext"> The test Execution Context. </param>
            /// <param name="testCaseEvents"> EventHandler for handling test cases level events from Engine. </param>
            <param name="eventHandler"> EventHandler for handling execution events from Engine. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IExecutionManager.Cancel(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Cancel the test execution.
            </summary>
            <param name="eventHandler"> EventHandler for handling execution events from Engine. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IExecutionManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)">
            <summary>
            Aborts the test execution.
            </summary>
            <param name="eventHandler"> EventHandler for handling execution events from Engine. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.ITestHostManagerFactory">
            <summary>
            The factory that provides discovery and execution managers to the test host.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.ITestHostManagerFactory.GetDiscoveryManager">
            <summary>
            The discovery manager instance for any discovery related operations inside of the test host.
            </summary>
            <returns>The discovery manager.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.ITestHostManagerFactory.GetExecutionManager">
            <summary>
            The execution manager instance for any discovery related operations inside of the test host.
            </summary>
            <returns>The execution manager.</returns>
        </member>
    </members>
</doc>
